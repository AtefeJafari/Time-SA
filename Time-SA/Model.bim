{
  "name": "SemanticModel",
  "compatibilityLevel": 1500,
  "model": {
    "culture": "en-US",
    "dataAccessOptions": {
      "fastCombine": true
    },
    "dataSources": [
      {
        "type": "structured",
        "name": "SQL/etl;amardb",
        "maxConnections": 100,
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "etl",
            "database": "amardb"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "etl;amardb",
          "Username": "pbi",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/etl;pbi",
        "maxConnections": 100,
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "etl",
            "database": "pbi"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "etl;pbi",
          "Username": "pbi",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/etl;Rayvarz",
        "maxConnections": 100,
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "etl",
            "database": "Rayvarz"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "etl;Rayvarz",
          "Username": "pbi",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/pbidb;iedb",
        "maxConnections": 100,
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "pbidb",
            "database": "iedb"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "pbidb;iedb",
          "Username": "iedb",
          "EncryptConnection": false
        }
      },
      {
        "type": "structured",
        "name": "SQL/etl;ABDDashboardDW",
        "maxConnections": 100,
        "connectionDetails": {
          "protocol": "tds",
          "address": {
            "server": "etl",
            "database": "ABDDashboardDW"
          },
          "authentication": null,
          "query": null
        },
        "credential": {
          "AuthenticationKind": "UsernamePassword",
          "kind": "SQL",
          "path": "etl;ABDDashboardDW",
          "Username": "pbi",
          "EncryptConnection": false
        }
      },
      {
        "name": "SqlServer etl AMARDB",
        "connectionString": "Provider=SQLNCLI11;Data Source=etl;Initial Catalog=AMARDB;User ID=pbi;Persist Security Info=false",
        "impersonationMode": "impersonateServiceAccount",
        "maxConnections": 100,
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "SqlServer"
          }
        ]
      },
      {
        "name": "SqlServer etl ABDDashboardDW",
        "connectionString": "Provider=SQLNCLI11;Data Source=etl;User ID=pbi;Persist Security Info=false;Initial Catalog=ABDDashboardDW",
        "impersonationMode": "impersonateServiceAccount",
        "maxConnections": 100,
        "annotations": [
          {
            "name": "ConnectionEditUISource",
            "value": "SqlServer"
          }
        ]
      }
    ],
    "tables": [
      {
        "name": "qv MPS",
        "columns": [
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "RevId",
            "dataType": "int64",
            "sourceColumn": "RevId"
          },
          {
            "name": "RevName",
            "dataType": "string",
            "sourceColumn": "RevName"
          },
          {
            "name": "TargetTypeId",
            "dataType": "int64",
            "sourceColumn": "TargetTypeId"
          },
          {
            "name": "TargetType",
            "dataType": "string",
            "sourceColumn": "TargetType"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "Amount",
            "dataType": "double",
            "sourceColumn": "Amount"
          },
          {
            "name": "BomVersion",
            "dataType": "int64",
            "sourceColumn": "BomVersion"
          },
          {
            "name": "BatchSize",
            "dataType": "double",
            "sourceColumn": "BatchSize"
          },
          {
            "name": "BatchCount",
            "dataType": "double",
            "sourceColumn": "BatchCount",
            "formatString": "0.00"
          },
          {
            "name": "ProcessNameEn",
            "dataType": "string",
            "sourceColumn": "ProcessNameEn"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "IsLastF",
            "dataType": "boolean",
            "sourceColumn": "IsLastF"
          },
          {
            "name": "IsBudgetMonth",
            "dataType": "boolean",
            "sourceColumn": "IsBudgetMonth"
          },
          {
            "name": "Reason",
            "dataType": "string",
            "sourceColumn": "Reason"
          },
          {
            "name": "StockStatusId",
            "dataType": "int64",
            "sourceColumn": "StockStatusId"
          },
          {
            "name": "StockStatus",
            "dataType": "string",
            "sourceColumn": "StockStatus"
          },
          {
            "name": "FaPrice",
            "dataType": "double",
            "sourceColumn": "FaPrice"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "RiskTypeId",
            "dataType": "int64",
            "sourceColumn": "RiskTypeId"
          },
          {
            "name": "RiskTypeName",
            "dataType": "string",
            "sourceColumn": "RiskTypeName"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "IsSelect",
            "dataType": "boolean",
            "sourceColumn": "IsSelect"
          },
          {
            "name": "ALow",
            "dataType": "double",
            "sourceColumn": "ALow"
          },
          {
            "name": "AMid",
            "dataType": "double",
            "sourceColumn": "AMid"
          },
          {
            "name": "AHigh",
            "dataType": "double",
            "sourceColumn": "AHigh"
          },
          {
            "name": "PLow",
            "dataType": "double",
            "sourceColumn": "PLow"
          },
          {
            "name": "PMid",
            "dataType": "double",
            "sourceColumn": "PMid"
          },
          {
            "name": "PHigh",
            "dataType": "double",
            "sourceColumn": "PHigh"
          },
          {
            "name": "QLow",
            "dataType": "double",
            "sourceColumn": "QLow"
          },
          {
            "name": "QMid",
            "dataType": "double",
            "sourceColumn": "QMid"
          },
          {
            "name": "QHigh",
            "dataType": "double",
            "sourceColumn": "QHigh"
          },
          {
            "name": "OeeLow",
            "dataType": "double",
            "sourceColumn": "OeeLow"
          },
          {
            "name": "OeeMid",
            "dataType": "double",
            "sourceColumn": "OeeMid"
          },
          {
            "name": "OeeHigh",
            "dataType": "double",
            "sourceColumn": "OeeHigh"
          },
          {
            "name": "id",
            "dataType": "int64",
            "sourceColumn": "id"
          },
          {
            "type": "calculated",
            "name": "CalRunningTimePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              "if(",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )  /60 ,",
              "\t\t   ",
              " CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )  /60) =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )/60 ,",
              "\t\t   ",
              "\t\tCALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )/60)= BLANK() ,",
              "",
              "if(",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           ) /60 ,",
              "\t\tCALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           ) /60 )=BLANK() ,",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "   CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            )/60,",
              "\t\t\t CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            )/60",
              "\t\t\t",
              "\t\t\t)  ",
              "",
              "",
              ",",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           ) /60 ,",
              "\t\tCALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           ) /60 )",
              "",
              ")",
              " ,",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              "CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )/60 ,",
              "\t\t   ",
              "\t\tCALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                   && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "              )/60)),",
              "",
              "   if('qv MPS'[CountSemiRayvarz]>1,",
              "   CALCULATE(sum('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                     &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                     )",
              "            )  /60 ,",
              "\t\t   ",
              " CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )  /60)",
              "",
              ")"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalPMTime300PerRev",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "([CalCountPM300PerRev]-[CalCountPM600PerRev])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv MPS'[MachineId],",
              "'qv MachineService'[ServiceTypeId],760)"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalPMTime600PerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "([CalCountPM600PerRev]-[CalCountPM2000PerRev])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv MPS'[MachineId],'qv MachineService'[ServiceTypeId],762)",
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalCountPM300PerRev",
            "dataType": "double",
            "isDataTypeInferred": false,
            "description": "0",
            "expression": [
              "if( FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],300),1)<1,0,",
              " FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],300),1))",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalCountPM600PerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],600),1)<1,0,FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],600),1))",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalCountPM2000PerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],2000),1)<1,0,FLOOR(DIVIDE('qv MPS'[TotalProductionTimePerMachinePerRev(h)],2000),1))",
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalPMTime2000PerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "([CalCountPM2000PerRev])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv MPS'[MachineId],",
              "'qv MachineService'[ServiceTypeId],761)"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalTotalPMPerMachine(h)PerRev",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "IF('qv MPS'[ProcessId] = 20 , 0 , ('qv MPS'[CalPMTime300PerRev] + 'qv MPS'[CalPMTime600PerRev] + 'qv MPS'[CalPMTime2000PerRev])  )",
              "// * 'qv MPS'[CalAllocation%])",
              " // prosessid=20 is manual packaging"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalAllocation%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "DIVIDE(CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              " && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && ",
              "'qv MPS'[Month]=EARLIER('qv MPS'[Month]))) ,",
              "CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS',  'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]))))",
              "",
              "    //   'qv MPS'[MachineId]=",
              "   //    EARLIER('qv MPS'[MachineId]) &&",
              "  //    SUM('qv MPS'[CalTotalProductionTime]",
              " "
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "CalRankMonthInRevId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RANKX(FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])),'qv MPS'[Month],,ASC,Dense)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalTraining(h)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "12",
              "",
              "/*",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=BLANK(),BLANK(),",
              " ",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=0,0 ,",
              "",
              "DIVIDE('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]*12 , 'qv MPS'[TotalCapacityMachinePerMonth(h)])",
              "",
              "))",
              "*/",
              "",
              "",
              "",
              "//LOOKUPVALUE( 'qv MachineTimeOffIndex'[CalTraining(min)] , 'qv MachineTimeOffIndex'[MachineId] , 'qv MPS'[MachineId]",
              "            //  , 'qv MachineTimeOffIndex'[BudgetVersion], 'qv MPS'[CalRelatedBudgetVersion])  / 60",
              "",
              "",
              "/*",
              "  ((12 * 60)- LOOKUPVALUE( 'qv MachineTimeOffIndex'[RestingLongDayShift] , 'qv MachineTimeOffIndex'[MachineId] , 'qv MPS'[MachineId]",
              "               , 'qv MachineTimeOffIndex'[BudgetVersion], 'qv MPS'[CalRelatedBudgetVersion]))  /60",
              "",
              "*/"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalSizePartChangingTime(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "// zamane tavize ghaleb ya haman az har mahsol b mahsole badi ast",
              "",
              "var VProcessId = 'qv MPS'[ProcessId]",
              "",
              "Var VTotalBatchCountPerMachinePerMonthPerRevId =",
              "CALCULATE(sum('qv MPS'[BatchCount]) , FILTER('qv MPS' , 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month])",
              "&& 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              " ",
              "",
              "return ",
              "",
              "    IF(VProcessId = 10 || VProcessId = 11 ,",
              "   ((('qv MPS'[CalRayvarzCountPerMachinePerMonth] -1) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)]) + ((VTotalBatchCountPerMachinePerMonthPerRevId/2) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)] ))/60 ,",
              "",
              "   IF(VProcessId = 13 , ",
              "   ((('qv MPS'[CalRayvarzCountPerMachinePerMonth] -1) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)]) + ((VTotalBatchCountPerMachinePerMonthPerRevId/3) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)]))/60 ,",
              " ",
              "    IF(VProcessId=38 ,",
              "     ((('qv MPS'[CalRayvarzCountPerMachinePerMonth] -1) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)]) + ((VTotalBatchCountPerMachinePerMonthPerRevId/6) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)] ))/60 ,",
              "",
              "      (('qv MPS'[CalRayvarzCountPerMachinePerMonth] -1) * 'qv MPS'[CalAvgSPCPerMonthPerMachine(min)])/60",
              "     )",
              "      )",
              "       )"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalRelatedBudgetVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv VersionBudget'[VersionBudgetId],'qv VersionBudget'[RevisionId],'qv MPS'[RevId])"
          },
          {
            "type": "calculated",
            "name": "CalTotalProductionBox--",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(SUMX('qv MPS','qv MPS'[BatchSize]*'qv MPS'[BatchCount])",
              ", FILTER('qv MPS' , 'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) ))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalRestingTime(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "(LOOKUPVALUE('qv ProductMachineVisualIndexByBomVersion'[RestPerDay],'qv ProductMachineVisualIndexByBomVersion'[MachineId],",
              "'qv MPS'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv MPS'[CalRelatedBudgetVersion])",
              "*'qv MPS'[TotalCapacityMachinePerMonth(h)])/24",
              "",
              "",
              "/*",
              "",
              "var lastbudget = CALCULATE(max('qv MachineShiftAssignment'[CalRelatedBugetVersion]) ,",
              "          FILTER('qv MachineShiftAssignment', 'qv MachineShiftAssignment'[MachineId]='qv MPS'[MachineId] &&  'qv MachineShiftAssignment'[Month]='qv MPS'[Month] ))",
              "",
              "",
              "return ",
              "",
              "",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=BLANK(),BLANK(),",
              "",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=0,0 ,",
              "",
              " if( (CALCULATE(SUM('qv MachineShiftAssignment'[CalTotalRestingPerShift(min)]),FILTER('qv MachineShiftAssignment' , 'qv MachineShiftAssignment'[MachineId]='qv MPS'[MachineId]",
              "   &&  'qv MachineShiftAssignment'[CalRelatedBugetVersion]='qv MPS'[CalRelatedBudgetVersion] ",
              "    && 'qv MachineShiftAssignment'[Month]='qv MPS'[Month])) /60) =BLANK() , ",
              "",
              "(CALCULATE(SUM('qv MachineShiftAssignment'[CalTotalRestingPerShift(min)]),FILTER('qv MachineShiftAssignment' , 'qv MachineShiftAssignment'[MachineId]='qv MPS'[MachineId]",
              "   &&  'qv MachineShiftAssignment'[CalRelatedBugetVersion] = lastbudget",
              "    && 'qv MachineShiftAssignment'[Month]='qv MPS'[Month])) /60) ",
              "  ,",
              "  (CALCULATE(SUM('qv MachineShiftAssignment'[CalTotalRestingPerShift(min)]),FILTER('qv MachineShiftAssignment' , 'qv MachineShiftAssignment'[MachineId]='qv MPS'[MachineId]",
              "      &&  'qv MachineShiftAssignment'[CalRelatedBugetVersion]='qv MPS'[CalRelatedBudgetVersion] ",
              "     && 'qv MachineShiftAssignment'[Month]='qv MPS'[Month])) /60)",
              "",
              " ",
              " ))",
              ") ",
              "*/",
              "",
              " ",
              "",
              "/*",
              "",
              "if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=BLANK(),BLANK(),",
              "",
              "if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=0,0 ,",
              "",
              "",
              " CALCULATE(SUM('qv MachineShiftAssignment'[CalTotalRestingPerShift(min)]),FILTER('qv MachineShiftAssignment' , 'qv MachineShiftAssignment'[MachineId]='qv MPS'[MachineId]",
              "  &&  'qv MachineShiftAssignment'[CalRelatedBugetVersion]='qv MPS'[CalRelatedBudgetVersion] ",
              "  && 'qv MachineShiftAssignment'[Month]='qv MPS'[Month])) /60 ",
              ")) ",
              "",
              "*/",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalAvgSPCPerMachinePerRayvarz(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(AVERAGE('qv SizepartIndex'[CalSPC(min)]) , filter('qv SizepartIndex',",
              "   'qv SizepartIndex'[MachineId] = 'qv MPS'[MachineId] && 'qv SizepartIndex'[RayvarzId] = 'qv MPS'[RayvarzId]))"
            ]
          },
          {
            "type": "calculated",
            "name": "CalAvgSPCPerMonthPerMachine(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(AVERAGE('qv MPS'[CalAvgSPCPerMachinePerRayvarz(min)]) , filter('qv MPS',",
              "                   'qv MPS'[MachineId] =EARLIER('qv MPS'[MachineId])  ",
              "                 && 'qv MPS'[Month] = EARLIER('qv MPS'[Month]) ",
              "                 && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId] )",
              "          ))"
            ]
          },
          {
            "type": "calculated",
            "name": "CalRayvarzCountPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(",
              "  SUMMARIZE(",
              "    FILTER('qv MPS',",
              "      'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && ",
              "      'qv MPS'[MachineId] = EARLIER('qv MPS'[MachineId])  &&",
              "      'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && 'qv MPS'[BatchCount]<>0),'qv MPS'[RayvarzId]))",
              "",
              "",
              "/* CALCULATE(DISTINCTCOUNTNOBLANK('qv MPS'[RayvarzId]),FILTER('qv MPS','qv MPS'[Month]=EARLIER('qv MPS'[Month]) &&",
              " 'qv MPS'[MachineId] = EARLIER('qv MPS'[MachineId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) ))",
              "*/",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalRunningTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              " var Vbatchcount = if('qv MPS'[ProcessId] in {13,22,38},ROUNDUP('qv MPS'[BatchCount],0) ,  // Blending- Manufacture-RollerCompactor",
              " ",
              " if('qv MPS'[ProcessId] in {10,11,16},ROUNDUP('qv MPS'[BatchCount]*'qv MPS'[NoSubBatch],0)  //Coating-Drying-Granulation-",
              " ,",
              " ",
              " 'qv MPS'[BatchCount]))",
              "",
              "  return ",
              "",
              " 'qv MPS'[CalRunningTimePerBatch(h)] *  'qv MPS'[BatchCount]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalCIPTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId]  && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CIPTime]),",
              "                FILTER( 'qv ProductMachineVisualIndexByBomVersion',",
              "                        'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                        'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalTimeSWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "// zamane tavize serie ya  raftan az har subbatch b subbatch badi dar yek mahsol",
              "/*",
              "var VProcessId = 'qv MPS'[ProcessId]",
              "Var VTimeSOneBatch = CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                     //&&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )",
              "",
              "",
              "Var VNOSubBatch = CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[NoSubBatch]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                     // &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )",
              "",
              "return ",
              "     /// VprocessId=16 --> coating ro koja benevisam?",
              "   if('qv MPS'[BatchCount]<1 , 0 ,",
              "",
              "   IF(VProcessId = 10 || VProcessId = 11  ,",
              " (((VNOSubBatch-1) * 'qv MPS'[BatchCount]) * VTimeSOneBatch + (ROUNDUP((('qv MPS'[BatchCount]-1)/2),0) * VTimeSOneBatch ))/60 ,",
              "",
              " IF(VProcessId = 13  , ",
              " ((ROUNDUP(('qv MPS'[BatchCount]-1),0) * VTimeSOneBatch) - (ROUNDUP((('qv MPS'[BatchCount]-1)/3),0) * VTimeSOneBatch))/60 ,",
              " ",
              "  IF(VProcessId=38  ,",
              "  (((VNOSubBatch-1) * 'qv MPS'[BatchCount]) * VTimeSOneBatch + (ROUNDUP(('qv MPS'[BatchCount]-1/6),0) * VTimeSOneBatch ))/60 ,",
              "",
              " (((VNOSubBatch-1) * 'qv MPS'[BatchCount]) * VTimeSOneBatch + (ROUNDUP(('qv MPS'[BatchCount]-1),0) * VTimeSOneBatch ))/60 ",
              "      )",
              "       )",
              "       )",
              ")",
              "*/",
              "",
              " //  ('qv MPS'[BatchCount]  *  VCIPTimeOneBatch)/60",
              "",
              "",
              "ROUNDUP('qv MPS'[BatchCount],0) * 'qv MPS'[CalTimeSPerBatch(h)]"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CalTimeSPerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )      ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]&&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) )  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )       )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TimeS]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )      ) /60",
              "",
              ")",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalAvailabilityTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]  ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId]  && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalPerformanceTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalQualityTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalLoadUnloadTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              "if(",
              "  ( CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                     &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                     )",
              "             )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              "  ,",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                     && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]  ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalSahmRunning",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "DIVIDE(",
              "CALCULATE(max('qv MPS'[CalRunningTimeWholeBatch(h)])  , FILTER('qv MPS' , 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "&& 'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              " ",
              ", ",
              "     ",
              "CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "   &&  'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))               //&&  'qv MPS'[CalRankMonthInRevId]<=12  )",
              " ",
              ")",
              " // har revid bayad dar 12 mah estefade shode bashad",
              "  //  )"
            ]
          },
          {
            "type": "calculated",
            "name": "CalSahmPM(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CalSahmRunning]*'qv MPS'[PMPerMachinePerMonth(h)]"
          },
          {
            "type": "calculated",
            "name": "CalSahmTraining(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CalSahmRunning]*'qv MPS'[CalTraining(h)]"
          },
          {
            "type": "calculated",
            "name": "CalSahmResting(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CalSahmRunning]*'qv MPS'[CalRestingTime(h)]"
          },
          {
            "type": "calculated",
            "name": "CalSahmSizePartCahange(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "DIVIDE(",
              "CALCULATE(max('qv MPS'[BatchCount])  , FILTER('qv MPS' , 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "&& 'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              " ",
              ", ",
              "     ",
              "CALCULATE(SUM('qv MPS'[BatchCount]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "  &&  'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])  )",
              ")",
              "",
              " // har revid bayad dar 12 mah estefade shode bashad",
              "    )*'qv MPS'[NEWSPCTime(h)]"
            ]
          },
          {
            "type": "calculated",
            "name": "CalTotalTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "'qv MPS'[TotalTimeWholeBatch(h)]+'qv MPS'[CalSahmPM(h)]+'qv MPS'[CalSahmResting(h)]+'qv MPS'[CalSahmTraining(h)]+",
              "'qv MPS'[CalSahmSizePartCahange(h)]"
            ]
          },
          {
            "type": "calculated",
            "name": "CalTotalTimePerBox(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE(DIVIDE('qv MPS'[CalTotalTimeWholeBatch(h)],'qv MPS'[BatchCount]),('qv MPS'[BatchSize]))*60"
          },
          {
            "type": "calculated",
            "name": "CalTotalProductionTimePerMachinePerMonth(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              "",
              "",
              "",
              "/*",
              " CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "  &&  'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&  'qv MPS'[CalRankMonthInRevId]<=12  ))",
              "",
              ")*/ "
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "/*var VSemiRayvarzId=CALCULATE(DISTINCTCOUNT('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]   &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "  ))",
              "",
              "return */",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              " if(",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60) = BLANK()",
              "",
              " ,",
              "if(",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)         //min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    )",
              "              /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)                      // min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    ",
              "             )/60)=BLANK() ",
              " ,",
              "if(",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)=BLANK(),",
              "",
              "   // last budget last bom",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget  )              ",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            )/60) , ",
              "",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)",
              "",
              "",
              ") ,",
              " ",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget  )  // ghabli",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget )    //ghabli",
              "                  ",
              "            )/60)",
              "),",
              "",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60))"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimeWholeBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var Vbatchcount = if('qv MPS'[ProcessId] in {10,11,13,16,22,38},ROUNDUP('qv MPS'[BatchCount],0) ,'qv MPS'[BatchCount])",
              "// Blending- Coating-Drying-Granulation-Manufacture-RollerCompactor",
              "",
              "return ",
              "",
              "'qv MPS'[TotalTimePerBatch(h)]* Vbatchcount",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CountSemiRayvarz",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(",
              "   SUMMARIZE(",
              "    FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId]   && ",
              "       'qv ProductMachineVisualIndexByBomVersion'[MachineId] ='qv MPS'[MachineId]  &&",
              "      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]  &&",
              "      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              " ",
              "),'qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]))+0",
              "",
              "",
              "",
              "",
              "",
              " /*",
              "",
              " =CALCULATE(DISTINCTCOUNT('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]   &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "  ))",
              "",
              "",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "PMPerMachinePerMonth(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE('qv ProductMachineVisualIndexByBomVersion'[PMPercent],'qv ProductMachineVisualIndexByBomVersion'[MachineId],'qv MPS'[machineid],",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv MPS'[CalRelatedBudgetVersion]) * 'qv MPS'[TotalCapacityMachinePerMonth(h)]",
              "",
              "",
              "/*",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=BLANK(),BLANK(),",
              " ",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=0,0 ,",
              "",
              "",
              "",
              "DIVIDE('qv MPS'[CalTotalPMPerMachine(h)PerRev],'qv MPS'[TotalProductionTimePerMachinePerRev(h)])*('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)])",
              "",
              "))",
              "*/",
              "",
              "",
              "",
              "  ",
              "",
              "  // CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "  // && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) &&   'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) ))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MinRevMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " CALCULATE(MIN('qv MPS'[Month]),FILTER('qv MPS','qv MPS'[RevId]=EARLIER(('qv MPS'[RevId]))))"
          },
          {
            "type": "calculated",
            "name": "AVGActualSPCLastYear(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var minr = 'qv MPS'[MinRevMonth]",
              "var VProcessId ='qv MPS'[ProcessId]",
              "var VMachineId ='qv MPS'[MachineId]",
              "var x =CALCULATE(max('qv PerformanceReport'[MonthRank]),filter('qv PerformanceReport','qv PerformanceReport'[ShMon]=minr))",
              "",
              "",
              "return ",
              "  if(VProcessId=21 || VProcessId=22 || VProcessId=23 || VProcessId=38, // counter syrupsakht syrupfill rollercompactor",
              "",
              "  CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[ProcessID]='qv MPS'[ProcessId]&&'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              " if(VProcessId=10 && VMachineId in {38,175} ,  // MachineType: granulation: sejong 1, 2   ",
              "",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {38,175} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              " if(VProcessId=17 && VMachineId in {11,13} ,  // MachineType: blister6, blister4         ",
              "",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {11,13} && 'qv PerformanceReport'[ISValidSPCForAvg]=1  &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              "  if(VProcessId=17 && VMachineId in {12,22} ,  // MachineType: blister8, blister5         ",
              "",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {12,22} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              ",if(VProcessId=17 && VMachineId in {248,249,250} ,  // MachineType: blister1, blister2, blister11         ",
              "",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {248,249,250} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              ",if(VProcessId=16 && VMachineId in {64,117,118,129,244} ,  // MachineType: coating sf170-1,2,3 -namdar2 -namdar10",
              "",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {64,117,118,129,244} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              "//if(VProcessId=13 || VProcessId=11 || VProcessId=14 || VProcessId=15 ,   // dry blender press capsulfilling",
              "",
              "if(VMachineId in {294,293,387}    // blender glatt-kilian51 -new fbd : New Machines",
              ", ",
              " CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "    'qv PerformanceReport'[ProcessId]='qv MPS'[ProcessId] && 'qv PerformanceReport'[ISValidSPCForAvg]=1  &&",
              "    'qv PerformanceReport'[ShMon]<= minr  &&",
              "   ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "    'qv PerformanceReport'[PlanTypeId]=28)) ",
              ",",
              "",
              "  CALCULATE(AVERAGE('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]='qv MPS'[MachineId]&& 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              "",
              ")))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "NEWSPCTime(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "LOOKUPVALUE('qv ProductMachineVisualIndexByBomVersion'[SPCPercent],'qv ProductMachineVisualIndexByBomVersion'[MachineId],",
              "'qv MPS'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv MPS'[CalRelatedBudgetVersion])*'qv MPS'[TotalCapacityMachinePerMonth(h)]",
              "",
              "",
              "/*",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=BLANK(),BLANK(),",
              " ",
              " if('qv MPS'[CalTotalProductionTimePerMachinePerMonth(h)]=0,0 ,",
              "",
              " (('qv MPS'[CalRayvarzCountPerMachinePerMonth]-1)*'qv MPS'[AVGActualSPCLastYear(min)])/60",
              "",
              "))",
              "*/",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalProductionTimePerMachinePerRev(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(SUM('qv MPS'[CalRunningTimeWholeBatch(h)]) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "  && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) ))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RayvarzText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "'qv MPS'[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "SPCPercent",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " 'qv MPS'[NEWSPCTime(h)]/'qv MPS'[WholeTimePerMachinePerMonth(h)]"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PMPercent",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": " 'qv MPS'[PMPerMachinePerMonth(h)]/'qv MPS'[WholeTimePerMachinePerMonth(h)]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "LoadingUtilization%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "DIVIDE('qv MPS'[WholeTimePerMachinePerMonth(h)],'qv MPS'[TotalCapacityMachinePerMonth(h)],0)",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "CycleTimeWholeBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  (CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           ) /60 ) *'qv MPS'[BatchCount] //  / 'qv MPS'[BatchS ize]"
            ]
          },
          {
            "type": "calculated",
            "name": "RunningUtilization%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "if(DIVIDE(CALCULATE(sum('qv MPS'[CycleTimeWholeBatch]),FILTER('qv MPS',  'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) ",
              "&& 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]))),",
              "",
              "('qv MPS'[TotalCapacityMachinePerMonth(h)] -'qv MPS'[CalTraining(h)]-'qv MPS'[PMPerMachinePerMonth(h)]-'qv MPS'[NEWSPCTime(h)]-'qv MPS'[CalRestingTime(h)]))<0,0,",
              "",
              "DIVIDE(CALCULATE(sum('qv MPS'[CycleTimeWholeBatch]),FILTER('qv MPS',  'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) ",
              "&& 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]))),",
              "",
              "('qv MPS'[TotalCapacityMachinePerMonth(h)] -'qv MPS'[CalTraining(h)]-'qv MPS'[PMPerMachinePerMonth(h)]-'qv MPS'[NEWSPCTime(h)]-'qv MPS'[CalRestingTime(h)]))",
              "",
              ")",
              "",
              "",
              "//return 'qv MPS'[NEWSPCTime(h)]/x",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],'qv MPS'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "WholeTimePerMachinePerMonth(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              " CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(h)]),FILTER('qv MPS',  'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month])))",
              "+'qv MPS'[CalTraining(h)]+'qv MPS'[PMPerMachinePerMonth(h)]+'qv MPS'[NEWSPCTime(h)]+'qv MPS'[CalRestingTime(h)]",
              "//return 'qv MPS'[NEWSPCTime(h)]/x",
              "",
              "           ",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalCapacityMachinePerMonth(h)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv ViewCalendarByMachine'[TotalCapacityMachinePerMonth(h)],'qv ViewCalendarByMachine'[MachineId],'qv MPS'[MachineId],'qv ViewCalendarByMachine'[ShMon],'qv MPS'[Month],'qv ViewCalendarByMachine'[RevisionId],'qv MPS'[RevId])"
          },
          {
            "type": "calculated",
            "name": "BatchAlcPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "CALCULATE(sum('qv MPS'[BatchCount]),FILTER('qv MPS','qv MPS'[MachineId]=",
              "EARLIER('qv MPS'[MachineId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) ",
              "&& 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&",
              " 'qv MPS'[ProductionType]=EARLIER('qv MPS'[ProductionType])))"
            ]
          },
          {
            "type": "calculated",
            "name": "UnitAlcPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "CALCULATE(SUMX('qv MPS','qv MPS'[BatchCount]* 'qv MPS'[BatchUnit])",
              ",FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])",
              "&& 'qv MPS'[ProductionType]=EARLIER('qv MPS'[ProductionType])))"
            ]
          },
          {
            "type": "calculated",
            "name": "BatchKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv BomDetailsAllVersion'[BatchKiloNet]),FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[RayvarzId]='qv MPS'[RayvarzId] && 'qv BomDetailsAllVersion'[Version]='qv MPS'[BomVersion]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "BoxAlcPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(SUMX('qv MPS','qv MPS'[BatchCount]* 'qv MPS'[BatchSize]),",
              " FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])",
              " && 'qv MPS'[ProductionType]=EARLIER('qv MPS'[ProductionType]) ))"
            ],
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "KiloAlcPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "CALCULATE(SUMX('qv MPS','qv MPS'[BatchCount]* 'qv MPS'[BatchKilo]),FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "'qv MPS'[Month]=EARLIER('qv MPS'[Month]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])",
              "&& 'qv MPS'[ProductionType]=EARLIER('qv MPS'[ProductionType])))"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[StandardSpeed]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && 'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] = 'qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= 'qv MPS'[CalRelatedBudgetVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "NoInBox",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[NoInBox],'Dimqv ProductExcel'[RayvarzId],'qv MPS'[RayvarzText])"
          },
          {
            "type": "calculated",
            "name": "UnitWeight",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[Weight],'Dimqv ProductExcel'[RayvarzId],'qv MPS'[RayvarzText])"
          },
          {
            "type": "calculated",
            "name": "BatchUnit",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BatchUnit]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] = 'qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= 'qv MPS'[CalRelatedBudgetVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "BatchCountBatchBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[BatchSize]*'qv MPS'[BatchCount]"
          },
          {
            "type": "calculated",
            "name": "Coefficient",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var VprocessId= 'qv MPS'[ProcessId]",
              "var VMachineId= 'qv MPS'[MachineId]",
              "",
              "return ",
              "",
              "if(VprocessId=21 || VprocessId=13 || VprocessId=38 || VprocessId=10,  //counter-blending- rollerCompactor -granulation",
              "",
              " DIVIDE(",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              ",",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId]) && 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              "),",
              "",
              "if( VprocessId=23 ||VprocessId=14 ||VprocessId=15 || VprocessId=11 || VprocessId=16 ,   //-syrupfilling-press-capfilling-drying-Coating",
              " DIVIDE(",
              "   CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              " ,",
              "   CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              "),",
              "",
              "if( VprocessId=17 && VMachineId in {248,249,250}    //Blistering - blister1,2,11",
              "    , ",
              "  DIVIDE(",
              "   CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName]) && 'qv MPS'[MachineId] in {248,249,250} ))",
              " ,",
              "   CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId]) && 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName]) && 'qv MPS'[MachineId] in {248,249,250}))",
              " )",
              ",",
              "if( VprocessId=17 && 'qv MPS'[MachineId] in {10,11,12,13,14,22,56,123} //Blistering - othermachine",
              "     , ",
              "   DIVIDE(",
              "    CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) &&",
              "                       'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName]) && 'qv MPS'[MachineId] in {10,11,12,13,14,22,56,123}  ))",
              "  ,",
              "    CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "                   'qv MPS'[RevName]=EARLIER('qv MPS'[RevName]) && 'qv MPS'[MachineId] in {10,11,12,13,14,22,56,123}   ))",
              "  )",
              "",
              "))))"
            ]
          },
          {
            "type": "calculated",
            "name": "SpeedWeightedAvg",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[RevId], 'qv MPS'[machineid], 'qv MPS'[rayvarzid] ,'qv MPS'[StandardSpeed],",
              " 'qv MPS'[Coefficient]),'qv MPS'[StandardSpeed]*'qv MPS'[Coefficient]),",
              " filter('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])&& 'qv MPS'[machineid]=EARLIER('qv MPS'[machineid])))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NoInBoxweightedAvg",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[RevId], 'qv MPS'[machineid], 'qv MPS'[rayvarzid] ,'qv MPS'[NoInBox],",
              " 'qv MPS'[Coefficient]),'qv MPS'[NoInBox]*'qv MPS'[Coefficient]),",
              " filter('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])&& 'qv MPS'[machineid]=EARLIER('qv MPS'[machineid])))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "UnitWeightWieghtedAvg",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[RevId], 'qv MPS'[machineid], 'qv MPS'[rayvarzid] ,'qv MPS'[UnitWeight],",
              " 'qv MPS'[Coefficient]),'qv MPS'[UnitWeight]*'qv MPS'[Coefficient]),",
              " filter('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])&& 'qv MPS'[machineid]=EARLIER('qv MPS'[machineid])))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "BatchKiloWeightedAvg",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[RevId], 'qv MPS'[machineid], 'qv MPS'[rayvarzid] ,'qv MPS'[BatchKilo],",
              " 'qv MPS'[Coefficient]),'qv MPS'[BatchKilo]*'qv MPS'[Coefficient]),",
              " filter('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])&& 'qv MPS'[machineid]=EARLIER('qv MPS'[machineid])))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NoSubBatch",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NoSubBatch]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] = 'qv MPS'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= 'qv MPS'[CalRelatedBudgetVersion]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "BatchCountSubBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[NoSubBatch] * 'qv MPS'[BatchCount] "
          },
          {
            "type": "calculated",
            "name": "WeightedAvgNoSubBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[RevId], 'qv MPS'[machineid], 'qv MPS'[rayvarzid] ,'qv MPS'[NoSubBatch],",
              " 'qv MPS'[Coefficient]),'qv MPS'[NoSubBatch]*'qv MPS'[Coefficient]),",
              " filter('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])&& 'qv MPS'[machineid]=EARLIER('qv MPS'[machineid])))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "BatchCountBatchKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[BatchCount]*'qv MPS'[BatchKilo]"
          },
          {
            "type": "calculated",
            "name": "StandardPMPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TotalPMPerMachinePerRev]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           )/'qv MPS'[CountMonthPerRev]"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardRestingPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           )/'qv MPS'[CountMonthPerRev]"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardSPCPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var VprocessId = 'qv MPS'[ProcessId]",
              " return ",
              "if(",
              "CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[SPCPerMachinePerRev]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           )/'qv MPS'[CountMonthPerRev] = BLANK() ,   ",
              "",
              "   if(VprocessId=23 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 1.6 ,100) ,  //syrupfilling",
              "     if(VprocessId=17 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 2.5 ,100) ,  //Blistering",
              "       if(VprocessId=14 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 8.8 ,100) , //Press",
              "        if(VprocessId=11 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 6.8 ,100) , //Drying",
              "         if(VprocessId=16 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 5 ,100) , //coating",
              "          if(VprocessId=38 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 22 ,100) , //RollerCompactor",
              "           if(VprocessId=21 || VprocessId=15 ,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 4.5 ,100) , //Counter - capfilling",
              "            if(VprocessId=10,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 16.2 ,100) , //granulation",
              "             if(VprocessId=13,  DIVIDE('qv MPS'[TotalCapacityMachinePerMonth(h)]* 17.4 ,100)  //Blender",
              ")))))))))",
              ",",
              "",
              "CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[SPCPerMachinePerRev]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           )/'qv MPS'[CountMonthPerRev]",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "StandardTrainingPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                   )",
              "           )/'qv MPS'[CountMonthPerRev]"
            ]
          },
          {
            "type": "calculated",
            "name": "CapFreeBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "//SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "var VRunningAllocationPerMonth = CALCULATE(SUM ( 'qv MPS'[WholeBatchCal] ) , FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) &&  'qv MPS'[Month]=EARLIER( 'qv MPS'[Month]) &&",
              "                                        'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              "",
              "",
              "var VRunningCapacityPerMonth =   CALCULATE (max('qv MPS'[Subtract] ),FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) &&  'qv MPS'[Month]=EARLIER( 'qv MPS'[Month]) &&",
              "                                        'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              "",
              "",
              "",
              " Var freeTime = (VRunningCapacityPerMonth-VRunningAllocationPerMonth)",
              "",
              "return ",
              "",
              " divide(freeTime * 'qv MPS'[Coeff2],'qv MPS'[OneBatchCal])    //'qv MPS'[TotalTimePerBatch(h)]",
              "",
              "/*",
              " SUMMARIZE (",
              "                         'qv MPS',",
              "                         'qv MPS'[MachineId],",
              "                         'qv MPS'[MachineDscEn],",
              "                         'qv MPS'[Month],",
              "                         'qv MPS'[RevName],",
              "                         'qv MPS'[RayvarzId],",
              "                         'qv MPS'[BatchSize],",
              "                         'qv MPS'[BatchUnit],",
              "                         'qv MPS'[BatchKilo],",
              "                         'qv MPS'[Coefficient],",
              "                         'qv MPS'[TotalTimePerBatch(h)], ",
              "                           \"FreeTimePerProduct\", freeTime * 'qv MPS'[Coefficient],",
              "                          \"BatchFreeCap\", divide(freeTime * 'qv MPS'[Coefficient],'qv MPS'[TotalTimePerBatch(h)])",
              "",
              "                    ) // [BatchFreeCap])",
              " ",
              "",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "Subtract",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "'qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] ",
              "                           - 'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]"
            ]
          },
          {
            "type": "calculated",
            "name": "CapFreeBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CapFreeBatch]*'qv MPS'[BatchSize]"
          },
          {
            "type": "calculated",
            "name": "CapFreeKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CapFreeBatch]*'qv MPS'[BatchKilo]"
          },
          {
            "type": "calculated",
            "name": "CapFreeUnit",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[CapFreeBatch]*'qv MPS'[BatchUnit]"
          },
          {
            "type": "calculated",
            "name": "Coeff2",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var VprocessId = 'qv MPS'[ProcessId]",
              "return ",
              "",
              "  if(VprocessId=21 || VprocessId=13 || VprocessId=38 || VprocessId=10,  //counter-blending- rollerCompactor -granulation",
              "",
              " DIVIDE(",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              ",",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId]) && 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              "),",
              "",
              " DIVIDE(",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])&& 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              ",",
              "  CALCULATE(sum('qv MPS'[BatchCountBatchBox]),FILTER('qv MPS','qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[RevName]=EARLIER('qv MPS'[RevName])))",
              ")",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "OneBatchCal",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var TimeKhodesh = 'qv MPS'[TotalTimePerBatch(h)]   // ro hamon machine az bodge khodesh ya ghablo badesh",
              "",
              "return ",
              "",
              "//counter ",
              "",
              "",
              "if(TimeKhodesh<>BLANK() , TimeKhodesh,",
              "",
              " if('qv MPS'[ProcessId] in {21,10,38} && TimeKhodesh =BLANK()  //counter-granulation-rollercompactor ",
              ",",
              " (",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      max('qv ProductMachineVisualIndexByBomVersion'[MachineId])<>'qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                    )/60          ",
              "  ,",
              "   CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      max('qv ProductMachineVisualIndexByBomVersion'[MachineId])<>'qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "             )/60))",
              ",",
              " if('qv MPS'[MachineId]=37 && TimeKhodesh =BLANK() ,  // drying gea az drying new fbd bekhone",
              " ",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]=387 &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )/60          ",
              " ,",
              "  CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]= 387 &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60)",
              "",
              "",
              "",
              ", ",
              " if('qv MPS'[MachineId]=166 && TimeKhodesh =BLANK() , // blender bohl az blender glatt bekhone 294",
              "",
              "   if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]= 294 && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )/60          ",
              " ,",
              "  CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]= 294 && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60)",
              "",
              ",",
              "",
              "if('qv MPS'[MachineId] in {248,249,250} && TimeKhodesh =BLANK() , // blister 1, 2 ,11",
              "   if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId] = CALCULATE( max('qv ProductMachineVisualIndexByBomVersion'[MachineId]) ,",
              "                                 FILTER( 'qv ProductMachineVisualIndexByBomVersion' ,'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {248,249,250}",
              "                                         && 'qv ProductMachineVisualIndexByBomVersion'[MachineId] <> 'qv MPS'[MachineId])) &&",
              "",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )/60          ",
              " ,",
              "  CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId] = CALCULATE( max('qv ProductMachineVisualIndexByBomVersion'[MachineId]) ,",
              "                                 FILTER( 'qv ProductMachineVisualIndexByBomVersion' ,'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {248,249,250}",
              "                                         && 'qv ProductMachineVisualIndexByBomVersion'[MachineId] <> 'qv MPS'[MachineId])) &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60)",
              "",
              ",",
              "if('qv MPS'[MachineId] in {64,117,129,244} && TimeKhodesh =BLANK() , // coating sf170-1,2,3 , namdar 2",
              "   if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "  CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[MachineId] = CALCULATE( max('qv ProductMachineVisualIndexByBomVersion'[MachineId]) ,",
              "                                 FILTER( 'qv ProductMachineVisualIndexByBomVersion' ,'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {64,117,129,244}",
              "                                         && 'qv ProductMachineVisualIndexByBomVersion'[MachineId] <> 'qv MPS'[MachineId])) &&",
              "",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )/60          ",
              " ,",
              "  CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId] = CALCULATE( max('qv ProductMachineVisualIndexByBomVersion'[MachineId]) ,",
              "                                 FILTER( 'qv ProductMachineVisualIndexByBomVersion' ,'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {64,117,129,244}",
              "                                         && 'qv ProductMachineVisualIndexByBomVersion'[MachineId] <> 'qv MPS'[MachineId])) &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[ProcessId]='qv MPS'[ProcessId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60)",
              "",
              "))))))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "WholeBatchCal",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var Vbatchcount = if('qv MPS'[ProcessId] in {10,11,13,16,22,38},ROUNDUP('qv MPS'[BatchCount],0) ,'qv MPS'[BatchCount])",
              "// Blending- Coating-Drying-Granulation-Manufacture-RollerCompactor",
              "",
              "",
              "return ",
              "",
              "'qv MPS'[OneBatchCal]* Vbatchcount",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MachineMonthCal",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(sum('qv MPS'[WholeBatchCal]),FILTER('qv MPS',  'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && ",
              "'qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) && 'qv MPS'[Month]=EARLIER('qv MPS'[Month])))",
              "+'qv MPS'[CalTraining(h)]+'qv MPS'[PMPerMachinePerMonth(h)]+'qv MPS'[NEWSPCTime(h)]+'qv MPS'[CalRestingTime(h)]",
              ""
            ]
          },
          {
            "name": "Custom",
            "dataType": "string",
            "sourceColumn": "Custom"
          },
          {
            "type": "calculated",
            "name": "MiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " cALCULATE( max( 'CD DimBaseDates'[GYear]), FILTER('CD DimBaseDates', 'CD DimBaseDates'[ShMon]='qv MPS'[Month]))"
          },
          {
            "type": "calculated",
            "name": "MiladiQuarter",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "right(CALCULATE( max( 'CD DimBaseDates'[QuarterMi]), FILTER('CD DimBaseDates', 'CD DimBaseDates'[ShMon]='qv MPS'[month])),1)"
          },
          {
            "type": "calculated",
            "name": "ModifiedTimeWholeBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "  ",
              "//budget khodesh ya ghablish ",
              "",
              "  var revid =  CALCULATE (",
              "        max (  'qv MPS'[revid] ),",
              "        FILTER (",
              "            'qv MPS',",
              "            'qv MPS'[RayvarzId] = EARLIER ( 'qv MPS'[RayvarzId] )",
              "                && 'qv MPS'[MachineID] = EARLIER ( 'qv MPS'[MachineId] )",
              "                && 'qv MPS'[Month] = EARLIER ( 'qv MPS'[Month] )",
              "                && 'qv MPS'[CalTotalTimeWholeBatch(h)] <> BLANK()))        // && 'qv MPS'[IsLastF] = TRUE ()",
              "                ",
              "  return ",
              "",
              " CALCULATE (",
              "         sum (  'qv MPS'[CalTotalTimeWholeBatch(h)] ),",
              "        FILTER (",
              "            'qv MPS',",
              "            'qv MPS'[RayvarzId] = EARLIER ( 'qv MPS'[RayvarzId] )",
              "                && 'qv MPS'[MachineID] = EARLIER ( 'qv MPS'[MachineId] )",
              "                && 'qv MPS'[Month] = EARLIER ( 'qv MPS'[Month] ) ",
              "                && 'qv MPS'[RevId]=revid",
              "        ))"
            ]
          },
          {
            "type": "calculated",
            "name": "ModifiedBatchCount",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var revid =   CALCULATE (",
              "        max (  'qv MPS'[revid] ),",
              "        FILTER (",
              "            'qv MPS',",
              "            'qv MPS'[RayvarzId] = EARLIER ( 'qv MPS'[RayvarzId] )",
              "                && 'qv MPS'[MachineID] = EARLIER ( 'qv MPS'[MachineId] )",
              "                && 'qv MPS'[Month] = EARLIER ( 'qv MPS'[Month] ) ",
              "              && 'qv MPS'[CalTotalTimeWholeBatch(h)] <> BLANK() ))       //   && 'qv MPS'[IsLastF] = TRUE ()",
              "                ",
              "    return ",
              "",
              "  CALCULATE (",
              "          MAX(  'qv MPS'[BatchCount] ),",
              "         FILTER (",
              "             'qv MPS',",
              "             'qv MPS'[RayvarzId] = EARLIER ( 'qv MPS'[RayvarzId] )",
              "                 && 'qv MPS'[MachineID] = EARLIER ( 'qv MPS'[MachineId] )",
              "                 && 'qv MPS'[Month] = EARLIER ( 'qv MPS'[Month] ) ",
              "                 && 'qv MPS'[RevId]=revid",
              "",
              "                )) "
            ]
          },
          {
            "type": "calculated",
            "name": "IsLastRevID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var x = CALCULATE( max('qv MPS'[RevId]) , FILTER('qv MPS' , 'qv MPS'[Month]=EARLIER('qv MPS'[Month]) &&",
              "'qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId])))",
              "",
              " return ",
              " ",
              " if('qv MPS'[RevId]=x , 1,0 )",
              " "
            ]
          },
          {
            "type": "calculated",
            "name": "M_RayId",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[M_rayId],'Dimqv Machine'[MachineId],'qv MPS'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "CountMonthPerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(DISTINCTCOUNT('qv MPS'[Month]) , FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))"
          },
          {
            "type": "calculated",
            "name": "LargeDiameter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[LargeDiameter] , 'Dimqv ProductExcel'[RayvarzId], ",
              " FIXED('qv MPS'[RayvarzId],0,1))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MandrelType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[MandrelTypeIdDesc] , 'Dimqv ProductExcel'[RayvarzId], ",
              " FIXED('qv MPS'[RayvarzId],0,1))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Type",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if('qv MPS'[LargeDiameter]>16.3,\"Dtype\",\"BType\")"
          },
          {
            "type": "calculated",
            "name": "TotalTimePerBatch(OEE Actual)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "/*var VSemiRayvarzId=CALCULATE(DISTINCTCOUNT('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]   &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "  ))",
              "",
              "return */",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              " if(",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60) = BLANK()",
              "",
              " ,",
              "if(",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)         //min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    )",
              "              /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)                      // min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    ",
              "             )/60)=BLANK() ",
              " ,",
              "if(",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)=BLANK(),",
              "",
              "   // last budget last bom",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget  )              ",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            )/60) , ",
              "",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)",
              "",
              "",
              ") ,",
              " ",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget  )  // ghabli",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget )    //ghabli",
              "                  ",
              "            )/60)",
              "),",
              "",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60))"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimeWholeBatch(OEE Actual)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var Vbatchcount = if('qv MPS'[ProcessId] in {10,11,13,16,22,38},ROUNDUP('qv MPS'[BatchCount],0) ,'qv MPS'[BatchCount])",
              "// Blending- Coating-Drying-Granulation-Manufacture-RollerCompactor",
              "",
              "return ",
              "",
              "'qv MPS'[TotalTimePerBatch(OEE Actual)]* Vbatchcount",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalTotalTimeWholeBatch(OEE Actual)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "'qv MPS'[TotalTimeWholeBatch(OEE Actual)]+'qv MPS'[CalSahmPM(h)]+'qv MPS'[CalSahmResting(h)]+'qv MPS'[CalSahmTraining(h)]+",
              "'qv MPS'[CalSahmSizePartCahange(h)]"
            ]
          },
          {
            "type": "calculated",
            "name": "CalAvailabilityTimeWholeBatch(OEE Actual)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo]  ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId]  && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "",
              "return ",
              "",
              "if(",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 =BLANK() ",
              "",
              ",",
              " ",
              "if( ",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 = BLANK() ,",
              "",
              "if(",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60 =BLANK() ,",
              "",
              "   (CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            ) * 'qv MPS'[BatchCount])  /60",
              "",
              "",
              ",",
              "(CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=afterbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   )/60",
              "",
              ")",
              " ,",
              "",
              "(",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                    && 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo]='qv MPS'[BatchKilo] ",
              "                    &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=Beforbudget",
              "                    )",
              "           )     *  'qv MPS'[BatchCount]   ) /60 ",
              "",
              "  ) ,",
              "  ",
              "   ",
              "   (",
              "    CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)]),",
              "                FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                       'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                       'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                        'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] ",
              "                      &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "                      )",
              "             )     *  'qv MPS'[BatchCount]   ) /60",
              "",
              ")",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProductionType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " var x =SUMMARIZE(FILTER('qv MPS',",
              "  'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && ",
              "   'qv MPS'[BomVersion]= EARLIER('qv MPS'[BomVersion])&&",
              "   'qv MPS'[RevId]= EARLIER('qv MPS'[RevId])),'qv MPS'[ProcessId])",
              "",
              " return",
              " ",
              "if(10 in x && 11 in x && 13 in x, \"WG\",",
              "  if(10 in x && 38 in x && 13 in x,\"DG\",",
              "    if( 38 in x && 13 in x,\"DG+\",",
              "      if( 14 in x && 13 in x || 13 in x && 15 in x ,\"DC\",",
              "        if( 23 in x,\"Syrup\",",
              "          if( 14 || 15  in x  && COUNTROWS(x)=1  ,\"DC+\"",
              "))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "CoatingStatus",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE(FILTER('qv MPS',",
              "  'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && ",
              "   'qv MPS'[BomVersion]= EARLIER('qv MPS'[BomVersion])&&",
              "   'qv MPS'[RevId]= EARLIER('qv MPS'[RevId])),'qv MPS'[ProcessId])",
              "",
              "return ",
              "if('qv MPS'[shape]=\"Tablet\" , if( 16 in tbl,\"Coated\",\"Uncoated\"), 'qv MPS'[shape])",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "shape",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[TypeIdDesc],'Dimqv ProductExcel'[RayvarzId],'qv MPS'[RayvarzText])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv CompareDailyPlanHistory'[ProcessNameFa],'qv CompareDailyPlanHistory'[ProcessId],'qv MPS'[ProcessId])"
          },
          {
            "type": "calculated",
            "name": "MachineDescFa",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[MachineDscFa],'Dimqv Machine'[MachineId],'qv MPS'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "TotalTimePerBox(OEE Actual)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE('qv MPS'[TotalTimePerBatch(OEE Actual)],'qv MPS'[BatchSize])*60"
          },
          {
            "type": "calculated",
            "name": "CorrectBudgetVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv MPS'[TargetTypeId]<>47,",
              "LOOKUPVALUE(MonthBudget[TargetTypeId],MonthBudget[Month],VALUE(RIGHT('qv MPS'[Month],2))))"
            ]
          },
          {
            "type": "calculated",
            "name": "IsActualCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "CALCULATE(maX('pbi ProductionMAT'[ISActualCode]),",
              "FILTER('pbi ProductionMAT','qv MPS'[RevId]='pbi ProductionMAT'[RevisionId] &&",
              " 'pbi ProductionMAT'[Month]='qv MPS'[Month]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "IsActiveCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv MPS'[TargetTypeId]=47,1,",
              "CALCULATE(maX('pbi ProductionMAT'[IsActiveCode]),",
              "FILTER('pbi ProductionMAT','qv MPS'[RevId]='pbi ProductionMAT'[RevisionId] && 'pbi ProductionMAT'[Month]='qv MPS'[Month]))",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimePerBatch(OEENEW)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "/*var VSemiRayvarzId=CALCULATE(DISTINCTCOUNT('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion]   &&",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "  ))",
              "",
              "return */",
              "",
              "var afterbudget = CALCULATE(min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]>'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var Beforbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]<'qv MPS'[CalRelatedBudgetVersion]))",
              "",
              "var lastbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] ))",
              "",
              "var lastbomofbudget = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,",
              "         FILTER('qv ProductMachineVisualIndexByBomVersion',  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] ",
              "                                                          && 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&  'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=lastbudget))",
              "",
              "return ",
              "",
              " if(",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60) = BLANK()",
              "",
              " ,",
              "if(",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)         //min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    )",
              "              /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget)                      // min('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )   //ghabli",
              "                    ",
              "             )/60)=BLANK() ",
              " ,",
              "if(",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)=BLANK(),",
              "",
              "   // last budget last bom",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget  )              ",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=lastbomofbudget &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= lastbudget )            ",
              "                   ",
              "            )/60) , ",
              "",
              "",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget  )               //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )    //badi  ya  min < khodesh",
              "                    )",
              "              /60  ",
              " ",
              " , CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "               FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                      'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= afterbudget )              //max('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])>'qv MPS'[CalRelatedBudgetVersion] )        //badi   ya  min<khodesh",
              "                   ",
              "            )/60)",
              "",
              "",
              ") ,",
              " ",
              " if('qv MPS'[CountSemiRayvarz]>1,",
              " ",
              " CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget  )  // ghabli",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= Beforbudget )    //ghabli",
              "                  ",
              "            )/60)",
              "),",
              "",
              "if('qv MPS'[CountSemiRayvarz]>1,",
              "",
              "CALCULATE(SUM('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   )",
              "             /60  ",
              "",
              ", CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "                     'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv MPS'[BomVersion] &&",
              "                     'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] )",
              "                   ",
              "            )/60))"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimeWholeBatch(OEENew)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var Vbatchcount = if('qv MPS'[ProcessId] in {10,11,13,16,22,38},ROUNDUP('qv MPS'[BatchCount],0) ,'qv MPS'[BatchCount])",
              "// Blending- Coating-Drying-Granulation-Manufacture-RollerCompactor",
              "",
              "return ",
              "",
              "'qv MPS'[TotalTimePerBatch(OEENEW)]* Vbatchcount",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTime(OEENew)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "'qv MPS'[TotalTimeWholeBatch(OEENew)]+'qv MPS'[CalSahmPM(h)]+'qv MPS'[CalSahmResting(h)]+'qv MPS'[CalSahmTraining(h)]+",
              "'qv MPS'[CalSahmSizePartCahange(h)]"
            ]
          },
          {
            "type": "calculated",
            "name": "WeightPerProduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vproduct  = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),",
              "FILTER('qv MPS', 'qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) &&  'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "&&  'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              "",
              "var vmachine = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),FILTER('qv MPS', 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])",
              "  && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])))",
              "",
              "return ",
              "",
              "DIVIDE(vproduct,vmachine)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CustomizeSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed]),FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] && ",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] = 'qv MPS'[RayvarzId] &&",
              " 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= 'qv MPS'[CalRelatedBudgetVersion]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "AvailibilityStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[Availibility]),filter('qv ProductMachineVisualIndexByBomVersion',",
              " 'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              " 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion] &&",
              " 'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv MPS'[RayvarzId]",
              "))/100"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "DownTimeStandardRunning",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "if('qv MPS'[AvailibilityStandard] <> BLANK() ,  1-'qv MPS'[AvailibilityStandard] ,'qv MPS'[AvailibilityStandard])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "NewAvailability",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(",
              "max('qv ProductMachineVisualIndexByBomVersion'[NewAvailability]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "",
              "))/100",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "DownTimeBudgetRunning",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "if('qv MPS'[NewAvailability] <> BLANK() , 1-'qv MPS'[NewAvailability] ,'qv MPS'[NewAvailability])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "Stop%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var minr ='qv MPS'[MinRevMonth]",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "var MonthRankStop = CALCULATE(max('qv StopReport'[MonthRank]), filter('qv StopReport','qv StopReport'[ShMon]=minr))",
              "",
              " var VActual =  CALCULATE(sum(ProductWeeklyVsActual[Duration]) , FILTER(ProductWeeklyVsActual,",
              "  ProductWeeklyVsActual[MachineID]='qv MPS'[MachineID] && ProductWeeklyVsActual[VersionTypeId]= 1 && ",
              "  ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>=MonthRankActual-12 ))*60",
              "--  &&   ProductWeeklyVsActual[PlanTypeId]=26))",
              "",
              "",
              " var VStop =  CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport',",
              "  'qv StopReport'[MachineID]='qv MPS'[MachineID] &&  'qv StopReport'[AcceptableType]=\"PlannedSTP\" &&   ",
              "  'qv StopReport'[MonthRank]< MonthRankStop && 'qv StopReport'[MonthRank]>= MonthRankStop-12 &&",
              " 'qv StopReport'[StoppageTypeId] in {19010103,19010110,19010042,19010118,19010108} ))",
              "",
              "",
              "",
              "return ",
              "DIVIDE(VStop,VActual)  -- Actual",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PlannedSTPProductBaseB/S",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vcip  = CALCULATE(sum('qv MPS'[CalCIPTimeWholeBatch(h)]),FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&",
              "'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])))",
              "",
              "var vtimes = CALCULATE(sum('qv MPS'[CalTimeSWholeBatch(h)]),FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&",
              "'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])))",
              "",
              "var vLUL = CALCULATE(sum('qv MPS'[CalLoadUnloadTimeWholeBatch(h)]),FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&",
              "'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])))",
              "",
              "var vtotaltime = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),FILTER('qv MPS','qv MPS'[RevId]=EARLIER('qv MPS'[RevId]) &&",
              "'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId])))",
              "",
              "return ",
              "DIVIDE((vcip+vtimes+vLUL),vtotaltime)",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PlannedSTPMachineBaseLoadingStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(",
              "max('qv ProductMachineVisualIndexByBomVersion'[PlannedStpMachineBaseLoadingStandard]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "",
              "))",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "Quality%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv MPS'[ProcessId] in {14,15,17,21,23} , 0.98 ,0.1)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PlannedSTPMachineBaseLoadingbusget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(",
              "max('qv ProductMachineVisualIndexByBomVersion'[PlannedSTPMachineBaseLoadingBudget]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv MPS'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]",
              "",
              "))",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "DownTimeBudgetLoading",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[DownTimeBudgetRunning]-('qv MPS'[DownTimeBudgetRunning]*'qv MPS'[PlannedSTPMachineBaseLoadingbusget])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "DownTimeStandardLoading",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[DownTimeStandardRunning]-('qv MPS'[DownTimeStandardRunning]*'qv MPS'[PlannedSTPMachineBaseLoadingStandard])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PlanedSTPLoadingBudget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[PlannedSTPProductBaseB/S]+'qv MPS'[PlannedSTPMachineBaseLoadingbusget]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PlannedSTPLoadingStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[PlannedSTPProductBaseB/S]+'qv MPS'[PlannedSTPMachineBaseLoadingStandard]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "StopLoadingBudget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[PlanedSTPLoadingBudget]+'qv MPS'[DownTimeBudgetLoading]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "StopLoadingStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[PlannedSTPLoadingStandard]+'qv MPS'[DownTimeStandardLoading]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "AvailabilityLoadingBudget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "1-'qv MPS'[StopLoadingBudget]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "AvailabilityLoadingStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "1-'qv MPS'[StopLoadingStandard]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "AvailabilityActualLastYear",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var minr ='qv MPS'[MinRevMonth]",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "",
              "var MonthRankStop = CALCULATE(max('qv StopReport'[MonthRank]), filter('qv StopReport','qv StopReport'[ShMon]=minr))",
              "",
              " var VActualDuration =  CALCULATE(sum(ProductWeeklyVsActual[Duration]) , FILTER(ProductWeeklyVsActual,",
              "  ProductWeeklyVsActual[MachineID]='qv MPS'[MachineID] && ProductWeeklyVsActual[VersionTypeId]= 1 && ",
              "  ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>=MonthRankActual-12 ))*60",
              "--  &&   ProductWeeklyVsActual[PlanTypeId]=26))",
              "",
              "",
              " var VStopDuration =  CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport',",
              "  'qv StopReport'[MachineID]='qv MPS'[MachineID] &&  'qv StopReport'[AcceptableType] in {\"PlannedSTP\",\"DownTime\"} &&   ",
              "  'qv StopReport'[MonthRank]< MonthRankStop && 'qv StopReport'[MonthRank]>= MonthRankStop-12  ))",
              "",
              "",
              "",
              "return ",
              "DIVIDE( (VActualDuration-VStopDuration) , VActualDuration)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "ActualperformanceLastYear",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var minr ='qv MPS'[MinRevMonth]",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "",
              "",
              "var tblLoad = SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ",
              " ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>= MonthRankActual-12  ",
              "&& ProductWeeklyVsActual[MachineID]='qv MPS'[MachineId]),",
              "",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[FinishDate],--'ProductWeeklyVsActual'[ProcessID],  ---,ProductWeeklyVsActual[BatchNo],",
              "\"unit\",sum(ProductWeeklyVsActual[Unit]),",
              "\"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"StopDuration\",sum(ProductWeeklyVsActual[StopDuration]),",
              "\"actualspeede\",max(ProductWeeklyVsActual[AVGSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed-unit/min])",
              ",\"Running\",(sum(ProductWeeklyVsActual[Duration])*60)-sum(ProductWeeklyVsActual[StopDuration]),",
              "\"Run*CustomizeSpeed\",((sum(ProductWeeklyVsActual[Duration])*60)-sum(ProductWeeklyVsActual[StopDuration]))*max(ProductWeeklyVsActual[CustomizeSpeed-unit/min]))",
              "",
              "",
              "return",
              "",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 1 , ",
              "  DIVIDE(SUMX(tblLoad,[unit]),SUMX(tblLoad,[Run*CustomizeSpeed]))",
              "  )",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "ActualPerformanceLastYearprocess",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var minr ='qv MPS'[MinRevMonth]",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "",
              "",
              "var tblLoad = SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ",
              " ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>= MonthRankActual-12  ",
              "&& ProductWeeklyVsActual[ProcessID]='qv MPS'[ProcessID]),",
              "",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[MachineID],ProductWeeklyVsActual[FinishDate],--'ProductWeeklyVsActual'[ProcessID],  ---,ProductWeeklyVsActual[BatchNo],",
              "\"unit\",sum(ProductWeeklyVsActual[Unit]),",
              "\"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"StopDuration\",sum(ProductWeeklyVsActual[StopDuration]),",
              "\"actualspeede\",max(ProductWeeklyVsActual[AVGSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed-unit/min])",
              ",\"Running\",(sum(ProductWeeklyVsActual[Duration])*60)-sum(ProductWeeklyVsActual[StopDuration]),",
              "\"Run*CustomizeSpeed\",((sum(ProductWeeklyVsActual[Duration])*60)-sum(ProductWeeklyVsActual[StopDuration]))*max(ProductWeeklyVsActual[CustomizeSpeed-unit/min]))",
              "",
              "",
              "return",
              "",
              "if(  SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 1 ,  ",
              "     DIVIDE(SUMX(tblLoad,[unit]),SUMX(tblLoad,[Run*CustomizeSpeed]))",
              "  )",
              ""
            ],
            "formatString": "#,0.00%;-#,0.00%;#,0.00%"
          },
          {
            "type": "calculated",
            "name": "ActualOEEMachine",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[Quality%]*'qv MPS'[AvailabilityActualLastYear]*'qv MPS'[ActualperformanceLastYear]",
            "formatString": "#,0.00%;-#,0.00%;#,0.00%"
          },
          {
            "type": "calculated",
            "name": "OEETargetMachine",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv MPS'[ActualOEEMachine]+0.04",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "IsActual",
            "dataType": "boolean",
            "sourceColumn": "IsActual"
          },
          {
            "type": "calculated",
            "name": "Site",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],'qv MPS'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[ShMonth],FIXED('qv MPS'[Month],0,1))"
          },
          {
            "type": "calculated",
            "name": "TimePerMachine",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var vtotaltime = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) ",
              "&& 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])) )",
              "",
              "--var vbatch =  CALCULATE(sum('qv MPS'[BatchCount]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) ",
              "--&& 'qv MPS'[MachineId]=EARLIER('qv MPS'[MachineId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])) )",
              "",
              "return ",
              "",
              "DIVIDE(vtotaltime ,",
              "",
              "",
              " CALCULATE(sum('qv MPS'[BatchCount]),FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) ",
              "&& 'qv MPS'[ProcessId]=EARLIER('qv MPS'[ProcessId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])) )",
              ")",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "TimePerBox(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vtbl= SUMMARIZE( FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])),",
              " 'qv MPS'[MachineId],'qv MPS'[TimePerMachine])",
              "",
              "",
              "return ",
              "",
              "DIVIDE(SUMX(vtbl,'qv MPS'[TimePerMachine]),CALCULATE(max('qv MPS'[BatchSize]),",
              "FILTER('qv MPS','qv MPS'[RayvarzId]=EARLIER('qv MPS'[RayvarzId]) && 'qv MPS'[RevId]=EARLIER('qv MPS'[RevId])) ))",
              "",
              ""
            ],
            "formatString": "0.00000"
          },
          {
            "name": "IsActiveBudget",
            "dataType": "boolean",
            "sourceColumn": "IsActiveBudget"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_MPS = Source{[Schema=\"qv\",Item=\"MPS\"]}[Data],",
                "    #\"Changed Type\" = Table.TransformColumnTypes(qv_MPS,{{\"Month\", Int64.Type}}),",
                "    #\"Filtered Rows\" = Table.SelectRows(#\"Changed Type\", each [Month] >= 9901),",
                "    #\"Filtered Rows1\" = Table.SelectRows(#\"Filtered Rows\", each [MachineId] <> 0),",
                "    #\"Filtered Rows2\" = Table.SelectRows(#\"Filtered Rows1\", each ([BatchCount] <> 0)),",
                "    #\"Added Custom\" = Table.AddColumn(#\"Filtered Rows2\", \"Custom\", each Number.ToText([RayvarzId])& Number.ToText([ProcessId])),",
                "    #\"Filtered Rows3\" = Table.SelectRows(#\"Added Custom\", each ([Custom] <> \"700003438\") and ([RevName] <> \"2024 Production\"))",
                "in",
                "    #\"Filtered Rows3\""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "LastUpadateTime",
            "expression": "TODAY()"
          },
          {
            "name": "TimeUtilzationSelectionGuage",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE ( TimeTypeSlicer[TimeType], \"TimeType\" )",
              "",
              "return ",
              "",
              "CALCULATE([TimeUtilzationSelectionTable],",
              "                  'qv MPS'[MachineId] <> 388       //sf170-4 , hutlin ,manesty,afzardeghat",
              "                    && 'qv MPS'[MachineId] <> 44",
              "                    && 'qv MPS'[MachineId] <> 40",
              "                    && 'qv MPS'[MachineId] <> 51",
              "                )",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "TimeUtilzationSelectionTable",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE ( TimeTypeSlicer[TimeType], \"TimeType\" )",
              "var x = SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[WholeTimePerMachinePerMonth(h)],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"sumcycle\", SUM ('qv MPS'[TotalTimeWholeBatch(h)]),",
              "                        \"subtract\",",
              "                              ( 'qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] -",
              "                             'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth])",
              "                       )",
              "",
              "",
              "",
              "RETURN",
              "    SWITCH (",
              "        TRUE (),",
              "        TimeTypeSelection = \"Loading\",",
              "     ",
              "               DIVIDE(SUMX (x,'qv MPS'[WholeTimePerMachinePerMonth(h)]) , SUMX (x,'qv MPS'[TotalCapacityMachinePerMonth(h)])) ,",
              "           ",
              "        TimeTypeSelection = \"Running\",",
              "         ",
              "               DIVIDE(SUMX (x,[sumcycle]) , SUMX (x,[subtract]) ),",
              "        BLANK ()",
              "          )",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "TopAllocationSelection",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              " var x = SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[BoxAlcPerMachinePerMonth],",
              "                        'qv MPS'[UnitAlcPerMachinePerMonth],",
              "                        'qv MPS'[KiloAlcPerMachinePerMonth],",
              "                        'qv MPS'[BatchAlcPerMachinePerMonth]",
              "",
              "                    )",
              "",
              "RETURN",
              "    SWITCH (",
              "        TRUE (),",
              "        TimeTypeSelection = \"Box\", SUMX (x,'qv MPS'[BoxAlcPerMachinePerMonth])  ,              ",
              "",
              "        TimeTypeSelection = \"Unit\", SUMX (x,'qv MPS'[UnitAlcPerMachinePerMonth]),",
              "            ",
              "        TimeTypeSelection = \"kilo\", SUMX (x,'qv MPS'[KiloAlcPerMachinePerMonth]),",
              "",
              "        TimeTypeSelection = \"Batch\", SUMX (x, 'qv MPS'[BatchAlcPerMachinePerMonth]),    ",
              "        ",
              "        TimeTypeSelection = \"Time\", [TimeAllocation] ,",
              "     ",
              "        BLANK ()",
              "     )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "TimeAllocation",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE ( TimeTypeSlicer[TimeType], \"TimeType\" )",
              "VAR UnitType = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "return ",
              "",
              "    SWITCH (",
              "        TRUE (),",
              "        TimeTypeSelection = \"Loading\",",
              "            CALCULATE (",
              "                SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[WholeTimePerMachinePerMonth(h)],",
              "                        'qv MPS'[MachineMonthCal]",
              "                    ),",
              "                   'qv MPS'[MachineMonthCal]                   // 'qv MPS'[WholeTimePerMachinePerMonth(h)]",
              "                )",
              "            ),",
              "        TimeTypeSelection = \"Running\",",
              "            CALCULATE (",
              "                SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[Month],",
              "                        \"sumcycle\", SUM ( 'qv MPS'[WholeBatchCal] )            // SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "                    ),",
              "                    [sumcycle]",
              "                )",
              "            ),",
              "        BLANK ()",
              "    )",
              "",
              "",
              "/*",
              "var c = ",
              "    SWITCH (",
              "        TRUE (),",
              "         UnitType = \"Box\", SUM('CalculatedTable 4'[BoxAlcPerMachinePerMonth])  ,              ",
              "",
              "         UnitType = \"Unit\", SUM('CalculatedTable 4'[UnitAlcPerMachinePerMonth]),",
              "            ",
              "         UnitType = \"kilo\", SUM('CalculatedTable 4'[KiloAlcPerMachinePerMonth]),",
              "",
              "         UnitType = \"Batch\", SUM('CalculatedTable 4'[BatchAlcPerMachinePerMonth]),    ",
              "         ",
              "         UnitType = \"Time\", ",
              "   SWITCH (",
              "        TRUE (),",
              "",
              "         TimeTypeSelection = \"Loading\",sum('CalculatedTable 4'[WholeTimePerMachinePerMonth(h)]) ,",
              "         TimeTypeSelection = \"Running\", SUM('CalculatedTable 4'[SumCycle]) ,",
              "",
              "        BLANK ()",
              "    )",
              " ,",
              "     ",
              "        BLANK ()",
              "     )",
              "",
              "",
              "RETURN",
              "c",
              "*/",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "name": "TimeCapacity",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE ( TimeTypeSlicer[TimeType], \"TimeType\" )",
              "",
              "var x = SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"subtract\",",
              "                            ( 'qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] -'qv MPS'[StandardRestingPerMachinePerMonth] ",
              "                           - 'qv MPS'[StandardSPCPerMachinePerMonth] -   'qv MPS'[StandardPMPerMachinePerMonth] )",
              "",
              "                     )",
              " ",
              "",
              "RETURN",
              "    SWITCH (",
              "        TRUE (),",
              "        TimeTypeSelection = \"Loading\",",
              "            CALCULATE (",
              "                SUMX (x,'qv MPS'[TotalCapacityMachinePerMonth(h)])",
              "            ),",
              "        TimeTypeSelection = \"Running\",",
              "            CALCULATE (",
              "                SUMX (x,[subtract])",
              "            ),",
              "        BLANK ()",
              "    )",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "name": "TopFreeCapacitySelection",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "var processid =SELECTEDVALUE('qv MPS'[ProcessId])",
              "/*",
              "RETURN",
              "    SWITCH (",
              "        TRUE (),",
              "//---------------------------------------------------Counter/Blister/Syrupfilling/Press/CapFilling--------------",
              "          TimeTypeSelection = \"Box\" && processid in {14,15,17,21,23} ,",
              "           [BoxFreeCap1415172123],",
              "",
              "        TimeTypeSelection = \"Unit\" && processid in {14,15,17,21,23} ,",
              "           [UnitFreeCap1415172123], ",
              "",
              "        TimeTypeSelection = \"kilo\" && processid in {14,15,17,21,23} ,",
              "            [KiloFreeCap1415142123] ,",
              "",
              "        TimeTypeSelection = \"Batch\"  && processid in {14,15,17,21,23} ,",
              "            [BatchFreeCap1415172123] ,",
              "//---------------------------------------------------------Granulation/Drying/Coating--------------------------",
              "       TimeTypeSelection = \"Box\" && processid in {10,11,16} ,",
              "           [BoxFreeCap101116],",
              "",
              "        TimeTypeSelection = \"Unit\" && processid in {10,11,16} ,",
              "           [UnitFreeCap101161], ",
              "",
              "        TimeTypeSelection = \"kilo\" && processid in {10,11,16} ,",
              "           [KiloFreeCap101116] ,",
              "",
              "        TimeTypeSelection = \"Batch\" && processid in {10,11,16} ,",
              "            [BatchFreeCap101116] ,",
              "//-----------------------------------------------------------------Roller Compactor----------------------------",
              "        TimeTypeSelection = \"Box\" && processid in {38} ,",
              "           [BoxFreeCap38],",
              "",
              "        TimeTypeSelection = \"Unit\" && processid  in {38}  ,",
              "           [UnitFreeCap38], ",
              "",
              "        TimeTypeSelection = \"kilo\" && processid in {38}  ,",
              "           [KiloFreeCap38] ,",
              "",
              "        TimeTypeSelection = \"Batch\" && processid in {38}  ,",
              "            [BatchFreeCap38] ,",
              "//--------------------------------------------------------------------------Blending-------------------",
              "",
              "       TimeTypeSelection = \"Box\" && processid in {13} ,",
              "            [BoxFreeCap13],",
              "",
              "         TimeTypeSelection = \"Unit\" && processid in {13}  ,",
              "            [UnitFreeCap13], ",
              "",
              "        TimeTypeSelection = \"kilo\" && processid in {13}  ,",
              "           [KiloFreeCap13] ,",
              "",
              "        TimeTypeSelection = \"Batch\" && processid in {13}  ,",
              "           [BatchFreeCap13] ,",
              "",
              "//----------------------------------------------------------------------Time---------------------------",
              "       TimeTypeSelection = \"Time\" , ",
              "            [TimeCapacity] - [TimeAllocation],",
              "     ",
              "       BLANK ()",
              "    )",
              "*/",
              "",
              "",
              " RETURN",
              "     SWITCH (",
              "         TRUE (),",
              "",
              "           TimeTypeSelection = \"Box\" ,",
              "            [BoxFreeCap1415172123],",
              " ",
              "         TimeTypeSelection = \"Unit\"  ,",
              "            [UnitFreeCap1415172123], ",
              "",
              "         TimeTypeSelection = \"kilo\"  ,",
              "             [KiloFreeCap1415142123] ,",
              "",
              "         TimeTypeSelection = \"Batch\"   ,",
              "             [BatchFreeCap1415172123] ,",
              " ",
              "         TimeTypeSelection = \"Time\" , ",
              "            [TimeCapacity] - [TimeAllocation],",
              "     ",
              "       BLANK ()",
              "    )"
            ],
            "formatString": "#,0"
          },
          {
            "name": "TopUtilizationSelection",
            "expression": [
              "",
              "",
              "DIVIDE([TopAllocationSelection],[TotalCapacity])",
              "",
              "",
              ""
            ],
            "formatString": "0%;-0%;0%"
          },
          {
            "name": "TopUtilzationSelectionGuage",
            "expression": [
              "",
              "VAR TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "RETURN",
              "",
              "    SWITCH (",
              "        TRUE (),",
              "       ",
              "       TimeTypeSelection = \"Time\", ",
              "         ROUND([TimeUtilzationSelectionGuage],2) ,",
              "      ",
              "",
              "    ROUND(CALCULATE(sumx(SUMMARIZE('qv MPS','qv MPS'[ProcessId],'qv MPS'[RevId],'qv MPS'[MachineId],\"Allocation\",[TopAllocationSelection]),[TopAllocationSelection])/",
              "                sumx(SUMMARIZE('qv MPS','qv MPS'[ProcessId],'qv MPS'[RevId],'qv MPS'[MachineId],\"TotalCap\",[TotalCapacity]),[TotalCapacity])",
              "",
              "                    , 'qv MPS'[MachineId] <> 388    //sf170-4 , hutlin ,manesty,afzardeghat",
              "                    && 'qv MPS'[MachineId] <> 44",
              "                    && 'qv MPS'[MachineId] <> 40",
              "                    && 'qv MPS'[MachineId] <> 51",
              "",
              "               ) ,2)",
              "",
              "      ",
              "           )",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TotalCapacity",
            "expression": "[TopFreeCapacitySelection]+[TopAllocationSelection]",
            "formatString": "#,0"
          },
          {
            "name": "BoxFreeCap1415172123",
            "expression": [
              "",
              " //Press-capfilling-Blister-Counter-Syrupfilling",
              "/*",
              "var ProcessId= SELECTEDVALUE('qv MPS'[ProcessId])",
              "",
              "var VRunningAllocation = CALCULATE (",
              "                      SUMX (",
              "                          SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        \"sumcycle\", SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "                    ),",
              "                    [sumcycle]",
              "                )",
              "            )",
              "",
              "var VRunningCapacity =   CALCULATE (",
              "                 SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"subtract\",",
              "                         ('qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] - 'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]) ",
              "                    ),",
              "                    [subtract]",
              "                )",
              "            )",
              "",
              "",
              "Var freeTime = (VRunningCapacity-VRunningAllocation)*60",
              "",
              "",
              " RETURN",
              "",
              "if(ProcessId=14 || ProcessId=15 || ProcessId=17 , // press-capfilling-blister",
              "",
              " DIVIDE(freeTime * max('qv MPS'[SpeedWeightedAvg]) , max('qv MPS'[NoInBoxweightedAvg]))",
              " ,",
              "  freeTime * max('qv MPS'[SpeedWeightedAvg])     // Counter-SyrupFilling",
              " )",
              "*/",
              "",
              "",
              "",
              "Var BoxFreeCap = sum('qv MPS'[CapFreeBox])",
              "",
              "",
              "",
              "/*",
              "",
              "SUMX(SUMMARIZE (",
              "                         'qv MPS',",
              "                         'qv MPS'[MachineId],",
              "                         'qv MPS'[Month],",
              "                         'qv MPS'[RevName],",
              "                         'qv MPS'[RayvarzId],",
              "                         'qv MPS'[BatchSize],",
              "                         'qv MPS'[BatchUnit],",
              "                         'qv MPS'[BatchKilo],",
              "                         'qv MPS'[CapFreeBox]",
              "                    ), 'qv MPS'[CapFreeBox])",
              " ",
              "*/",
              " return BoxFreeCap"
            ],
            "formatString": "0"
          },
          {
            "name": "UnitFreeCap1415172123",
            "expression": [
              "",
              "// Counter-blister-syrupfilling-press-capfilling",
              "",
              "// [BoxFreeCap1415172123] * max('qv MPS'[NoInBoxweightedAvg])",
              "",
              "",
              "",
              "",
              " Var UnitFreeCap =SUMX(SUMMARIZE (",
              "                         'qv MPS',",
              "                         'qv MPS'[MachineId],",
              "                         'qv MPS'[Month],",
              "                         'qv MPS'[RevName],",
              "                         'qv MPS'[RayvarzId],",
              "                         'qv MPS'[BatchSize],",
              "                         'qv MPS'[BatchUnit],",
              "                         'qv MPS'[BatchKilo],",
              "                         'qv MPS'[CapFreeUnit]",
              "",
              "                         ",
              "                    ), [CapFreeUnit])",
              " ",
              "",
              " //return UnitFreeCap  ",
              "",
              "return sum([CapFreeUnit])",
              "",
              "",
              "",
              "",
              "",
              " ",
              "",
              " ",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "KiloFreeCap1415142123",
            "expression": [
              "",
              "//Press-capfilling-Blister-Counter-Syrupfilling",
              "",
              "//  [UnitFreeCap1415172123] * (max('qv MPS'[UnitWeightWieghtedAvg])/1000000)",
              "",
              "",
              "",
              "Var KiloFreeCap =SUMX(SUMMARIZE (",
              "                         'qv MPS',",
              "                         'qv MPS'[MachineId],",
              "                         'qv MPS'[Month],",
              "                         'qv MPS'[RevName],",
              "                         'qv MPS'[RayvarzId],",
              "                         'qv MPS'[BatchSize],",
              "                         'qv MPS'[BatchUnit],",
              "                         'qv MPS'[BatchKilo],",
              "                         'qv MPS'[CapFreeKilo]",
              "",
              "                         ",
              "                    ), [CapFreeKilo])",
              " ",
              "",
              "// return KiloFreeCap  ",
              "",
              "",
              " return  sum([CapFreeKilo]) ",
              "",
              " ",
              "",
              " ",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "BatchFreeCap1415172123",
            "expression": [
              "",
              "//Press-capfilling-Blister-Counter-Syrupfilling",
              "// DIVIDE( [KiloFreeCap1415142123] , max('qv MPS'[BatchKiloWeightedAvg]))   --Before Formula",
              "",
              "",
              "",
              "Var BatchFreeCap =SUMX(SUMMARIZE (",
              "                         'qv MPS',",
              "                         'qv MPS'[MachineId],",
              "                         'qv MPS'[Month],",
              "                         'qv MPS'[RevName],",
              "                         'qv MPS'[RayvarzId],",
              "                         'qv MPS'[BatchSize],",
              "                         'qv MPS'[BatchUnit],",
              "                         'qv MPS'[BatchKilo],",
              "                         'qv MPS'[Coefficient],",
              "                         'qv MPS'[CapFreeBatch]",
              "",
              "                    ),'qv MPS'[CapFreeBatch] ) // [BatchFreeCap])",
              " ",
              "",
              "//return BatchFreeCap",
              "",
              "",
              "return sum('qv MPS'[CapFreeBatch])",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "BatchFreeCap101116",
            "expression": [
              "",
              "// granulation-drying-coating",
              "var VRunningAllocation = CALCULATE (",
              "                      SUMX (",
              "                          SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        \"sumcycle\", SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "                    ),",
              "                    [sumcycle]",
              "                )",
              "            )",
              "",
              "var VRunningCapacity =   CALCULATE (",
              "                 SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"subtract\",",
              "                         ('qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] ",
              "                           - 'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]) ",
              "                    ),",
              "                    [subtract]",
              "                )",
              "            )",
              "",
              "",
              "Var freeTime = (VRunningCapacity-VRunningAllocation)*60",
              "return ",
              "DIVIDE(DIVIDE(freeTime,max('qv MPS'[SpeedWeightedAvg])),max('qv MPS'[WeightedAvgNoSubBatch]))"
            ]
          },
          {
            "name": "BoxFreeCap101116",
            "expression": [
              "",
              "// granulation-drying-coating",
              "  DIVIDE([KiloFreeCap101116] , max('qv MPS'[NoInBoxweightedAvg]) )"
            ]
          },
          {
            "name": "UnitFreeCap101161",
            "expression": [
              "",
              "// granulation-drying-coating",
              "",
              "DIVIDE([KiloFreeCap1415142123],max('qv MPS'[UnitWeightWieghtedAvg]))",
              ""
            ]
          },
          {
            "name": "KiloFreeCap101116",
            "expression": [
              " ",
              "// granulation-drying-coating",
              "  ",
              " [BatchFreeCap101116] * max('qv MPS'[BatchKiloWeightedAvg])"
            ]
          },
          {
            "name": "BoxFreeCap38",
            "expression": [
              " ",
              "//Roller Compactor",
              " DIVIDE([UnitFreeCap38],max('qv MPS'[NoInBoxweightedAvg]),0)",
              ""
            ]
          },
          {
            "name": "UnitFreeCap38",
            "expression": [
              " ",
              "//Roller Compactor",
              "DIVIDE([KiloFreeCap38],max('qv MPS'[UnitWeightWieghtedAvg]),0)"
            ]
          },
          {
            "name": "KiloFreeCap38",
            "expression": [
              " ",
              "//Roller Compactor",
              "var VRunningAllocation = CALCULATE (",
              "                      SUMX (",
              "                          SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        \"sumcycle\", SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "                    ),",
              "                    [sumcycle]",
              "                )",
              "            )",
              "",
              "var VRunningCapacity =   CALCULATE (",
              "                 SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"subtract\",",
              "                         ('qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] -",
              "                            'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]) ",
              "                    ),",
              "                    [subtract]",
              "                )",
              "            )",
              "",
              "",
              "Var freeTime = (VRunningCapacity-VRunningAllocation)*60",
              "",
              "return ",
              "",
              "DIVIDE(freeTime,max('qv MPS'[SpeedWeightedAvg]),0)"
            ]
          },
          {
            "name": "BatchFreeCap38",
            "expression": [
              " ",
              "//Roller Compactor",
              " DIVIDE([KiloFreeCap38],max('qv MPS'[BatchKiloWeightedAvg]),0)"
            ],
            "formatString": "0.00"
          },
          {
            "name": "BoxFreeCap13",
            "expression": [
              " ",
              "//Blending",
              "DIVIDE([UnitFreeCap13],max('qv MPS'[NoInBoxweightedAvg]))"
            ]
          },
          {
            "name": "UnitFreeCap13",
            "expression": [
              " ",
              "//Blending",
              "DIVIDE([KiloFreeCap13],max('qv MPS'[UnitWeightWieghtedAvg]))"
            ]
          },
          {
            "name": "KiloFreeCap13",
            "expression": [
              " ",
              "//Blending",
              "[BatchFreeCap13]*max('qv MPS'[BatchKiloWeightedAvg])"
            ],
            "formatString": "0.00"
          },
          {
            "name": "BatchFreeCap13",
            "expression": [
              " ",
              "//Blending",
              "",
              "var VRunningAllocation = CALCULATE (",
              "                      SUMX (",
              "                          SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        \"sumcycle\", SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
              "                    ),",
              "                    [sumcycle]",
              "                )",
              "            )",
              "",
              "var VRunningCapacity =   CALCULATE (",
              "                 SUMX (",
              "                    SUMMARIZE (",
              "                        'qv MPS',",
              "                        'qv MPS'[MachineId],",
              "                        'qv MPS'[Month],",
              "                        'qv MPS'[RevName],",
              "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
              "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
              "                        'qv MPS'[StandardPMPerMachinePerMonth],",
              "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
              "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
              "                        \"subtract\",",
              "                         ('qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] - ",
              "                           'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]) ",
              "                    ),",
              "                    [subtract]",
              "                )",
              "            )",
              "",
              "",
              "Var freeTime = (VRunningCapacity-VRunningAllocation)*60",
              "",
              "return ",
              "",
              "DIVIDE(freeTime,max('qv MPS'[SpeedWeightedAvg]))"
            ]
          },
          {
            "name": "ShowTooltip1",
            "expression": " \"Total\""
          },
          {
            "name": "Performance%",
            "expression": [
              "",
              "",
              "var tblLoad = ADDCOLUMNS(SUMMARIZE('qv MPS','qv MPS'[RayvarzId],'qv MPS'[MachineId],'qv MPS'[RevId],",
              "\"weight\" , max ('qv MPS'[WeightPerProduct]) ,",
              "\"standardspeed\",max('qv MPS'[StandardSpeed]),",
              "\"customizespeed\",max('qv MPS'[CustomizeSpeed])),",
              "\"weight*standard\",([weight]*[standardspeed]),",
              "\"weight*customize\",([weight]*[customizespeed]))",
              "",
              "return",
              " ",
              "  DIVIDE(SUMX(tblLoad,[weight*standard]),SUMX(tblLoad,[weight*customize]))",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEELoadingStandard",
            "expression": "AVERAGE('qv MPS'[AvailabilityLoadingStandard])*max('qv MPS'[Quality%])*[Performance%]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEELoadingBudget",
            "expression": " AVERAGE('qv MPS'[AvailabilityLoadingBudget])*max('qv MPS'[Quality%])*[Performance%]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEERuningStandard",
            "expression": "average('qv MPS'[AvailibilityStandard])*max('qv MPS'[Quality%])*[Performance%]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEERuningBudget",
            "expression": [
              "AVERAGE('qv MPS'[NewAvailability])*max('qv MPS'[Quality%])*[Performance%]",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "PerformanceProcess",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"performance\",[performance%])",
              "return",
              " ",
              " AVERAGEX(tblLoad,[performance])",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "AvailabilityLoadingBudgetProces",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"avloading\",max([AvailabilityLoadingBudget]))",
              "",
              "return",
              "",
              "   AVERAGEX(tblLoad,[avloading])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEELoadingBudgetprocess",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"oeeloading\",[OEELoadingBudget])",
              "",
              "return",
              "",
              "   AVERAGEX(tblLoad,[oeeloading])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEERuningBudgetprocess",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"oeeRuning\",[OEERuningBudget])",
              "",
              "return",
              "",
              " AVERAGEX(tblLoad,[oeeRuning])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEEStandardRuningProcess",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"oeeruning\",[OEERuningStandard])",
              "",
              "return",
              "",
              "   AVERAGEX(tblLoad,[oeeruning])",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "AAAAA",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"oeeruning\",[OEERuningStandard])",
              "",
              "return",
              "",
              "   AVERAGEX(tblLoad,[oeeruning])",
              ""
            ]
          },
          {
            "name": "OEEStandardLoadingProcess",
            "expression": [
              "",
              "",
              "var tblLoad = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[RevId],\"oeeLoading\",[OEELoadingStandard])",
              "",
              "return",
              "",
              "   AVERAGEX(tblLoad,[oeeLoading])",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "ActualAvailabilityProcess",
            "expression": [
              "",
              "var minr =max('qv MPS'[MinRevMonth])",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "",
              "var MonthRankStop = CALCULATE(max('qv StopReport'[MonthRank]), filter('qv StopReport','qv StopReport'[ShMon]=minr))",
              "",
              " var VActualDuration =  CALCULATE(sum(ProductWeeklyVsActual[Duration]) , FILTER(ProductWeeklyVsActual,",
              " ProductWeeklyVsActual[ProcessId]= SELECTEDVALUE('qv MPS'[ProcessId]) ",
              " && ProductWeeklyVsActual[VersionTypeId]= 1 && ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>=MonthRankActual-12 ))*60",
              "--  &&   ProductWeeklyVsActual[PlanTypeId]=26))",
              "",
              "",
              " var VStopDuration =  CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport',",
              " 'qv StopReport'[ProcessId]= SELECTEDVALUE('qv MPS'[ProcessId])&&",
              " 'qv StopReport'[AcceptableType] in {\"PlannedSTP\",\"DownTime\"} &&  'qv StopReport'[MonthRank]< MonthRankStop && 'qv StopReport'[MonthRank]>= MonthRankStop-12  ))",
              "",
              "",
              "",
              "return ",
              "DIVIDE( (VActualDuration-VStopDuration) , VActualDuration)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "testPerformance",
            "expression": [
              "",
              "var minr =max('qv MPS'[MinRevMonth])",
              "",
              "var MonthRankActual = CALCULATE(max(ProductWeeklyVsActual[MonthRank]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon]=minr))",
              "",
              "",
              "var tblLoad = ADDCOLUMNS(SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ",
              " ProductWeeklyVsActual[MonthRank]< MonthRankActual  &&  ProductWeeklyVsActual[MonthRank]>= MonthRankActual-12  ",
              "&& ProductWeeklyVsActual[MachineID]=SELECTEDVALUE('qv MPS'[MachineId])),",
              "",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[FinishDate],ProductWeeklyVsActual[BatchNo],",
              "\"unit\",sum(ProductWeeklyVsActual[Unit]),",
              "\"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"StopDuration\",sum(ProductWeeklyVsActual[StopDuration]),",
              "\"actualspeede\",max(ProductWeeklyVsActual[AVGSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed-unit/min]))",
              ",\"Running\",[Loading]-[StopDuration],\"Run*CustomizeSpeed\",([Loading]-[StopDuration])*[customizespeede])",
              "",
              "return",
              "",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 1 , ",
              "  DIVIDE(SUMX(tblLoad,[unit]),SUMX(tblLoad,[Run*CustomizeSpeed]))",
              "  )",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEEActual",
            "expression": "max('qv MPS'[ActualPerformanceLastYearprocess])*max('qv MPS'[Quality%])*[ActualAvailabilityProcess]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEETarget",
            "expression": "[OEEActual]+0.04",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "MonthlyWeightProduct",
            "expression": [
              "",
              "",
              "var vminmonth= values('qv MPS'[month])",
              "",
              "--CALCULATE(min('qv MPS'[Month]),FILTER(all('qv MPS'),'qv MPS'[RevId]=SELECTEDVALUE('qv MPS'[RevId]) && 'qv MPS'[month]=SELECTEDVALUE('qv MPS'[month])))",
              "",
              "--var vmaxmonth= CALCULATE(max('qv MPS'[Month]),FILTER(all('qv MPS'),'qv MPS'[RevId]=SELECTEDVALUE('qv MPS'[RevId]) && 'qv MPS'[month]=SELECTEDVALUE('qv MPS'[month])))",
              "",
              "",
              "var vtblproduct = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),FILTER('qv MPS','qv MPS'[RevId]=SELECTEDVALUE('qv MPS'[RevId]) &&",
              "                       'qv MPS'[MachineId]=SELECTEDVALUE('qv MPS'[MachineId]) && 'qv MPS'[RayvarzId]=SELECTEDVALUE('qv MPS'[RayvarzId]) &&",
              "                       'qv MPS'[Month]in vminmonth   ))      --  'qv MPS'[Month]  >= vminmonth  && 'qv MPS'[Month]  <= vmaxmonth",
              "",
              "var vtblmachine = CALCULATE(sum('qv MPS'[TotalTimeWholeBatch(OEENew)]),FILTER(all('qv MPS'),'qv MPS'[RevId]=SELECTEDVALUE('qv MPS'[RevId]) &&",
              "                      'qv MPS'[MachineId]=SELECTEDVALUE('qv MPS'[MachineId]) &&   'qv MPS'[Month]in vminmonth ))                      ",
              "",
              "",
              "return ",
              "DIVIDE(vtblproduct,vtblmachine)"
            ]
          },
          {
            "name": "PerformanceMonthly%",
            "expression": [
              "",
              "",
              "var tblLoad = ADDCOLUMNS(SUMMARIZE('qv MPS','qv MPS'[RayvarzId],'qv MPS'[MachineId],'qv MPS'[RevId],'qv MPS'[month],",
              "\"weight\" , [MonthlyWeightProduct]  ,",
              "\"standardspeed\",max('qv MPS'[StandardSpeed]),",
              "\"customizespeed\",max('qv MPS'[CustomizeSpeed])),",
              "\"weight*standard\",([weight]*[standardspeed]),",
              "\"weight*customize\",([weight]*[customizespeed]))",
              "",
              "return",
              " ",
              "  DIVIDE(SUMX(tblLoad,[weight*standard]),SUMX(tblLoad,[weight*customize]))"
            ]
          }
        ]
      },
      {
        "name": "qv VersionBudget",
        "columns": [
          {
            "name": "VersionBudgetId",
            "dataType": "int64",
            "sourceColumn": "VersionBudgetId"
          },
          {
            "name": "DescBudget",
            "dataType": "string",
            "sourceColumn": "DescBudget"
          },
          {
            "name": "RevisionId",
            "dataType": "int64",
            "sourceColumn": "RevisionId"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_VersionBudget = Source{[Schema=\"qv\",Item=\"VersionBudget\"]}[Data]",
                "in",
                "    qv_VersionBudget"
              ]
            }
          }
        ]
      },
      {
        "name": "Dimqv ProductExcel",
        "columns": [
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "RayvarzId",
            "dataType": "string",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "ProductFaAbr",
            "dataType": "string",
            "sourceColumn": "ProductFaAbr"
          },
          {
            "name": "ProductEnAbr",
            "dataType": "string",
            "sourceColumn": "ProductEnAbr"
          },
          {
            "name": "PGeneralCode",
            "dataType": "string",
            "sourceColumn": "PGeneralCode"
          },
          {
            "name": "PGeneralName",
            "dataType": "string",
            "sourceColumn": "PGeneralName"
          },
          {
            "name": "PGeneralNameFa",
            "dataType": "string",
            "sourceColumn": "PGeneralNameFa"
          },
          {
            "name": "ProductCode",
            "dataType": "string",
            "sourceColumn": "ProductCode"
          },
          {
            "name": "ProductGTIN",
            "dataType": "string",
            "sourceColumn": "ProductGTIN"
          },
          {
            "name": "ItemTypeId",
            "dataType": "int64",
            "sourceColumn": "ItemTypeId"
          },
          {
            "name": "IsActive",
            "dataType": "boolean",
            "sourceColumn": "IsActive"
          },
          {
            "name": "PGeneralAbr",
            "dataType": "string",
            "sourceColumn": "PGeneralAbr"
          },
          {
            "name": "PGeneralFaAbr",
            "dataType": "string",
            "sourceColumn": "PGeneralFaAbr"
          },
          {
            "name": "GroupId",
            "dataType": "int64",
            "sourceColumn": "GroupId"
          },
          {
            "name": "GroupIdDesc",
            "dataType": "string",
            "sourceColumn": "GroupIdDesc"
          },
          {
            "name": "FranchiseId",
            "dataType": "int64",
            "sourceColumn": "FranchiseId"
          },
          {
            "name": "FranchiseIdDesc",
            "dataType": "string",
            "sourceColumn": "FranchiseIdDesc"
          },
          {
            "name": "PackingTypeId",
            "dataType": "int64",
            "sourceColumn": "PackingTypeId"
          },
          {
            "name": "PackingTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "PackingTypeIdDesc"
          },
          {
            "name": "CategoryId",
            "dataType": "int64",
            "sourceColumn": "CategoryId"
          },
          {
            "name": "CategoryIdDesc",
            "dataType": "string",
            "sourceColumn": "CategoryIdDesc"
          },
          {
            "name": "TypeId",
            "dataType": "int64",
            "sourceColumn": "TypeId"
          },
          {
            "name": "TypeIdDesc",
            "dataType": "string",
            "sourceColumn": "TypeIdDesc"
          },
          {
            "name": "PartTypeId",
            "dataType": "int64",
            "sourceColumn": "PartTypeId"
          },
          {
            "name": "PartTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "PartTypeIdDesc"
          },
          {
            "name": "UsageTypeId",
            "dataType": "int64",
            "sourceColumn": "UsageTypeId"
          },
          {
            "name": "UsageTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "UsageTypeIdDesc"
          },
          {
            "name": "KeepTypeId",
            "dataType": "int64",
            "sourceColumn": "KeepTypeId"
          },
          {
            "name": "KeepTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "KeepTypeIdDesc"
          },
          {
            "name": "BrandId",
            "dataType": "int64",
            "sourceColumn": "BrandId"
          },
          {
            "name": "BrandIdDesc",
            "dataType": "string",
            "sourceColumn": "BrandIdDesc"
          },
          {
            "name": "MarketingAuthId",
            "dataType": "int64",
            "sourceColumn": "MarketingAuthId"
          },
          {
            "name": "MarketingAuthIdDesc",
            "dataType": "string",
            "sourceColumn": "MarketingAuthIdDesc"
          },
          {
            "name": "ProductionCenterId",
            "dataType": "int64",
            "sourceColumn": "ProductionCenterId"
          },
          {
            "name": "ProductionCenterIdDesc",
            "dataType": "string",
            "sourceColumn": "ProductionCenterIdDesc"
          },
          {
            "name": "LisenceHolderId",
            "dataType": "int64",
            "sourceColumn": "LisenceHolderId"
          },
          {
            "name": "LisenceHolderIdDesc",
            "dataType": "string",
            "sourceColumn": "LisenceHolderIdDesc"
          },
          {
            "name": "CapsouleTypeId",
            "dataType": "int64",
            "sourceColumn": "CapsouleTypeId"
          },
          {
            "name": "CapsouleTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "CapsouleTypeIdDesc"
          },
          {
            "name": "SizepartTypeId",
            "dataType": "int64",
            "sourceColumn": "SizepartTypeId"
          },
          {
            "name": "SizepartTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "SizepartTypeIdDesc"
          },
          {
            "name": "MandrelTypeId",
            "dataType": "int64",
            "sourceColumn": "MandrelTypeId"
          },
          {
            "name": "MandrelTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "MandrelTypeIdDesc"
          },
          {
            "name": "TypeWgId",
            "dataType": "int64",
            "sourceColumn": "TypeWgId"
          },
          {
            "name": "TypeWgIdDesc",
            "dataType": "string",
            "sourceColumn": "TypeWgIdDesc"
          },
          {
            "name": "TypeCoatingId",
            "dataType": "int64",
            "sourceColumn": "TypeCoatingId"
          },
          {
            "name": "TypeCoatingIdDesc",
            "dataType": "string",
            "sourceColumn": "TypeCoatingIdDesc"
          },
          {
            "name": "TypeFwBwId",
            "dataType": "int64",
            "sourceColumn": "TypeFwBwId"
          },
          {
            "name": "TypeFwBwIdDesc",
            "dataType": "string",
            "sourceColumn": "TypeFwBwIdDesc"
          },
          {
            "name": "LaunchStatusId",
            "dataType": "int64",
            "sourceColumn": "LaunchStatusId"
          },
          {
            "name": "LaunchTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "LaunchTypeIdDesc"
          },
          {
            "name": "FilmColorId",
            "dataType": "int64",
            "sourceColumn": "FilmColorId"
          },
          {
            "name": "FilmColorIdDesc",
            "dataType": "string",
            "sourceColumn": "FilmColorIdDesc"
          },
          {
            "name": "BottlesColorId",
            "dataType": "int64",
            "sourceColumn": "BottlesColorId"
          },
          {
            "name": "BottlesColorIdDesc",
            "dataType": "string",
            "sourceColumn": "BottlesColorIdDesc"
          },
          {
            "name": "SylykazlTypeId",
            "dataType": "int64",
            "sourceColumn": "SylykazlTypeId"
          },
          {
            "name": "SylykazlTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "SylykazlTypeIdDesc"
          },
          {
            "name": "CapTypeId",
            "dataType": "int64",
            "sourceColumn": "CapTypeId"
          },
          {
            "name": "CapTypeIdDesc",
            "dataType": "string",
            "sourceColumn": "CapTypeIdDesc"
          },
          {
            "name": "BrochureId",
            "dataType": "int64",
            "sourceColumn": "BrochureId"
          },
          {
            "name": "BrochureIdDesc",
            "dataType": "string",
            "sourceColumn": "BrochureIdDesc"
          },
          {
            "name": "LableId",
            "dataType": "int64",
            "sourceColumn": "LableId"
          },
          {
            "name": "LableIdDesc",
            "dataType": "string",
            "sourceColumn": "LableIdDesc"
          },
          {
            "name": "BoxId",
            "dataType": "int64",
            "sourceColumn": "BoxId"
          },
          {
            "name": "BoxIdDesc",
            "dataType": "string",
            "sourceColumn": "BoxIdDesc"
          },
          {
            "name": "ProductionPolicyId",
            "dataType": "int64",
            "sourceColumn": "ProductionPolicyId"
          },
          {
            "name": "ProductionPolicyIdDesc",
            "dataType": "string",
            "sourceColumn": "ProductionPolicyIdDesc"
          },
          {
            "name": "ProductNameID",
            "dataType": "int64",
            "sourceColumn": "ProductNameID"
          },
          {
            "name": "ProductName",
            "dataType": "string",
            "sourceColumn": "ProductName"
          },
          {
            "name": "ProductAbdEnAbr",
            "dataType": "string",
            "sourceColumn": "ProductAbdEnAbr"
          },
          {
            "name": "brand_id",
            "dataType": "int64",
            "sourceColumn": "brand_id"
          },
          {
            "name": "BrandName",
            "dataType": "string",
            "sourceColumn": "BrandName"
          },
          {
            "name": "SKUABDEnAbr",
            "dataType": "string",
            "sourceColumn": "SKUABDEnAbr"
          },
          {
            "name": "Category",
            "dataType": "string",
            "sourceColumn": "Category"
          },
          {
            "name": "NoInBoxRatio",
            "dataType": "double",
            "sourceColumn": "NoInBoxRatio"
          },
          {
            "name": "PackingNoInBoxRatio",
            "dataType": "double",
            "sourceColumn": "PackingNoInBoxRatio"
          },
          {
            "name": "FranchiseAbr",
            "dataType": "string",
            "sourceColumn": "FranchiseAbr"
          },
          {
            "name": "NoInBox",
            "dataType": "int64",
            "sourceColumn": "NoInBox"
          },
          {
            "name": "ExpirDuration",
            "dataType": "int64",
            "sourceColumn": "ExpirDuration"
          },
          {
            "name": "TalkThickness",
            "dataType": "double",
            "sourceColumn": "TalkThickness"
          },
          {
            "name": "FoilThickness",
            "dataType": "double",
            "sourceColumn": "FoilThickness"
          },
          {
            "name": "LaunchTypeId",
            "dataType": "int64",
            "sourceColumn": "LaunchTypeId"
          },
          {
            "name": "StrategicVariation",
            "dataType": "string",
            "sourceColumn": "StrategicVariation"
          },
          {
            "name": "LifecycleId",
            "dataType": "int64",
            "sourceColumn": "LifecycleId"
          },
          {
            "name": "lifecyclename",
            "dataType": "string",
            "sourceColumn": "lifecyclename"
          },
          {
            "name": "BrandPerformanceName",
            "dataType": "string",
            "sourceColumn": "BrandPerformanceName"
          },
          {
            "name": "BrandPerformanceId",
            "dataType": "int64",
            "sourceColumn": "BrandPerformanceId"
          },
          {
            "name": "Weight",
            "dataType": "double",
            "sourceColumn": "Weight"
          },
          {
            "name": "AddedWeight",
            "dataType": "double",
            "sourceColumn": "AddedWeight"
          },
          {
            "name": "RangeWeight",
            "dataType": "double",
            "sourceColumn": "RangeWeight"
          },
          {
            "name": "RangeAddedweight",
            "dataType": "double",
            "sourceColumn": "RangeAddedweight"
          },
          {
            "name": "RangeWeightTa",
            "dataType": "double",
            "sourceColumn": "RangeWeightTa"
          },
          {
            "name": "RangeAddedweightTa",
            "dataType": "double",
            "sourceColumn": "RangeAddedweightTa"
          },
          {
            "name": "Hardness",
            "dataType": "double",
            "sourceColumn": "Hardness"
          },
          {
            "name": "HardnessAz",
            "dataType": "double",
            "sourceColumn": "HardnessAz"
          },
          {
            "name": "HardnessTa",
            "dataType": "double",
            "sourceColumn": "HardnessTa"
          },
          {
            "name": "Thickness",
            "dataType": "double",
            "sourceColumn": "Thickness"
          },
          {
            "name": "ThicknessAz",
            "dataType": "double",
            "sourceColumn": "ThicknessAz"
          },
          {
            "name": "ThicknessTa",
            "dataType": "double",
            "sourceColumn": "ThicknessTa"
          },
          {
            "name": "ColorTab",
            "dataType": "string",
            "sourceColumn": "ColorTab"
          },
          {
            "name": "Aspellets",
            "dataType": "string",
            "sourceColumn": "Aspellets"
          },
          {
            "name": "Density",
            "dataType": "double",
            "sourceColumn": "Density"
          },
          {
            "name": "DensityAz",
            "dataType": "double",
            "sourceColumn": "DensityAz"
          },
          {
            "name": "DensityTa",
            "dataType": "double",
            "sourceColumn": "DensityTa"
          },
          {
            "name": "Viscosity",
            "dataType": "double",
            "sourceColumn": "Viscosity"
          },
          {
            "name": "ViscosityAz",
            "dataType": "double",
            "sourceColumn": "ViscosityAz"
          },
          {
            "name": "ViscosityTa",
            "dataType": "double",
            "sourceColumn": "ViscosityTa"
          },
          {
            "name": "FluidFilled",
            "dataType": "double",
            "sourceColumn": "FluidFilled"
          },
          {
            "name": "SmallDiameter",
            "dataType": "double",
            "sourceColumn": "SmallDiameter"
          },
          {
            "name": "SmallDiameterAz",
            "dataType": "double",
            "sourceColumn": "SmallDiameterAz"
          },
          {
            "name": "SmallDiameterTa",
            "dataType": "double",
            "sourceColumn": "SmallDiameterTa"
          },
          {
            "name": "LargeDiameterAz",
            "dataType": "double",
            "sourceColumn": "LargeDiameterAz"
          },
          {
            "name": "LargeDiameter",
            "dataType": "int64",
            "sourceColumn": "LargeDiameter"
          },
          {
            "name": "LargeDiameterTa",
            "dataType": "double",
            "sourceColumn": "LargeDiameterTa"
          },
          {
            "name": "NoOfTabletsInBlister",
            "dataType": "int64",
            "sourceColumn": "NoOfTabletsInBlister"
          },
          {
            "name": "DiameterCap",
            "dataType": "double",
            "sourceColumn": "DiameterCap"
          },
          {
            "name": "ContentBottle",
            "dataType": "double",
            "sourceColumn": "ContentBottle"
          },
          {
            "name": "HeightBottle",
            "dataType": "double",
            "sourceColumn": "HeightBottle"
          },
          {
            "name": "Induction",
            "dataType": "boolean",
            "sourceColumn": "Induction"
          },
          {
            "name": "ArtWorkVersion",
            "dataType": "int64",
            "sourceColumn": "ArtWorkVersion"
          },
          {
            "name": "RadiusOfPunch",
            "dataType": "double",
            "sourceColumn": "RadiusOfPunch"
          },
          {
            "name": "CountPerUsageType",
            "dataType": "int64",
            "sourceColumn": "CountPerUsageType"
          },
          {
            "name": "ExportTypeId",
            "dataType": "int64",
            "sourceColumn": "ExportTypeId"
          },
          {
            "name": "ExportTypeName",
            "dataType": "string",
            "sourceColumn": "ExportTypeName"
          },
          {
            "name": "UnitId",
            "dataType": "int64",
            "sourceColumn": "UnitId"
          },
          {
            "name": "UnitName",
            "dataType": "string",
            "sourceColumn": "UnitName"
          },
          {
            "name": "DurationLimit",
            "dataType": "int64",
            "sourceColumn": "DurationLimit"
          },
          {
            "name": "BulidTypeId",
            "dataType": "int64",
            "sourceColumn": "BulidTypeId"
          },
          {
            "name": "BulidTypeName",
            "dataType": "string",
            "sourceColumn": "BulidTypeName"
          },
          {
            "name": "IsPermission",
            "dataType": "int64",
            "sourceColumn": "IsPermission"
          },
          {
            "type": "calculated",
            "name": "RayvarzNumber",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "'Dimqv ProductExcel'[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "ProductionType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "IF('Dimqv ProductExcel'[TypeCoatingId]>0 && ",
              "  'Dimqv ProductExcel'[TypeId]>0,'Dimqv ProductExcel'[TypeIdDesc]&",
              "  \"-\"&'Dimqv ProductExcel'[TypeCoatingIdDesc],'Dimqv ProductExcel'[TypeIdDesc])"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_ProductExcel = Source{[Schema=\"qv\",Item=\"ProductExcel\"]}[Data]",
                "in",
                "    qv_ProductExcel"
              ]
            }
          }
        ]
      },
      {
        "name": "Dimqv Machine",
        "columns": [
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "MachineAbr",
            "dataType": "string",
            "sourceColumn": "MachineAbr"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "IsGroupMachine",
            "dataType": "boolean",
            "sourceColumn": "IsGroupMachine"
          },
          {
            "name": "IsActive",
            "dataType": "boolean",
            "sourceColumn": "IsActive"
          },
          {
            "name": "GroupMachineId",
            "dataType": "int64",
            "sourceColumn": "GroupMachineId"
          },
          {
            "name": "SpeedUnitId",
            "dataType": "int64",
            "sourceColumn": "SpeedUnitId"
          },
          {
            "name": "CatalogNominalSpeed",
            "dataType": "int64",
            "sourceColumn": "CatalogNominalSpeed"
          },
          {
            "name": "MacAddress",
            "dataType": "string",
            "sourceColumn": "MacAddress"
          },
          {
            "name": "ISReadFromPlc",
            "dataType": "boolean",
            "sourceColumn": "ISReadFromPlc"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "IsFullWorking",
            "dataType": "boolean",
            "sourceColumn": "IsFullWorking"
          },
          {
            "name": "NeedToOk",
            "dataType": "boolean",
            "sourceColumn": "NeedToOk"
          },
          {
            "name": "TempProcessForWorkingCalc",
            "dataType": "int64",
            "sourceColumn": "TempProcessForWorkingCalc"
          },
          {
            "name": "TimeTalg",
            "dataType": "double",
            "sourceColumn": "TimeTalg"
          },
          {
            "name": "TimeFoil",
            "dataType": "double",
            "sourceColumn": "TimeFoil"
          },
          {
            "name": "SShift",
            "dataType": "int64",
            "sourceColumn": "SShift"
          },
          {
            "name": "HostName",
            "dataType": "string",
            "sourceColumn": "HostName"
          },
          {
            "name": "IpAddress",
            "dataType": "string",
            "sourceColumn": "IpAddress"
          },
          {
            "name": "TempMachineID",
            "dataType": "int64",
            "sourceColumn": "TempMachineID"
          },
          {
            "name": "IsLast",
            "dataType": "boolean",
            "sourceColumn": "IsLast"
          },
          {
            "name": "StatusId",
            "dataType": "int64",
            "sourceColumn": "StatusId"
          },
          {
            "name": "CompanyId",
            "dataType": "int64",
            "sourceColumn": "CompanyId"
          },
          {
            "name": "SiteId",
            "dataType": "int64",
            "sourceColumn": "SiteId"
          },
          {
            "name": "DepartmentId",
            "dataType": "int64",
            "sourceColumn": "DepartmentId"
          },
          {
            "name": "SubDepartmentId",
            "dataType": "int64",
            "sourceColumn": "SubDepartmentId"
          },
          {
            "name": "StatusName",
            "dataType": "string",
            "sourceColumn": "StatusName"
          },
          {
            "name": "CompanyName",
            "dataType": "string",
            "sourceColumn": "CompanyName"
          },
          {
            "name": "SiteName",
            "dataType": "string",
            "sourceColumn": "SiteName"
          },
          {
            "name": "DepartmentName",
            "dataType": "string",
            "sourceColumn": "DepartmentName"
          },
          {
            "name": "SubDepartmentName",
            "dataType": "string",
            "sourceColumn": "SubDepartmentName"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_Machine = Source{[Schema=\"qv\",Item=\"Machine\"]}[Data]",
                "in",
                "    qv_Machine"
              ]
            }
          }
        ]
      },
      {
        "name": "DimAllBomVersion",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[BomVersion]"
          },
          {
            "type": "calculated",
            "name": "CalLastRefreshTime",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": " NOW()",
            "formatString": "yyyy-MM-dd H:mm:ss",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeCustom\"><DateTimes><DateTime LCID=\"1033\" Group=\"GeneralLongDateTime\" FormatString=\"yyyy-MM-dd H:mm:ss\" /></DateTimes></Format>"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "ShamsiCurrentMonth",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "LOOKUPVALUE('CD DimBaseDates'[ShMonth],'CD DimBaseDates'[DateIDM],",
              "VALUE(FORMAT(DimAllBomVersion[CalLastRefreshTime],\"yyyymmdd\")))"
            ]
          },
          {
            "type": "calculated",
            "name": "CurrentDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('CD DimBaseDates'[DateId],'CD DimBaseDates'[DateIDM],",
              "VALUE(FORMAT(DimAllBomVersion[CalLastRefreshTime],\"yyyymmdd\")))"
            ]
          },
          {
            "type": "calculated",
            "name": "RefreshTimeShamsi",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              " DimAllBomVersion[CurrentDate] & \" \" & RIGHT(DimAllBomVersion[CalLastRefreshTime],11)",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": "DISTINCT(UNION(VALUES('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) ,VALUES('qv MPS'[BomVersion])))"
            }
          }
        ]
      },
      {
        "name": "qv ProductMachineVisualIndexByBomVersion",
        "columns": [
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "Version",
            "dataType": "int64",
            "sourceColumn": "Version"
          },
          {
            "name": "IsLast",
            "dataType": "boolean",
            "sourceColumn": "IsLast"
          },
          {
            "name": "CatalogNominalSpeed",
            "dataType": "double",
            "sourceColumn": "CatalogNominalSpeed"
          },
          {
            "name": "CatalogOperatorCount",
            "dataType": "double",
            "sourceColumn": "CatalogOperatorCount"
          },
          {
            "name": "SpeedUnitId",
            "dataType": "int64",
            "sourceColumn": "SpeedUnitId"
          },
          {
            "name": "UnitName",
            "dataType": "string",
            "sourceColumn": "UnitName"
          },
          {
            "name": "CustomizeNominalSpeed",
            "dataType": "double",
            "sourceColumn": "CustomizeNominalSpeed"
          },
          {
            "name": "CustomizeOperatorCount",
            "dataType": "double",
            "sourceColumn": "CustomizeOperatorCount"
          },
          {
            "name": "NoSubBatch",
            "dataType": "int64",
            "sourceColumn": "NoSubBatch"
          },
          {
            "name": "LoadUnloadTime",
            "dataType": "int64",
            "sourceColumn": "LoadUnloadTime"
          },
          {
            "name": "StandardSpeed",
            "dataType": "double",
            "sourceColumn": "StandardSpeed"
          },
          {
            "name": "OperatorCount",
            "dataType": "double",
            "sourceColumn": "OperatorCount"
          },
          {
            "name": "BypassSubBatch",
            "dataType": "boolean",
            "sourceColumn": "BypassSubBatch"
          },
          {
            "name": "FormingCount",
            "dataType": "int64",
            "sourceColumn": "FormingCount"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "SemiRayvarzID",
            "dataType": "int64",
            "sourceColumn": "SemiRayvarzID"
          },
          {
            "name": "SemiProductNameFa",
            "dataType": "string",
            "sourceColumn": "SemiProductNameFa"
          },
          {
            "name": "SemiProductNameEn",
            "dataType": "string",
            "sourceColumn": "SemiProductNameEn"
          },
          {
            "name": "SemiProductId",
            "dataType": "int64",
            "sourceColumn": "SemiProductId"
          },
          {
            "name": "OperationAllocation",
            "dataType": "int64",
            "sourceColumn": "OperationAllocation"
          },
          {
            "name": "VersionIndex",
            "dataType": "int64",
            "sourceColumn": "VersionIndex"
          },
          {
            "name": "stepno",
            "dataType": "int64",
            "sourceColumn": "stepno"
          },
          {
            "name": "BomVersion",
            "dataType": "int64",
            "sourceColumn": "BomVersion"
          },
          {
            "name": "ProductMachineStart",
            "dataType": "dateTime",
            "sourceColumn": "ProductMachineStart"
          },
          {
            "name": "ProductMachineFinish",
            "dataType": "dateTime",
            "sourceColumn": "ProductMachineFinish"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "oee",
            "dataType": "double",
            "sourceColumn": "oee"
          },
          {
            "name": "BatchBox",
            "dataType": "double",
            "sourceColumn": "BatchBox",
            "formatString": "0"
          },
          {
            "name": "BatchUnit",
            "dataType": "double",
            "sourceColumn": "BatchUnit"
          },
          {
            "name": "BatchKilo",
            "dataType": "double",
            "sourceColumn": "BatchKilo"
          },
          {
            "name": "BatchNo",
            "dataType": "double",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "CycleTimeS",
            "dataType": "double",
            "sourceColumn": "CycleTimeS"
          },
          {
            "type": "calculated",
            "name": "CalMaxProductMachineId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "CALCULATE(",
              " max('qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]),",
              "FILTER(",
              "'qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[MachineId]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) &&    ",
              "'qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID])",
              "      )",
              "           )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalMaxCustomizeNominalSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(",
              "           MAX('qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed]),",
              "           FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) && ",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[MachineId]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[BomVersion]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[CalMaxProductMachineId]) ",
              "&& 'qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[SemiRayvarzID]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])",
              ") ",
              "                 )",
              "           "
            ]
          },
          {
            "type": "calculated",
            "name": "CalCycleTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "  ",
              "   ROUND((",
              "         'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]",
              "     //  + (('qv ProductMachineVisualIndexByBOMVersion'[NoSubBatch]-1)*'qv ProductMachineVisualIndexByBOMVersion'[timeS])",
              "       + 'qv ProductMachineVisualIndexByBOMVersion'[LoadUnloadTime] ",
              "       + 'qv ProductMachineVisualIndexByBOMVersion'[CIPTime]  + 'qv ProductMachineVisualIndexByBomVersion'[TimeS]",
              "         ) ",
              "        ,0)",
              "",
              "   ",
              "       ",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalRelatedRevId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv VersionBudget'[RevisionId],'qv VersionBudget'[VersionBudgetId],'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])"
          },
          {
            "type": "calculated",
            "name": "CalRunningTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var Vprocessid =  'qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              " var VNoInBox = LOOKUPVALUE('Dimqv ProductExcel'[NoInBox],'Dimqv ProductExcel'[RayvarzId],FIXED('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]))",
              "var vbatchkilo = if('qv ProductMachineVisualIndexByBomVersion'[ProcessId]= 38 , 'qv ProductMachineVisualIndexByBomVersion'[BatchKiloRoller], 'qv ProductMachineVisualIndexByBomVersion'[BatchKilo])",
              "",
              "",
              "return ",
              "",
              " IF( Vprocessid=10 || Vprocessid=11 || Vprocessid=13 || Vprocessid=16 || Vprocessid=22, ",
              "",
              " ('qv ProductMachineVisualIndexByBOMVersion'[NoSubBatch] * 'qv ProductMachineVisualIndexByBOMVersion'[CalMaxCustomizeNominalSpeed] )",
              "    ,",
              "    IF(Vprocessid=14 || Vprocessid = 15 || Vprocessid= 17, ",
              "     DIVIDE(('qv ProductMachineVisualIndexByBOMVersion'[BatchUnit]) ,'qv ProductMachineVisualIndexByBomVersion'[CalMaxCustomizeNominalSpeed] )",
              "    ",
              "    ,",
              "    IF(Vprocessid=21 || Vprocessid=23 || Vprocessid=20 ,",
              "    DIVIDE('qv ProductMachineVisualIndexByBOMVersion'[BatchBox] ,'qv ProductMachineVisualIndexByBOMVersion'[CalMaxCustomizeNominalSpeed])",
              "    ,",
              "",
              "    IF(Vprocessid = 38 ,",
              "  DIVIDE(vbatchkilo , 'qv ProductMachineVisualIndexByBOMVersion'[CalMaxCustomizeNominalSpeed])",
              "        ))))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalQualityTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              "var VTotalLoadingTime = DIVIDE( 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[NewAvailability],100),0)",
              "",
              "return",
              "   ",
              "//aniderman boronsepari ",
              "",
              "   IF(VMachineId = 277 || VMachineId = 292  , 0 ,",
              "       ",
              "       DIVIDE(DIVIDE(VTotalLoadingTime, DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Productivity],100)) , ",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Quality],100),0)",
              "          -    ",
              "        DIVIDE(VTotalLoadingTime, DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Productivity],100))",
              "",
              "     )",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalAvailabilityTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              " ",
              "var VTotalLoadingTime =DIVIDE( 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Availibility],100),0)",
              "",
              "return ",
              "",
              " // aniderma boronsepari",
              "",
              "  IF( VMachineId = 277 || VMachineId = 292  , 0 ,VTotalLoadingTime - 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)] )"
            ]
          },
          {
            "type": "calculated",
            "name": "CalBatchTotalTime(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "",
              "var Vprocessid =  'qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "",
              "return ",
              "",
              "  // for sakhte sharbat",
              "",
              " IF( Vprocessid=22 ,  'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)],",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)]   +  'qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)] + ",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)] +  'qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]",
              "   )"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "BudgetDesc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv VersionBudget'[DescBudget],'qv VersionBudget'[VersionBudgetId],'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])"
          },
          {
            "type": "calculated",
            "name": "TotalLoadingTimePerMachinePerRev(h)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv ViewCalendarByMachine'[CountWorkingDayPerMachinePerRev]),FILTER('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId]&&",
              "'qv ViewCalendarByMachine'[RelatedBudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))*24",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TrainingTimePerMachinePerRev(h)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "    //     12 * 12   // 12 mah 12 saat",
              "CALCULATE(MAX('qv ViewCalendarByMachine'[CountMonthPerRev]),FILTER('qv ViewCalendarByMachine',",
              "'qv ViewCalendarByMachine'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId]&&",
              "'qv ViewCalendarByMachine'[RelatedBudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))*12",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RestingTimePerMachinePerRev(h)",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "",
              "(CALCULATE(max('qv MachineTimeOffIndex'[CalRestingPerShift(min)]),FILTER('qv MachineTimeOffIndex',",
              "'qv MachineTimeOffIndex'[ShiftId] =2 && 'qv MachineTimeOffIndex'[StopageCode]=19010108 && ",
              "'qv MachineTimeOffIndex'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] &&",
              "  'qv MachineTimeOffIndex'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))",
              "+",
              "CALCULATE(max('qv MachineTimeOffIndex'[CalRestingPerShift(min)]),FILTER('qv MachineTimeOffIndex',",
              "'qv MachineTimeOffIndex'[ShiftId] =3 && 'qv MachineTimeOffIndex'[StopageCode]=19010108 && ",
              "'qv MachineTimeOffIndex'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] &&",
              "  'qv MachineTimeOffIndex'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))",
              ")/60",
              " ",
              "*",
              "CALCULATE(MAX('qv ViewCalendarByMachine'[CountWorkingDayPerMachinePerRev]),FILTER('qv ViewCalendarByMachine',",
              "'qv ViewCalendarByMachine'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId]&&",
              "'qv ViewCalendarByMachine'[RelatedBudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))",
              "",
              "",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CountPM2000",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            2000",
              "        ),",
              "        1",
              "    ) < 1,",
              "    0,",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] - ",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            2000",
              "        ),",
              "        1",
              "    )",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CountPM300",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            300",
              "        ),",
              "        1",
              "    ) < 1,",
              "    0,",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] - ",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            300",
              "        ),",
              "        1",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "CountPM600",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            600",
              "        ),",
              "        1",
              "    ) < 1,",
              "    0,",
              "    FLOOR (",
              "        DIVIDE (",
              "             'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)] -",
              "             'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)] - ",
              "             'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "            600",
              "        ),",
              "        1",
              "    )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "PMTime300",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "([CountPM300]-[CountPM600])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineId],",
              "'qv MachineService'[ServiceTypeId],760)"
            ]
          },
          {
            "type": "calculated",
            "name": "PMTime600",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "([CountPM600]-[CountPM2000])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineId],",
              "'qv MachineService'[ServiceTypeId],762)"
            ]
          },
          {
            "type": "calculated",
            "name": "PMTime2000",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "([CountPM2000])*LOOKUPVALUE('qv MachineService'[DurationHours],'qv MachineService'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineId],",
              "'qv MachineService'[ServiceTypeId],761)"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalPMPerMachinePerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "IF('qv ProductMachineVisualIndexByBomVersion'[ProcessId] = 20 , 0 , ('qv ProductMachineVisualIndexByBomVersion'[PMTime300] ",
              "+ 'qv ProductMachineVisualIndexByBomVersion'[PMTime600] + 'qv ProductMachineVisualIndexByBomVersion'[PMTime2000])  )",
              "// * 'qv MPS'[CalAllocation%])",
              "// prosessid=20 is manual packaging"
            ]
          },
          {
            "type": "calculated",
            "name": "ReportMode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(FIND(\"R1\" , 'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc] , , BLANK() ),48,",
              "if(FIND(\"R2\" , 'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc] , , BLANK() ),49,",
              "if(FIND(\"R3\" , 'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc] , , BLANK() ),402,",
              "if(FIND(\"F\" , 'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc] , , BLANK() ),47,",
              "if(FIND(\"B\" , 'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc] , , BLANK() ),46,",
              "0)))))"
            ]
          },
          {
            "type": "calculated",
            "name": "SumSPCTimeActualLastYearPerMachinePerRev(min)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var minr = 'qv ProductMachineVisualIndexByBomVersion'[MinRevMonth]",
              "",
              "var VProcessId ='qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "var VMachineId ='qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "var x =CALCULATE(max('qv PerformanceReport'[MonthRank]),filter('qv PerformanceReport','qv PerformanceReport'[ShMon]<=minr))",
              "",
              "",
              "return ",
              "  if(VProcessId=21 || VProcessId=22 || VProcessId=23 || VProcessId=38 , // counter syrupsakht syrupfill rollercompactor press || VProcessId=14,",
              "",
              "  CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[ProcessID]='qv ProductMachineVisualIndexByBomVersion'[ProcessId] &&'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28)),",
              "",
              " if(VProcessId=10 && VMachineId in {38,175} ,  // MachineType: granulation: sejong 1, 2, dayuzna",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {38,175,231} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              " if(VProcessId=17 && VMachineId in {11,13} ,  // MachineType: blister6, blister4         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {11,13} && 'qv PerformanceReport'[ISValidSPCForAvg]=1  &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              "  if(VProcessId=17 && VMachineId in {12,22} ,  // MachineType: blister8, blister5         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {12,22} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              ",if(VProcessId=17 && VMachineId in {248,249,250} ,  // MachineType: blister1, blister2, blister11         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {248,249,250} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              ",if(VProcessId=16 && VMachineId in {64,117,118,129,244} ,  // MachineType: coating sf170-1,2,3 -namdar2 -namdar10",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {64,117,118,129,244} && 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              ",",
              "//if(VProcessId=13 || VProcessId=11 || VProcessId=14 || VProcessId=15 ,   // dry blender press capsulfilling",
              "",
              "  CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]='qv ProductMachineVisualIndexByBomVersion'[MachineId]&& 'qv PerformanceReport'[ISValidSPCForAvg]=1 &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=28))",
              "",
              "",
              "))))))",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MinRevMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "/*",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=836,140006,",
              "             IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=834,140003,",
              "                IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=835,140005,",
              "                   IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=833,140002,",
              "                     IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=832,140001,",
              "                        IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=829,9912,",
              "                            IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=830,9911,",
              "                                 IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=828,9910,",
              "                                    IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=831,9912,",
              "                                         IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=837,140007,",
              "                                              IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=839,140008,",
              "                                                IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=846,140010,",
              "                                                  IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=848,140009,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=849,140010,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=850,140011,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=852,140012,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=853,140101,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=854,140102,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=855,140103,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=858,140103,",
              "IF('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=884,140206,",
              "0)))))))))))))))))))))",
              "",
              "*/",
              "",
              "",
              "",
              "CALCULATE(max('qv MPS'[MinRevMonth]),FILTER('qv MPS','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv MPS'[CalRelatedBudgetVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "SumRunningActualLastYearPerMachinPerRev(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "  ",
              "var minr = 'qv ProductMachineVisualIndexByBomVersion'[MinRevMonth]",
              "",
              "var VProcessId ='qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "var VMachineId ='qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "var x =CALCULATE(max('qv PerformanceReport'[MonthRank]),filter('qv PerformanceReport','qv PerformanceReport'[ShMon]<=minr))",
              "",
              "",
              "return ",
              "",
              "  if(VProcessId=21 || VProcessId=22 || VProcessId=23 || VProcessId=38 , // counter syrupsakht syrupfill rollercompactor press || VProcessId=14 , ",
              "",
              "  CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[ProcessID]='qv ProductMachineVisualIndexByBomVersion'[ProcessId] &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60,",
              "",
              " if(VProcessId=10 && VMachineId in {38,175} ,  // MachineType: granulation: sejong 1, 2,dayuzna  ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {38,175,231} &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              ",",
              " if(VProcessId=17 && VMachineId in {11,13} ,  // MachineType: blister6, blister4         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {11,13} &&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              ",",
              "  if(VProcessId=17 && VMachineId in {12,22} ,  // MachineType: blister8, blister5         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {12,22} && ",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              "",
              ",if(VProcessId=17 && VMachineId in {248,249,250} ,  // MachineType: blister1, blister2, blister11         ",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {248,249,250} && ",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              "",
              ",if(VProcessId=16 && VMachineId in {64,117,118,129,244} ,  // MachineType: coating sf170-1,2,3 -namdar2 -namdar10",
              "",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]in {64,117,118,129,244} && ",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              ",",
              "//if(VProcessId=13 || VProcessId=11 || VProcessId=14 || VProcessId=15 ,   // dry blender capsulfilling",
              "",
              "  CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "   'qv PerformanceReport'[MachineID]='qv ProductMachineVisualIndexByBomVersion'[MachineId]&&",
              "   'qv PerformanceReport'[ShMon]<= minr  &&",
              "  ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "   'qv PerformanceReport'[PlanTypeId]=26))/60",
              "",
              "",
              "",
              "))))))",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "/* var minr = 'qv ProductMachineVisualIndexByBomVersion'[MinRevMonth]",
              " var VMachineId ='qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "",
              "var x =CALCULATE(max('qv PerformanceReport'[MonthRank]),filter('qv PerformanceReport','qv PerformanceReport'[ShMon]=minr))",
              "return ",
              " CALCULATE(SUM('qv PerformanceReport'[DurationHdr]) , FILTER('qv PerformanceReport' ,",
              "    'qv PerformanceReport'[MachineID]='qv ProductMachineVisualIndexByBomVersion'[MachineId] &&",
              "    'qv PerformanceReport'[ShMon]<= minr  &&",
              "   ('qv PerformanceReport'[MonthRank])>=x-11 &&",
              "    'qv PerformanceReport'[PlanTypeId]=26))/60",
              "",
              "*/",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SPCPercent",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var VprocessId = 'qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "return ",
              " if(DIVIDE('qv ProductMachineVisualIndexByBomVersion'[SumSPCTimeActualLastYearPerMachinePerRev(min)]/60,",
              "'qv ProductMachineVisualIndexByBomVersion'[SumRunningActualLastYearPerMachinPerRev(h)]+",
              "('qv ProductMachineVisualIndexByBomVersion'[SumSPCTimeActualLastYearPerMachinePerRev(min)]/60))=BLANK(),",
              "",
              "      if(VprocessId=23 ,  0.016  ,  //syrupfilling",
              "       if(VprocessId=17 ,  0.025  ,  //Blistering",
              "        if(VprocessId=14 ,0.088  , //Press",
              "         if(VprocessId=11 ,  0.068  , //Drying",
              "          if(VprocessId=16 ,  0.05  , //coating",
              "           if(VprocessId=38 , 0.22, //RollerCompactor",
              "              if(VprocessId=21 || VprocessId=15 ,  0.045 , //Counter - capfilling",
              "              if(VprocessId=10, 0.162 , //granulation",
              "              if(VprocessId=13, 0.174  //Blender",
              "))))))))),",
              "",
              " DIVIDE('qv ProductMachineVisualIndexByBomVersion'[SumSPCTimeActualLastYearPerMachinePerRev(min)]/60,",
              "'qv ProductMachineVisualIndexByBomVersion'[SumRunningActualLastYearPerMachinPerRev(h)]+",
              "('qv ProductMachineVisualIndexByBomVersion'[SumSPCTimeActualLastYearPerMachinePerRev(min)]/60))",
              "",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PMPercent",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[TotalPMPerMachinePerRev],'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "SPCPerMachinePerRev",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)]* 'qv ProductMachineVisualIndexByBomVersion'[SPCPercent]",
              "",
              "/*",
              "('qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)]-'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)]-",
              "  'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)]) * 'qv ProductMachineVisualIndexByBomVersion'[SPCPercent]",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "MaxProductMachineIdInBom",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "CALCULATE(",
              " max('qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]),",
              "FILTER(",
              "'qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[MachineId]) &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[BomVersion])",
              "",
              "      )",
              "           )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewAvailability",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if(",
              " LOOKUPVALUE(NewAvailability[NewActualAvailability],NewAvailability[MachindeID],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]) =BLANK() ,",
              " 'qv ProductMachineVisualIndexByBomVersion'[Availibility],",
              " LOOKUPVALUE(NewAvailability[NewActualAvailability],NewAvailability[MachindeID],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]) )",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewAvailabilityTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              " ",
              "var VTotalLoadingTime =DIVIDE( 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[NewAvailability],100),0)",
              "",
              "return ",
              "",
              " // aniderma boronsepari",
              "",
              "  IF( VMachineId = 277 || VMachineId = 292  , 0 ,VTotalLoadingTime - 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)] )"
            ]
          },
          {
            "type": "calculated",
            "name": "NewBatchTotalTime(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "",
              "var Vprocessid =  'qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "",
              "return ",
              "",
              "  // for sakhte sharbat",
              "",
              " IF( Vprocessid=22 ,  'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)],",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)]   +  'qv ProductMachineVisualIndexByBomVersion'[NewAvailabilityTimePerBatch(min)] + ",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)] +  'qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]",
              "   )"
            ]
          },
          {
            "type": "calculated",
            "name": "OPColor",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv ProductMachineVisualIndexByBomVersion'[OperationAllocation]=10131,1,",
              "if('qv ProductMachineVisualIndexByBomVersion'[OperationAllocation]=10159,2,",
              "--if('qv ProductMachineVisualIndexByBomVersion'[OperationAllocation]=10173,3,",
              "if(VALUE(LEFT('qv ProductMachineVisualIndexByBomVersion'[OperationAllocation],2))=14,4,5)))"
            ]
          },
          {
            "type": "calculated",
            "name": "Type",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv ProductMachineVisualIndexByBomVersion'[LargDiameter]>16.3,\"Dtype\",\"BType\")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "LargDiameter",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[LargeDiameter] , 'Dimqv ProductExcel'[RayvarzId], ",
              " FIXED('qv ProductMachineVisualIndexByBomVersion'[RayvarzId],0,1))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ManderTypeID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[MandrelTypeIdDesc] , 'Dimqv ProductExcel'[RayvarzId], ",
              " FIXED('qv ProductMachineVisualIndexByBomVersion'[RayvarzId],0,1))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CoatingStatus",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE(FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) && ",
              "   'qv ProductMachineVisualIndexByBomVersion'[BomVersion]= EARLIER('qv ProductMachineVisualIndexByBomVersion'[BomVersion])&&",
              "    'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])),'qv ProductMachineVisualIndexByBomVersion'[ProcessId])",
              "",
              "return ",
              "if('qv ProductMachineVisualIndexByBomVersion'[shape]=\"Tablet\" , if( 16 in tbl,\"Coated\",\"Uncoated\"), 'qv ProductMachineVisualIndexByBomVersion'[shape])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "shape",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('qv MPS'[shape],'qv MPS'[RayvarzId],",
              "              'qv ProductMachineVisualIndexByBomVersion'[RayvarzId])"
            ]
          },
          {
            "type": "calculated",
            "name": "IsActual",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vcount = COUNTROWS(FILTER('qv PerformanceReport','qv PerformanceReport'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] && 'qv PerformanceReport'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion] && 'qv PerformanceReport'[MachineID]='qv ProductMachineVisualIndexByBomVersion'[MachineId]))",
              "",
              "return ",
              "if(vcount<>BLANK(),TRUE(),FALSE())"
            ],
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculated",
            "name": "BomVersionRank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RANKX(FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId])) ,",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion],,DESC,Dense)"
            ]
          },
          {
            "type": "calculated",
            "name": "LifeCycle",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[lifecyclename],'Dimqv ProductExcel'[RayvarzNumber],",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId])"
            ]
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv ProductMachineVisualIndexByBomVersion'[SiteType-]=\"Abidi  70\",\"Special Drugs\" ,",
              " if('qv ProductMachineVisualIndexByBomVersion'[SiteType-]=\"Abidi 1\" , \"Conventional\" ,",
              " if('qv ProductMachineVisualIndexByBomVersion'[SiteType-]=\"Abidi 2\" , \"AbidiSite2\" ,",
              "'qv ProductMachineVisualIndexByBomVersion'[SiteType-]",
              ")))",
              " "
            ]
          },
          {
            "type": "calculated",
            "name": "ProductionType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " var x =SUMMARIZE(FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "  'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) && ",
              "   'qv ProductMachineVisualIndexByBomVersion'[BomVersion]= EARLIER('qv ProductMachineVisualIndexByBomVersion'[BomVersion])&&",
              "   'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]= EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])),'qv ProductMachineVisualIndexByBomVersion'[ProcessId])",
              "",
              " return",
              " ",
              "if(10 in x && 11 in x && 13 in x, \"WG\",",
              "  if(10 in x && 38 in x && 13 in x,\"DG\",",
              "    if( 38 in x && 13 in x,\"DG+\",",
              "      if( 14 in x && 13 in x || 13 in x && 15 in x ,\"DC\",",
              "        if( 23 in x,\"Syrup\",",
              "          if( 14 || 15  in x  && COUNTROWS(x)=1  ,\"DC+\"",
              "))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "RestPerDay",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "(CALCULATE(max('qv MachineTimeOffIndex'[CalRestingPerShift(min)]),FILTER('qv MachineTimeOffIndex',",
              "'qv MachineTimeOffIndex'[ShiftId] =2 && 'qv MachineTimeOffIndex'[StopageCode] in {19010108,190110113,19010107} && ",
              "'qv MachineTimeOffIndex'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] &&",
              "  'qv MachineTimeOffIndex'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))",
              "+  ",
              "CALCULATE(max('qv MachineTimeOffIndex'[CalRestingPerShift(min)]),FILTER('qv MachineTimeOffIndex',",
              "'qv MachineTimeOffIndex'[ShiftId] =3 && 'qv MachineTimeOffIndex'[StopageCode] in {19010108,190110113,19010107}  && ",
              "'qv MachineTimeOffIndex'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] &&",
              "  'qv MachineTimeOffIndex'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]))",
              ")/60",
              " ",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualAvailability",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if(",
              " LOOKUPVALUE(NewAvailability[ActualAvailability],NewAvailability[MachindeID],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]) =BLANK() , 'qv ProductMachineVisualIndexByBomVersion'[Availibility],",
              " LOOKUPVALUE(NewAvailability[ActualAvailability],NewAvailability[MachindeID],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]) )",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "ActualAvailabilityTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              " ",
              "var VTotalLoadingTime =DIVIDE( 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[ActualAvailability],100),0)",
              "",
              "return ",
              "",
              " // aniderma boronsepari",
              "",
              "  IF( VMachineId = 277 || VMachineId = 292  , 0 ,VTotalLoadingTime - 'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)] )"
            ]
          },
          {
            "type": "calculated",
            "name": "ActualBatchTotalTime(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "",
              "var Vprocessid =  'qv ProductMachineVisualIndexByBomVersion'[ProcessId]",
              "",
              "return ",
              "",
              "  // for sakhte sharbat",
              "",
              " IF( Vprocessid=22 ,  'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)],",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)]   +  'qv ProductMachineVisualIndexByBomVersion'[ActualAvailabilityTimePerBatch(min)] + ",
              "      'qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)] +  'qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]",
              "   )"
            ]
          },
          {
            "type": "calculated",
            "name": "NewProductivity",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7002950,",
              "(500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7006130,",
              "(3500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7006140,",
              "(3500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003480,",
              "(900/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7001126,",
              "(500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7007060,",
              "(1500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7006070,",
              "(2300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003190,",
              "(2100/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003200,",
              "(2100/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004096,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004095,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7002860,",
              "(1000/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7000023,",
              "(1440/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7000024,",
              "(1440/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7000026,",
              "(1440/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7000027,",
              "(1440/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003170,",
              "(1296/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003171,",
              "(1296/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7002700,",
              "(4200/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003450,",
              "(3700/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7002922,",
              "(2500/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003030,",
              "(666/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7003031,",
              "(666/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004095,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004096,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004090,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "if('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=7004091,",
              "(1300/'qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])*100,",
              "'qv ProductMachineVisualIndexByBomVersion'[Productivity])))))))))))))))))))))))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "ActiveVersion",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl =SUMMARIZE(FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[SelectVersionName]<>\"[NA]\" &&",
              "                                                    'qv BomDetailsAllVersion'[SelectVersionName]<>\"sample\")",
              ",'qv BomDetailsAllVersion'[RayvarzId],'qv BomDetailsAllVersion'[Version],'qv BomDetailsAllVersion'[FromMonth],",
              "'qv BomDetailsAllVersion'[ToMonth],\"SVN\",max('qv BomDetailsAllVersion'[SelectVersionName]))",
              "",
              "var vcount = COUNTROWS(FILTER(tbl,[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]))",
              "",
              "var frommonthproduction= maxx(filter(tbl,[RayvarzId]=",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] && [SVN]=\"production\" ),[FromMonth]) ",
              "",
              "var frommonthcustomize= maxx(filter(tbl,[RayvarzId]=",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId] && [SVN]=\"CustomizBom\" ),[FromMonth])",
              " ",
              "return ",
              "     if(vcount=1,FIXED(maxx(filter(tbl,[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]),[version]),0,1),",
              "      if( vcount=2 && frommonthproduction=frommonthcustomize,",
              "    FIXED(maxx(filter(tbl,[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] && [SVN]=\"CustomizBom\" )",
              "   ,[version]),0,1)",
              "    , if(vcount=2 && frommonthproduction<>frommonthcustomize , ",
              "         CONCATENATEX(filter(tbl,[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]),[version],\",\"))))",
              "",
              "",
              " ",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SiteType-",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[ProductionCenterIdDesc],",
              "'Dimqv ProductExcel'[RayvarzNumber],",
              "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId])"
            ]
          },
          {
            "type": "calculated",
            "name": "VersionNote",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv BomDetailsAllVersion'[VersionNote]),filter('qv BomDetailsAllVersion',",
              " 'qv BomDetailsAllVersion'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] &&",
              " 'qv BomDetailsAllVersion'[Version]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "0.95Loading",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)]*0.95"
          },
          {
            "type": "calculated",
            "name": "PlannedStpMachineBaseLoadingStandard",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vtrainPercent  = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)],",
              "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)])",
              "",
              "var vRestPercent  = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)],",
              "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)])",
              "",
              "return ",
              "vtrainPercent+vRestPercent+'qv ProductMachineVisualIndexByBomVersion'[SPCPercent]+'qv ProductMachineVisualIndexByBomVersion'[PMPercent]"
            ]
          },
          {
            "type": "calculated",
            "name": "NewRestPerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              " var vkilian  = CALCULATE(max( 'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)]) , ",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[MachineId]=246 &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=",
              "EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])))",
              "",
              "return ",
              "if( 'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {4,6,7,293} ",
              ",vkilian, 'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewRestperDay",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              " var vkilian  = CALCULATE(max( 'qv ProductMachineVisualIndexByBomVersion'[RestPerDay]) , ",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[MachineId]=246 &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=",
              "EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion])))",
              "",
              "return ",
              "if( 'qv ProductMachineVisualIndexByBomVersion'[MachineId] in {4,6,7,293} ",
              ",vkilian, 'qv ProductMachineVisualIndexByBomVersion'[RestPerDay])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "PlannedSTPMachineBaseLoadingBudget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vtrainPercent  = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)],",
              "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)])",
              "",
              "var vRestPercent  = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[NewRestPerRev],",
              "'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)])",
              "",
              "return ",
              "vtrainPercent+vRestPercent+'qv ProductMachineVisualIndexByBomVersion'[SPCPercent]+'qv ProductMachineVisualIndexByBomVersion'[PMPercent]"
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 8",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'qv ProductMachineVisualIndexByBomVersion'[RayvarzId]&\"-\"&'qv ProductMachineVisualIndexByBomVersion'[ISLastBOMProductopn]"
          },
          {
            "type": "calculated",
            "name": "ISLastBOMProductopn",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmaxbom = CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BomVersion]),filter('qv ProductMachineVisualIndexByBomVersion',",
              " 'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=EARLIER('qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]) &&",
              "  EARLIER('qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]) ='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion] ))",
              "",
              " --'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=\"Production\" && ",
              "",
              "return ",
              "",
              "if( 'qv ProductMachineVisualIndexByBomVersion'[BomVersion] =vmaxbom ,1,0)",
              "",
              "--'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=\"Production\" &&"
            ]
          },
          {
            "type": "calculated",
            "name": "OdlPerformanceTimePerBatch(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              "",
              "var VTotalLoadingTime = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[NewAvailability],100),0)",
              "",
              "return ",
              "",
              "//aniderman boronsepari ",
              "",
              " IF(VMachineId = 277 || VMachineId = 292  , 0 ,",
              "",
              "  DIVIDE(VTotalLoadingTime,DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Productivity],100)) ",
              "  - VTotalLoadingTime",
              "   )",
              "  "
            ]
          },
          {
            "type": "calculated",
            "name": "NewPerformanceTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var VMachineId = 'qv ProductMachineVisualIndexByBOMVersion'[MachineId]",
              "",
              "var VTotalLoadingTime = DIVIDE('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
              "DIVIDE('qv ProductMachineVisualIndexByBomVersion'[NewAvailability],100),0)",
              "",
              "return ",
              "",
              " IF(VMachineId = 277 || VMachineId = 292  , 0 ,",
              "",
              "  DIVIDE(VTotalLoadingTime,DIVIDE('qv ProductMachineVisualIndexByBomVersion'[Productivity],100)) ",
              "  - VTotalLoadingTime",
              "   )",
              ""
            ]
          },
          {
            "name": "ProductMachineId",
            "dataType": "int64",
            "sourceColumn": "ProductMachineId"
          },
          {
            "name": "BudgetVersion",
            "dataType": "int64",
            "sourceColumn": "BudgetVersion"
          },
          {
            "name": "CIPTime",
            "dataType": "int64",
            "sourceColumn": "CIPTime"
          },
          {
            "name": "TimeS",
            "dataType": "int64",
            "sourceColumn": "TimeS"
          },
          {
            "name": "Quality",
            "dataType": "double",
            "sourceColumn": "Quality"
          },
          {
            "name": "Productivity",
            "dataType": "double",
            "sourceColumn": "Productivity"
          },
          {
            "name": "Availibility",
            "dataType": "double",
            "sourceColumn": "Availibility"
          },
          {
            "name": "SelectedVersionName",
            "dataType": "string",
            "sourceColumn": "SelectedVersionName"
          },
          {
            "type": "calculated",
            "name": "AVAI%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "('qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)]-'qv ProductMachineVisualIndexByBomVersion'[RestingTimePerMachinePerRev(h)]-'qv ProductMachineVisualIndexByBomVersion'[TrainingTimePerMachinePerRev(h)])*(1-'qv ProductMachineVisualIndexByBomVersion'[SPCPercent])*(1-'qv ProductMachineVisualIndexByBomVersion'[PMPercent])*'qv ProductMachineVisualIndexByBomVersion'[NewAvailability]",
              "/'qv ProductMachineVisualIndexByBomVersion'[TotalLoadingTimePerMachinePerRev(h)]"
            ]
          },
          {
            "name": "SelectedVersion",
            "dataType": "int64",
            "sourceColumn": "SelectedVersion"
          },
          {
            "type": "calculated",
            "name": "BatchKiloRoller",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR Vsortroller = CALCULATE(max('qv BomDetailsAllVersion'[Sort]),FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv BomDetailsAllVersion'[Version] && 'qv BomDetailsAllVersion'[ProcessId] =38 ))",
              "",
              "return ",
              "",
              "CALCULATE(sum('qv BomDetailsAllVersion'[Qty]),FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] && 'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv BomDetailsAllVersion'[Version] && 'qv BomDetailsAllVersion'[Sort]=Vsortroller-1 && 'qv BomDetailsAllVersion'[PreviousBomDtl]=0))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],'qv ProductMachineVisualIndexByBomVersion'[ProcessId])   "
          },
          {
            "type": "calculated",
            "name": "MachineEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " LOOKUPVALUE('Dimqv Machine'[MachineDscEn],'Dimqv Machine'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineId])",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Company",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE('Dimqv Machine'[CompanyName],'Dimqv Machine'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineID])"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 9",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv BomDetailsAllVersion'[ProductionCenterName]) ,",
              "FILTER('qv BomDetailsAllVersion', 'qv BomDetailsAllVersion'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]",
              " &&",
              "'qv BomDetailsAllVersion'[Version]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]",
              " && 'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]= \"Production\" )",
              ")",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Value.NativeQuery (#\"SQL/etl;amardb\", \"",
                "select ",
                "[SelectedVersion],",
                "[SelectedVersionName],",
                "[Availibility],",
                "[Quality],",
                "[Productivity],",
                "       [ProductMachineId]",
                "      ,[BudgetVersion]",
                "      ,[MachineId]",
                "      ,[Version]",
                "      ,[IsLast]",
                "      ,[CatalogNominalSpeed]",
                "      ,[CatalogOperatorCount]",
                "      ,[SpeedUnitId]",
                "      ,[UnitName]",
                "      ,[CustomizeNominalSpeed]",
                "      ,[CustomizeOperatorCount]",
                "      ,[NoSubBatch]",
                "      ,[LoadUnloadTime]",
                "      ,[StandardSpeed]",
                "      ,[OperatorCount]",
                "      ,[BypassSubBatch]",
                "      ,[FormingCount]",
                "      ,[ProductNameFa]",
                "      ,[MachineDscFa]",
                "      ,[ProcessNameFa]",
                "      ,[ProductNameEn]",
                "      ,[ProcessId]",
                "      ,[M_rayId]",
                "      ,[SemiRayvarzID]",
                "      ,[SemiProductNameFa]",
                "      ,[SemiProductNameEn]",
                "      ,[SemiProductId]",
                "      ,[OperationAllocation]",
                "      ,[VersionIndex]",
                "      ,[stepno]",
                "      ,[BomVersion]",
                "      ,[ProductMachineStart]",
                "      ,[ProductMachineFinish]",
                "      ,[RayvarzId]",
                "      ,[oee]",
                "      ,[BatchBox]",
                "      ,[BatchUnit]",
                "      ,[BatchKilo]",
                "      ,[BatchNo]",
                "      ,[CycleTimeS]",
                "      ,[CIPTime]",
                "      , [TimeS]",
                "",
                "  FROM [AMARDB].[qv].[ProductMachineVisualIndexByBomVersion]",
                "",
                "\")",
                "in",
                "    Source"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "RunningTimeMPS--",
            "expression": [
              "",
              "",
              "var VBom = SELECTEDVALUE('DimAllBomVersion'[BomVersion])",
              "",
              "var VRayvarzid= SELECTEDVALUE('qv MPS'[RayvarzId])",
              "",
              "var VMachineid= SELECTEDVALUE('qv MPS'[MachineId])",
              "",
              "",
              "return",
              "",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=VRayvarzid &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]=VMachineid &&  'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=VBom ",
              "                   )",
              "           ) * Max('qv MPS'[BatchCount])",
              "           "
            ],
            "displayFolder": "Measure"
          },
          {
            "name": "CycleTimeMPS--",
            "expression": [
              "",
              "",
              "var VBom = SELECTEDVALUE('qv MPS'[BomVersion])",
              "",
              "var VRayvarzid= SELECTEDVALUE('qv MPS'[RayvarzId])",
              "",
              "var VRevId = SELECTEDVALUE('qv MPS'[RevId])",
              "",
              "var VMachineid= SELECTEDVALUE('qv MPS'[MachineId])",
              "",
              "var VVersionid= CALCULATE(max('qv VersionBudget'[VersionBudgetId]),FILTER('qv VersionBudget','qv VersionBudget'[RevisionId]= VRevId))",
              "",
              "var VBatchCount= SELECTEDVALUE('qv MPS'[BatchCount])",
              "",
              "return",
              "",
              "  CALCULATE(MAX('qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)]),",
              "              FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=VRayvarzid &&",
              "                      'qv ProductMachineVisualIndexByBomVersion'[MachineId]=VMachineid &&  'qv ProductMachineVisualIndexByBomVersion'[BomVersion]=VBom  ",
              "                     // 'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=VVersionid",
              "                     ))         ",
              "           "
            ],
            "displayFolder": "Measure"
          },
          {
            "name": "MachineIdCheck",
            "expression": [
              "",
              "",
              "var x = VALUES('Dimqv Machine'[MachineId])",
              "",
              "var y = VALUES('qv ProductMachineVisualIndexByBomVersion'[MachineId])",
              "",
              "/* var y = SUMMARIZE(filter('qv ProductMachineVisualIndexByBomVersion',",
              "  'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=\"Production\" && ",
              "  'qv ProductMachineVisualIndexByBomVersion'[BomVersion]= MAXX(FILTER(tbl,'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]=vbudget),[VMAX])  )",
              " ,'qv ProductMachineVisualIndexByBomVersion'[MachineId]) ",
              "",
              "",
              "",
              "vAR tbl = SUMMARIZE(filter('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=\"Production\"&& ",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion] ),'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],",
              "\"VMAX\",MAX(ProductWeeklyVsActual[BomVersion]))",
              "*/",
              "",
              " return",
              "",
              "// if(x in {y},1,0) ",
              "",
              "  if(INTERSECT( x , y )=BLANK() ,0 , 1)",
              "",
              "",
              ""
            ]
          },
          {
            "name": "StandardSpeedCheck",
            "expression": [
              "",
              "",
              "var machine = SELECTEDVALUE( 'qv ProductMachineVisualIndexByBomVersion'[machineid])",
              "",
              "",
              "var x = SUMMARIZE(FILTER(ALLSELECTED('qv ProductMachineVisualIndexByBomVersion'),'qv ProductMachineVisualIndexByBomVersion'[MachineId]=machine && ",
              "                                       'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] ) ,",
              "                                              'qv ProductMachineVisualIndexByBomVersion'[bomversion],'qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "                                   ,\"maxSpeed\",max('qv ProductMachineVisualIndexByBomVersion'[StandardSpeed])",
              "                                           )",
              "",
              "",
              "  var minspeed = MINX(x, [maxSpeed] )",
              "",
              "  var AverageSpeed = AVERAGEX(x,[maxSpeed])",
              " ",
              " return",
              "",
              "if( minspeed < AverageSpeed , 1 , 0)",
              "",
              "  //  1= ekhtelaf daran",
              " // 0 = mosavian"
            ]
          },
          {
            "name": "StandardSpeedMaxProductMachine",
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[StandardSpeed]), FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] )",
              "                               ",
              "                                           )"
            ]
          },
          {
            "name": "CustomizeNominalSpeedMaxProductMachine",
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed]), FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] )",
              "                               ",
              "                                           )"
            ]
          },
          {
            "name": "CatalogNominalSpeedMaxProductMachine",
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CatalogNominalSpeed]), FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] )",
              "                               ",
              "                                           )"
            ]
          },
          {
            "name": "CatalogNominalSpeedCheck",
            "expression": [
              "",
              "",
              "var machine = SELECTEDVALUE( 'qv ProductMachineVisualIndexByBomVersion'[machineid])",
              "",
              "",
              "var x = SUMMARIZE(FILTER(ALLSELECTED('qv ProductMachineVisualIndexByBomVersion'),'qv ProductMachineVisualIndexByBomVersion'[MachineId]=machine && ",
              "                                       'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] ) ,",
              "                                              'qv ProductMachineVisualIndexByBomVersion'[bomversion],'qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "                                   ,\"maxSpeed\",max('qv ProductMachineVisualIndexByBomVersion'[CatalogNominalSpeed])",
              "                                           )",
              "",
              "",
              "  var minspeed = MINX(x, [maxSpeed] )",
              "",
              "  var AverageSpeed = AVERAGEX(x,[maxSpeed])",
              " ",
              " return",
              "",
              "if( minspeed < AverageSpeed , 1 , 0)",
              "",
              "  //  1= ekhtelaf daran",
              " // 0 = mosavian"
            ]
          },
          {
            "name": "CustomizeNominalSpeedCheck",
            "expression": [
              "",
              "",
              "var machine = SELECTEDVALUE( 'qv ProductMachineVisualIndexByBomVersion'[machineid])",
              "",
              "",
              "var x = SUMMARIZE(FILTER(ALLSELECTED('qv ProductMachineVisualIndexByBomVersion'),'qv ProductMachineVisualIndexByBomVersion'[MachineId]=machine && ",
              "                                       'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] ) ,",
              "                                              'qv ProductMachineVisualIndexByBomVersion'[bomversion],'qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "                                   ,\"maxSpeed\",max('qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed])",
              "                                           )",
              "",
              "",
              "  var minspeed = MINX(x, [maxSpeed] )",
              "",
              "  var AverageSpeed = AVERAGEX(x,[maxSpeed])",
              " ",
              " return",
              "",
              "if( minspeed < AverageSpeed , 1 , 0)",
              "",
              "  //  1= ekhtelaf daran",
              " // 0 = mosavian"
            ]
          },
          {
            "name": "BatchKiloCheck",
            "expression": [
              "",
              "",
              "var machine = SELECTEDVALUE( 'qv ProductMachineVisualIndexByBomVersion'[machineid])",
              "",
              "",
              "var x = SUMMARIZE(FILTER(ALLSELECTED('qv ProductMachineVisualIndexByBomVersion'),'qv ProductMachineVisualIndexByBomVersion'[MachineId]=machine && ",
              "                                       'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] ) ,",
              "                                              'qv ProductMachineVisualIndexByBomVersion'[bomversion],'qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "                                   ,\"maxBatchKilo\",max('qv ProductMachineVisualIndexByBomVersion'[BatchKilo])",
              "                                           )",
              "",
              "",
              "  var minBatchKilo = MINX(x, [maxBatchKilo] )",
              "",
              "  var AverageBatchKilo = AVERAGEX(x,[maxBatchKilo])",
              " ",
              " return",
              "",
              "if( minBatchKilo < AverageBatchKilo , 1 , 0)",
              "",
              "  //  1= ekhtelaf daran",
              " // 0 = mosavian"
            ]
          },
          {
            "name": "BatchKiloMaxProductMachine",
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[BatchKilo]), FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] )",
              "                               ",
              "                                           )",
              ""
            ]
          },
          {
            "name": "SumMachineIdCheck",
            "expression": [
              "",
              "var x =",
              "",
              "ADDCOLUMNS(SUMMARIZE('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BomVersion],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineDscFa]),",
              " \"MachineIdCheck\",[MachineIdCheck])",
              "",
              "return sumx(x,[MachineIdCheck]) ",
              ""
            ]
          },
          {
            "name": "SumMachineIdChecktest",
            "expression": [
              "",
              "var x =",
              "",
              "ADDCOLUMNS(SUMMARIZE('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv ProductMachineVisualIndexByBomVersion'[BomVersion],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineDscFa]),",
              " \"MachineIdCheck\",[MachineIdCheck])",
              "",
              "return sumx(x,[MachineIdCheck])+0 ",
              ""
            ]
          },
          {
            "name": "MaterialCheck",
            "expression": [
              "",
              "",
              "var x = VALUES('qv BomDetailsAllVersion'[MaterialID])",
              "",
              "--var y = VALUES('qv ProductMachineVisualIndexByBomVersion'[MachineId])",
              "",
              "var y = SUMMARIZE(filter('qv BomDetailsAllVersion', 'qv BomDetailsAllVersion'[Version]=SELECTEDVALUE('qv ProductMachineVisualIndexByBomVersion'[ISLastBOMProductopn])",
              "   && 'qv BomDetailsAllVersion'[RayvarzId] =SELECTEDVALUE('qv ProductMachineVisualIndexByBomVersion'[RayvarzId]) ),'qv BomDetailsAllVersion'[MaterialID])",
              "",
              "",
              "/*",
              "vAR tbl = SUMMARIZE(filter('qv ProductMachineVisualIndexByBomVersion',",
              "'qv ProductMachineVisualIndexByBomVersion'[SelectedVersionName]=\"Production\"&& ",
              "'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion]='qv ProductMachineVisualIndexByBomVersion'[BudgetVersion] ),'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],",
              "\"VMAX\",MAX(ProductWeeklyVsActual[BomVersion]))",
              "*/",
              "",
              " return",
              "",
              "// if(x in {y},1,0) ",
              "",
              "  if(INTERSECT( x , y )=BLANK() ,0 , 1)",
              ""
            ]
          },
          {
            "name": "SumMaterialChecktest",
            "expression": [
              "",
              "var x =",
              "",
              "ADDCOLUMNS(SUMMARIZE('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv ProductMachineVisualIndexByBomVersion'[BomVersion],",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[MachineDscFa]),",
              " \"MachineIdCheck\",[MaterialCheck])",
              "",
              "return sumx(x,[MachineIdCheck])+0 "
            ]
          },
          {
            "name": "CycleTimeCheck",
            "expression": [
              "",
              "",
              "var machine = SELECTEDVALUE( 'qv ProductMachineVisualIndexByBomVersion'[machineid])",
              "",
              "",
              "var x = SUMMARIZE(FILTER(ALLSELECTED('qv ProductMachineVisualIndexByBomVersion'),'qv ProductMachineVisualIndexByBomVersion'[MachineId]=machine && ",
              "                                       'qv ProductMachineVisualIndexByBomVersion'[ProductMachineId]='qv ProductMachineVisualIndexByBomVersion'[MaxProductMachineIdInBom] ) ,",
              "                                              'qv ProductMachineVisualIndexByBomVersion'[bomversion],'qv ProductMachineVisualIndexByBomVersion'[MachineId]",
              "                                   ,\"cycletime\",max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)])",
              "                                           )",
              "",
              "",
              "  var minspeed = MINX(x, [cycletime] )",
              "",
              "  var AverageSpeed = AVERAGEX(x,[cycletime])",
              " ",
              " return",
              "",
              "if( minspeed < AverageSpeed , 1 , 0)"
            ]
          }
        ]
      },
      {
        "name": "qv MachineService",
        "columns": [
          {
            "name": "MachineServiceId",
            "dataType": "int64",
            "sourceColumn": "MachineServiceId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "ServiceTypeId",
            "dataType": "int64",
            "sourceColumn": "ServiceTypeId"
          },
          {
            "name": "ServiceTypeDescription",
            "dataType": "string",
            "sourceColumn": "ServiceTypeDescription"
          },
          {
            "name": "ServiceTime",
            "dataType": "int64",
            "sourceColumn": "ServiceTime"
          },
          {
            "name": "DurationHours",
            "dataType": "int64",
            "sourceColumn": "DurationHours"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_MachineService = Source{[Schema=\"qv\",Item=\"MachineService\"]}[Data]",
                "in",
                "    qv_MachineService"
              ]
            }
          }
        ]
      },
      {
        "name": "CD DimBaseDates",
        "columns": [
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "DateG",
            "dataType": "dateTime",
            "sourceColumn": "DateG"
          },
          {
            "name": "ShMon",
            "dataType": "int64",
            "sourceColumn": "ShMon"
          },
          {
            "name": "IeLastDayInMonth",
            "dataType": "dateTime",
            "sourceColumn": "IeLastDayInMonth"
          },
          {
            "name": "ShYear",
            "dataType": "int64",
            "sourceColumn": "ShYear"
          },
          {
            "name": "GMonthName",
            "dataType": "string",
            "sourceColumn": "GMonthName"
          },
          {
            "name": "GYear",
            "dataType": "int64",
            "sourceColumn": "GYear"
          },
          {
            "name": "ShDay",
            "dataType": "int64",
            "sourceColumn": "ShDay"
          },
          {
            "name": "ShMonthName",
            "dataType": "string",
            "sourceColumn": "ShMonthName"
          },
          {
            "name": "GDay",
            "dataType": "int64",
            "sourceColumn": "GDay"
          },
          {
            "name": "DayName",
            "dataType": "string",
            "sourceColumn": "DayName"
          },
          {
            "name": "DescWeek",
            "dataType": "string",
            "sourceColumn": "DescWeek"
          },
          {
            "name": "Shamsidays",
            "dataType": "string",
            "sourceColumn": "Shamsidays"
          },
          {
            "name": "ShiladiWeek",
            "dataType": "int64",
            "sourceColumn": "ShiladiWeek"
          },
          {
            "name": "AbidiHolidays",
            "dataType": "int64",
            "sourceColumn": "AbidiHolidays"
          },
          {
            "name": "IeYear",
            "dataType": "int64",
            "sourceColumn": "IeYear"
          },
          {
            "name": "IeMonthDesc",
            "dataType": "string",
            "sourceColumn": "IeMonthDesc"
          },
          {
            "name": "IeLastDayInMonthInt",
            "dataType": "int64",
            "sourceColumn": "IeLastDayInMonthInt"
          },
          {
            "name": "TypeOfHolidays",
            "dataType": "int64",
            "sourceColumn": "TypeOfHolidays"
          },
          {
            "name": "ShowingShMonth",
            "dataType": "string",
            "sourceColumn": "ShowingShMonth"
          },
          {
            "name": "ShMonth",
            "dataType": "string",
            "sourceColumn": "ShMonth"
          },
          {
            "name": "QuarterSh",
            "dataType": "int64",
            "sourceColumn": "QuarterSh"
          },
          {
            "name": "QuarterMi",
            "dataType": "int64",
            "sourceColumn": "QuarterMi"
          },
          {
            "name": "GMonthN",
            "dataType": "int64",
            "sourceColumn": "GMonthN"
          },
          {
            "name": "DateIDM",
            "dataType": "int64",
            "sourceColumn": "DateIDM"
          },
          {
            "type": "calculated",
            "name": "WeekDayNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('CD DimBaseDates'[DayName]=\"Saturday\",1,",
              "if('CD DimBaseDates'[DayName]=\"Sunday\",2,",
              "if('CD DimBaseDates'[DayName]=\"Monday\",3,",
              "if('CD DimBaseDates'[DayName]=\"Tuesday\",4,",
              "if('CD DimBaseDates'[DayName]=\"Wednesday\",5,",
              "if('CD DimBaseDates'[DayName]=\"Thursday\",6,",
              "if('CD DimBaseDates'[DayName]=\"Friday\",7",
              ")))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "YearDayNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var FirstDay= CALCULATE(min('CD DimBaseDates'[WeekDayNumber]),",
              "FILTER('CD DimBaseDates','CD DimBaseDates'[ShYear]=EARLIER('CD DimBaseDates'[ShYear])",
              "&& RIGHT('CD DimBaseDates'[DateId],4)=\"0101\"))-1",
              "return ",
              "RANKX(FILTER('CD DimBaseDates','CD DimBaseDates'[ShYear]=EARLIER('CD DimBaseDates'[ShYear])),'CD DimBaseDates'[DateId],,ASC,Skip)+FirstDay",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "ROUNDDOWN(DIVIDE('CD DimBaseDates'[YearDayNumber],7)-0.1,0)+1"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    CD_DimBaseDates = Source{[Schema=\"CD\",Item=\"DimBaseDates\"]}[Data]",
                "in",
                "    CD_DimBaseDates"
              ]
            }
          }
        ]
      },
      {
        "name": "qv SizepartIndex",
        "columns": [
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "RayvarzIDTo",
            "dataType": "int64",
            "sourceColumn": "RayvarzIDTo"
          },
          {
            "name": "ProductNameFaTo",
            "dataType": "string",
            "sourceColumn": "ProductNameFaTo"
          },
          {
            "name": "ProductNameEnTo",
            "dataType": "string",
            "sourceColumn": "ProductNameEnTo"
          },
          {
            "name": "RayvarzSemiID",
            "dataType": "int64",
            "sourceColumn": "RayvarzSemiID"
          },
          {
            "name": "ProductNameFaSemi",
            "dataType": "string",
            "sourceColumn": "ProductNameFaSemi"
          },
          {
            "name": "ProductNameEnSemi",
            "dataType": "string",
            "sourceColumn": "ProductNameEnSemi"
          },
          {
            "name": "RayvarzSemiIDTo",
            "dataType": "int64",
            "sourceColumn": "RayvarzSemiIDTo"
          },
          {
            "name": "ProductNameFaSemiTo",
            "dataType": "string",
            "sourceColumn": "ProductNameFaSemiTo"
          },
          {
            "name": "ProductNameEnSemiTo",
            "dataType": "string",
            "sourceColumn": "ProductNameEnSemiTo"
          },
          {
            "name": "Time",
            "dataType": "int64",
            "sourceColumn": "Time"
          },
          {
            "name": "Version",
            "dataType": "int64",
            "sourceColumn": "Version"
          },
          {
            "name": "IsValid",
            "dataType": "boolean",
            "sourceColumn": "IsValid"
          },
          {
            "name": "OperationAllocation",
            "dataType": "int64",
            "sourceColumn": "OperationAllocation"
          },
          {
            "name": "SizePartChangeId",
            "dataType": "int64",
            "sourceColumn": "SizePartChangeId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "VersionIndex",
            "dataType": "int64",
            "sourceColumn": "VersionIndex"
          },
          {
            "name": "CleanTime",
            "dataType": "int64",
            "sourceColumn": "CleanTime"
          },
          {
            "type": "calculated",
            "name": "CalSPC(min)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if ('qv SizepartIndex'[RayvarzId]='qv SizepartIndex'[RayvarzIDTo] , BLANK(), 'qv SizepartIndex'[Time])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_SizepartIndex = Source{[Schema=\"qv\",Item=\"SizepartIndex\"]}[Data]",
                "in",
                "    qv_SizepartIndex"
              ]
            }
          }
        ]
      },
      {
        "name": "qv MachineTimeOffIndex",
        "columns": [
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "StopageCode",
            "dataType": "int64",
            "sourceColumn": "StopageCode"
          },
          {
            "name": "Level4Desc",
            "dataType": "string",
            "sourceColumn": "Level4Desc"
          },
          {
            "name": "StartOff",
            "dataType": "dateTime",
            "sourceColumn": "StartOff",
            "formatString": "General Date"
          },
          {
            "name": "FinishOff",
            "dataType": "dateTime",
            "sourceColumn": "FinishOff",
            "formatString": "General Date"
          },
          {
            "name": "ShiftId",
            "dataType": "int64",
            "sourceColumn": "ShiftId"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "Duration",
            "dataType": "int64",
            "sourceColumn": "Duration"
          },
          {
            "name": "VersionOff",
            "dataType": "int64",
            "sourceColumn": "VersionOff"
          },
          {
            "name": "IsOff",
            "dataType": "boolean",
            "sourceColumn": "IsOff"
          },
          {
            "name": "IsOverTime",
            "dataType": "boolean",
            "sourceColumn": "IsOverTime"
          },
          {
            "name": "IsNightly",
            "dataType": "boolean",
            "sourceColumn": "IsNightly"
          },
          {
            "name": "BudgetVersion",
            "dataType": "int64",
            "sourceColumn": "BudgetVersion"
          },
          {
            "name": "BudgetGetDate",
            "dataType": "dateTime",
            "sourceColumn": "BudgetGetDate"
          },
          {
            "type": "calculated",
            "name": "CalRestingPerShift(min)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " if(",
              "CALCULATE(SUM('qv MachineTimeOffIndex'[Duration]),FILTER('qv MachineTimeOffIndex', 'qv MachineTimeOffIndex'[MachineId] = EARLIER('qv MachineTimeOffIndex'[MachineId]) &&",
              "'qv MachineTimeOffIndex'[ShiftId] = EARLIER('qv MachineTimeOffIndex'[ShiftId]) &&",
              "'qv MachineTimeOffIndex'[StopageCode] in{ 19010108  ,19010107,19010113,19010100} &&  // in stoppagecode baraye rest ast",
              "'qv MachineTimeOffIndex'[BudgetVersion] = EARLIER('qv MachineTimeOffIndex'[BudgetVersion])) )=BLANK(),0,",
              "CALCULATE(SUM('qv MachineTimeOffIndex'[Duration]),FILTER('qv MachineTimeOffIndex', 'qv MachineTimeOffIndex'[MachineId] = EARLIER('qv MachineTimeOffIndex'[MachineId]) &&",
              "'qv MachineTimeOffIndex'[ShiftId] = EARLIER('qv MachineTimeOffIndex'[ShiftId]) &&",
              "'qv MachineTimeOffIndex'[StopageCode] in{ 19010108  ,19010107,19010113,19010100} &&  // in stoppagecode baraye rest ast",
              "'qv MachineTimeOffIndex'[BudgetVersion] = EARLIER('qv MachineTimeOffIndex'[BudgetVersion])) ))"
            ]
          },
          {
            "type": "calculated",
            "name": "RestingLongDayShift",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(SUM('qv MachineTimeOffIndex'[Duration]),",
              "  FILTER('qv MachineTimeOffIndex',",
              "  'qv MachineTimeOffIndex'[MachineId] = EARLIER('qv MachineTimeOffIndex'[MachineId]) &&",
              "  'qv MachineTimeOffIndex'[ShiftId] = 2  &&  'qv MachineTimeOffIndex'[StopageCode]  in{ 19010108  ,19010107,19010113} &&",
              "  'qv MachineTimeOffIndex'[BudgetVersion] = EARLIER('qv MachineTimeOffIndex'[BudgetVersion])",
              "",
              "))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualStopDuration",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var v1 = DateDiff('qv MachineTimeOffIndex'[StartOff], 'qv MachineTimeOffIndex'[FinishOff], MINUTE)",
              "return",
              "if(v1>-1,v1,v1+1440) -- gahi end time < start time ast va manfi mishavad baraye hamin b andaze yek roz k 1440 min as be time payan ezafe mikonim k function befahmad roze bad shode ast"
            ]
          },
          {
            "name": "StartId",
            "dataType": "int64",
            "sourceColumn": "StartId"
          },
          {
            "name": "FinishId",
            "dataType": "int64",
            "sourceColumn": "FinishId"
          },
          {
            "name": "IsAcceptable",
            "dataType": "boolean",
            "sourceColumn": "IsAcceptable"
          },
          {
            "name": "Sort",
            "dataType": "int64",
            "sourceColumn": "Sort"
          },
          {
            "name": "StopageCodeByPass",
            "dataType": "int64",
            "sourceColumn": "StopageCodeByPass"
          },
          {
            "name": "Version",
            "dataType": "int64",
            "sourceColumn": "Version"
          },
          {
            "name": "MachineTimeOffId",
            "dataType": "int64",
            "sourceColumn": "MachineTimeOffId"
          },
          {
            "name": "BeginDate",
            "dataType": "int64",
            "sourceColumn": "BeginDate"
          },
          {
            "name": "EndDate",
            "dataType": "int64",
            "sourceColumn": "EndDate"
          },
          {
            "type": "calculated",
            "name": "StopPerMashinePerShift",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var lastversion = CALCULATE(max('qv MachineTimeOffIndex'[Version]),",
              "FILTER('qv MachineTimeOffIndex','qv MachineTimeOffIndex'[MachineId]=EARLIER('qv MachineTimeOffIndex'[MachineId])))",
              "  ",
              "var lastbudget= CALCULATE(max('qv MachineTimeOffIndex'[BudgetVersion]),",
              "FILTER('qv MachineTimeOffIndex','qv MachineTimeOffIndex'[MachineId]=EARLIER('qv MachineTimeOffIndex'[MachineId])))",
              "",
              "return ",
              "",
              "CALCULATE(sum('qv MachineTimeOffIndex'[Duration]),FILTER('qv MachineTimeOffIndex',",
              "'qv MachineTimeOffIndex'[MachineId]=EARLIER('qv MachineTimeOffIndex'[MachineId]) &&",
              "'qv MachineTimeOffIndex'[ShiftId]=EARLIER('qv MachineTimeOffIndex'[ShiftId]) &&",
              "'qv MachineTimeOffIndex'[Version]=lastversion  &&",
              "'qv MachineTimeOffIndex'[BudgetVersion]=lastbudget",
              " && 'qv MachineTimeOffIndex'[StopageCode]<>0 ))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_MachineTimeOffIndex = Source{[Schema=\"qv\",Item=\"MachineTimeOffIndex\"]}[Data]",
                "in",
                "    qv_MachineTimeOffIndex"
              ]
            }
          }
        ]
      },
      {
        "name": "qv MachineShiftAssignment",
        "columns": [
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "TargetHdrId",
            "dataType": "int64",
            "sourceColumn": "TargetHdrId"
          },
          {
            "name": "RevName",
            "dataType": "string",
            "sourceColumn": "RevName"
          },
          {
            "name": "DayTypeId",
            "dataType": "int64",
            "sourceColumn": "DayTypeId"
          },
          {
            "name": "DayType",
            "dataType": "string",
            "sourceColumn": "DayType"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "MachineCode",
            "dataType": "string",
            "sourceColumn": "MachineCode"
          },
          {
            "name": "ShiftId",
            "dataType": "int64",
            "sourceColumn": "ShiftId"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "ShiftAbr",
            "dataType": "string",
            "sourceColumn": "ShiftAbr"
          },
          {
            "name": "Count",
            "dataType": "int64",
            "sourceColumn": "Count"
          },
          {
            "name": "MachineShiftId",
            "dataType": "int64",
            "sourceColumn": "MachineShiftId"
          },
          {
            "type": "calculated",
            "name": "CalRelatedBugetVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv VersionBudget'[VersionBudgetId],'qv VersionBudget'[RevisionId],'qv MachineShiftAssignment'[TargetHdrId])"
          },
          {
            "type": "calculated",
            "name": "CalTotalRestingPerShift(min)",
            "dataType": "double",
            "isDataTypeInferred": false,
            "expression": [
              "",
              "",
              "var VRestingPerShift= ",
              "LOOKUPVALUE('qv MachineTimeOffIndex'[CalRestingPerShift(min)] , 'qv MachineTimeOffIndex'[MachineId],",
              " 'qv MachineShiftAssignment'[MachineId] , 'qv MachineTimeOffIndex'[ShiftId],'qv MachineShiftAssignment'[ShiftId],",
              " 'qv MachineTimeOffIndex'[BudgetVersion],849)   //'qv MachineShiftAssignment'[CalRelatedBugetVersion]",
              "",
              "return",
              "",
              "   'qv MachineShiftAssignment'[Count] * VRestingPerShift",
              "",
              "   /* CALCULATE(SUMX('qv MachineShiftAssignment', 'qv MachineShiftAssignment'[Count] * VRestingPerShift) ,  ",
              "       FILTER('qv MachineShiftAssignment', 'qv MachineShiftAssignment'[Month]=EARLIER('qv MachineShiftAssignment'[Month]) && ",
              "            'qv MachineShiftAssignment'[MachineId] = EARLIER('qv MachineShiftAssignment'[MachineId]) &&",
              "             'qv MachineShiftAssignment'[CalRelatedBugetVersion] = EARLIER('qv MachineShiftAssignment'[CalRelatedBugetVersion]))) */",
              "",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_MachineShiftAssignment = Source{[Schema=\"qv\",Item=\"MachineShiftAssignment\"]}[Data]",
                "in",
                "    qv_MachineShiftAssignment"
              ]
            }
          }
        ]
      },
      {
        "name": "qv PerformanceReport",
        "columns": [
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "SubBacthNo",
            "dataType": "int64",
            "sourceColumn": "SubBacthNo"
          },
          {
            "name": "TotalOutput",
            "dataType": "double",
            "sourceColumn": "TotalOutput"
          },
          {
            "name": "TotalReject",
            "dataType": "double",
            "sourceColumn": "TotalReject"
          },
          {
            "name": "TotalRework",
            "dataType": "double",
            "sourceColumn": "TotalRework"
          },
          {
            "name": "RemarkOld",
            "dataType": "string",
            "sourceColumn": "RemarkOld"
          },
          {
            "name": "DateWeeklyPlan",
            "dataType": "int64",
            "sourceColumn": "DateWeeklyPlan"
          },
          {
            "name": "FinishDate",
            "dataType": "int64",
            "sourceColumn": "FinishDate"
          },
          {
            "name": "Status",
            "dataType": "string",
            "sourceColumn": "Status"
          },
          {
            "name": "DurationHdr",
            "dataType": "int64",
            "sourceColumn": "DurationHdr"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "DeliveryToTheWarehouseQuarantine",
            "dataType": "double",
            "sourceColumn": "DeliveryToTheWarehouseQuarantine"
          },
          {
            "name": "ApprovedByQuarantine",
            "dataType": "double",
            "sourceColumn": "ApprovedByQuarantine"
          },
          {
            "name": "WeeklyPlanId",
            "dataType": "int64",
            "sourceColumn": "WeeklyPlanId"
          },
          {
            "name": "ProcessID",
            "dataType": "int64",
            "sourceColumn": "ProcessID"
          },
          {
            "name": "TotalInput",
            "dataType": "double",
            "sourceColumn": "TotalInput"
          },
          {
            "name": "TotalWeight",
            "dataType": "double",
            "sourceColumn": "TotalWeight"
          },
          {
            "name": "AvgSpeed",
            "dataType": "int64",
            "sourceColumn": "AvgSpeed"
          },
          {
            "name": "OperatorCount",
            "dataType": "int64",
            "sourceColumn": "OperatorCount"
          },
          {
            "name": "DailyProductionHdrId",
            "dataType": "int64",
            "sourceColumn": "DailyProductionHdrId"
          },
          {
            "name": "DescWeek",
            "dataType": "string",
            "sourceColumn": "DescWeek"
          },
          {
            "name": "MiWeekOfyear",
            "dataType": "int64",
            "sourceColumn": "MiWeekOfyear"
          },
          {
            "name": "MonthDesc",
            "dataType": "string",
            "sourceColumn": "MonthDesc"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "Acceptable",
            "dataType": "int64",
            "sourceColumn": "Acceptable"
          },
          {
            "name": "NotAcceptable",
            "dataType": "int64",
            "sourceColumn": "NotAcceptable"
          },
          {
            "name": "DurationStopOverlay",
            "dataType": "int64",
            "sourceColumn": "DurationStopOverlay"
          },
          {
            "name": "NetTime",
            "dataType": "int64",
            "sourceColumn": "NetTime"
          },
          {
            "name": "shiftId",
            "dataType": "int64",
            "sourceColumn": "shiftId"
          },
          {
            "name": "UnitName",
            "dataType": "string",
            "sourceColumn": "UnitName"
          },
          {
            "name": "ActualStartTime",
            "dataType": "string",
            "sourceColumn": "ActualStartTime",
            "formatString": "HH:mm:ss",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeCustom\"><DateTimes><DateTime LCID=\"1033\" Group=\"LongTime\" FormatString=\"HH:mm:ss\" /></DateTimes></Format>"
              }
            ]
          },
          {
            "name": "ActualFinishTime",
            "dataType": "string",
            "sourceColumn": "ActualFinishTime",
            "formatString": "HH:mm:ss",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeCustom\"><DateTimes><DateTime LCID=\"1033\" Group=\"LongTime\" FormatString=\"HH:mm:ss\" /></DateTimes></Format>"
              }
            ]
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "Approved1",
            "dataType": "boolean",
            "sourceColumn": "Approved1"
          },
          {
            "name": "Approved2",
            "dataType": "boolean",
            "sourceColumn": "Approved2"
          },
          {
            "name": "Approved3",
            "dataType": "boolean",
            "sourceColumn": "Approved3"
          },
          {
            "name": "Approved4",
            "dataType": "boolean",
            "sourceColumn": "Approved4"
          },
          {
            "name": "Typeprog",
            "dataType": "string",
            "sourceColumn": "Typeprog"
          },
          {
            "name": "MachineID",
            "dataType": "int64",
            "sourceColumn": "MachineID"
          },
          {
            "name": "PlanTypeId",
            "dataType": "int64",
            "sourceColumn": "PlanTypeId"
          },
          {
            "name": "MinuteId",
            "dataType": "int64",
            "sourceColumn": "MinuteId"
          },
          {
            "name": "ShYear",
            "dataType": "int64",
            "sourceColumn": "ShYear"
          },
          {
            "name": "ShWeek",
            "dataType": "int64",
            "sourceColumn": "ShWeek"
          },
          {
            "name": "ShMonth",
            "dataType": "int64",
            "sourceColumn": "ShMonth"
          },
          {
            "name": "ShMonthDesc",
            "dataType": "string",
            "sourceColumn": "ShMonthDesc"
          },
          {
            "name": "CustomizeSpeedT",
            "dataType": "double",
            "sourceColumn": "CustomizeSpeedT"
          },
          {
            "name": "StandardSpeedT",
            "dataType": "double",
            "sourceColumn": "StandardSpeedT"
          },
          {
            "name": "DownTimeSupply",
            "dataType": "double",
            "sourceColumn": "DownTimeSupply"
          },
          {
            "name": "ProductMachineID",
            "dataType": "int64",
            "sourceColumn": "ProductMachineID"
          },
          {
            "name": "ActualSpeed",
            "dataType": "int64",
            "sourceColumn": "ActualSpeed"
          },
          {
            "name": "Oee",
            "dataType": "double",
            "sourceColumn": "Oee"
          },
          {
            "name": "SpeedPlan",
            "dataType": "int64",
            "sourceColumn": "SpeedPlan"
          },
          {
            "name": "TotalProductionUnit",
            "dataType": "double",
            "sourceColumn": "TotalProductionUnit"
          },
          {
            "name": "TotalProductionBox",
            "dataType": "double",
            "sourceColumn": "TotalProductionBox"
          },
          {
            "name": "TotalProductionVazn",
            "dataType": "double",
            "sourceColumn": "TotalProductionVazn"
          },
          {
            "name": "SemiRayvarzID",
            "dataType": "int64",
            "sourceColumn": "SemiRayvarzID"
          },
          {
            "name": "SemiProductNameFa",
            "dataType": "string",
            "sourceColumn": "SemiProductNameFa"
          },
          {
            "name": "OperatorNameByDailyProductionHdrID",
            "dataType": "string",
            "sourceColumn": "OperatorNameByDailyProductionHdrID"
          },
          {
            "name": "ShMon",
            "dataType": "int64",
            "sourceColumn": "ShMon"
          },
          {
            "name": "BoxToUnit",
            "dataType": "double",
            "sourceColumn": "BoxToUnit"
          },
          {
            "name": "NumberInBlister",
            "dataType": "double",
            "sourceColumn": "NumberInBlister"
          },
          {
            "name": "RayvarzCenter",
            "dataType": "int64",
            "sourceColumn": "RayvarzCenter"
          },
          {
            "name": "PGeneralFaAbr",
            "dataType": "string",
            "sourceColumn": "PGeneralFaAbr"
          },
          {
            "name": "MSiftID",
            "dataType": "int64",
            "sourceColumn": "MSiftID"
          },
          {
            "name": "TUnitDay",
            "dataType": "double",
            "sourceColumn": "TUnitDay"
          },
          {
            "name": "TBoxDay",
            "dataType": "double",
            "sourceColumn": "TBoxDay"
          },
          {
            "name": "TKiloDay",
            "dataType": "double",
            "sourceColumn": "TKiloDay"
          },
          {
            "name": "TUnitNight",
            "dataType": "double",
            "sourceColumn": "TUnitNight"
          },
          {
            "name": "TBoxNight",
            "dataType": "double",
            "sourceColumn": "TBoxNight"
          },
          {
            "name": "TKiloNight",
            "dataType": "double",
            "sourceColumn": "TKiloNight"
          },
          {
            "name": "GetDate",
            "dataType": "dateTime",
            "sourceColumn": "GetDate"
          },
          {
            "name": "IsFinishPlan",
            "dataType": "boolean",
            "sourceColumn": "IsFinishPlan"
          },
          {
            "name": "WeightedAverage",
            "dataType": "double",
            "sourceColumn": "WeightedAverage"
          },
          {
            "name": "TotalInputKilo",
            "dataType": "double",
            "sourceColumn": "TotalInputKilo"
          },
          {
            "name": "TotalInputBox",
            "dataType": "double",
            "sourceColumn": "TotalInputBox"
          },
          {
            "name": "TotalRejectKilo",
            "dataType": "double",
            "sourceColumn": "TotalRejectKilo"
          },
          {
            "name": "TotalRejectBox",
            "dataType": "double",
            "sourceColumn": "TotalRejectBox"
          },
          {
            "name": "ielastdayinmonth",
            "dataType": "dateTime",
            "sourceColumn": "ielastdayinmonth"
          },
          {
            "name": "Remark",
            "dataType": "string",
            "sourceColumn": "Remark"
          },
          {
            "name": "ReworkId",
            "dataType": "int64",
            "sourceColumn": "ReworkId"
          },
          {
            "name": "StartDate",
            "dataType": "dateTime",
            "sourceColumn": "StartDate"
          },
          {
            "name": "ExpireDate",
            "dataType": "dateTime",
            "sourceColumn": "ExpireDate"
          },
          {
            "type": "calculated",
            "name": "CalOrderBoxCount",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('ray aaRep33'[OrderQty]),FILTER('ray aaRep33','ray aaRep33'[Product]='qv PerformanceReport'[RayvarzId] ",
              "&& 'ray aaRep33'[BatchNo]='qv PerformanceReport'[BatchNo]))",
              "",
              "",
              "* CALCULATE(MAX('ray aaRep33'[BatchRatio]),FILTER('ray aaRep33','ray aaRep33'[Product]='qv PerformanceReport'[RayvarzId] ",
              "  && 'ray aaRep33'[BatchNo]='qv PerformanceReport'[BatchNo]))",
              "  ",
              "//tedad box haii k dar vagheat mikhad bezane"
            ]
          },
          {
            "type": "calculated",
            "name": "CalStandardBatchBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('ray aaRep33'[OrderQty]),FILTER('ray aaRep33','ray aaRep33'[Product]='qv PerformanceReport'[RayvarzId] ",
              "&& 'ray aaRep33'[BatchNo]='qv PerformanceReport'[BatchNo]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalActualTotalTimePerBox(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE( ('qv PerformanceReport'[NetTimePerProduct(h)]) , CALCULATE(sum('qv PerformanceReport'[TotalProductionBox]) , FILTER('qv PerformanceReport' , 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])  && 'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) && 'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon])    )))"
          },
          {
            "type": "calculated",
            "name": "MonthRank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RANKX('qv PerformanceReport','qv PerformanceReport'[ShMon],,ASC,Dense)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ISValidSPCForAvg",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv PerformanceReport'[MachineID] in {19,58,295} && 'qv PerformanceReport'[PlanTypeId]=28 && ",
              "    'qv PerformanceReport'[DurationHdr]>=90 &&  'qv PerformanceReport'[DurationHdr]<=360,1,  // counter ",
              "",
              "if('qv PerformanceReport'[MachineID] in {31,32,255} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // syrup tank1 ,2 ,3",
              "    'qv PerformanceReport'[DurationHdr]<50 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {176,276} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // roller compactor 1,2",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=720 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {21} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // sharbat porkone bosch",
              "    'qv PerformanceReport'[DurationHdr]>=40 &&  'qv PerformanceReport'[DurationHdr]<=240 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {38,175,231} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // sijong1,2,dayuzna",
              "    'qv PerformanceReport'[DurationHdr]>=100 &&  'qv PerformanceReport'[DurationHdr]<=300 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {11,13,123,56,10} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // blister4,6,10,9,3",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=180 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {12,22,14} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // blister5,8,7",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=240 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {248,249,250} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // blister1,2,11",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=120 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {129,118,117,64,244,174,41} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // sf170-1,2,3-namdar2-namdar10,porkhatar,sf130,",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=155 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {33,34,35,36} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // khoshk kon sinidar1,2,3,4",
              "    'qv PerformanceReport'[DurationHdr]>=145 &&  'qv PerformanceReport'[DurationHdr]<=175 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {37} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // khoshk kon gea",
              "    'qv PerformanceReport'[DurationHdr]>=115 &&  'qv PerformanceReport'[DurationHdr]<=180 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {44} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // khoshk kon hutlin",
              "    'qv PerformanceReport'[DurationHdr]>=120 &&  'qv PerformanceReport'[DurationHdr]<=150 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {232} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // khoshk kon dayuzna",
              "    'qv PerformanceReport'[DurationHdr]>=20 &&  'qv PerformanceReport'[DurationHdr]<=120 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {173 ,246} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press 8sonbe kambert , press 26 kilian",
              "    'qv PerformanceReport'[DurationHdr]>=180 &&  'qv PerformanceReport'[DurationHdr]<=360 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {122} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press manesti2",
              "    'qv PerformanceReport'[DurationHdr]>=90 &&  'qv PerformanceReport'[DurationHdr]<=180 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {1} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press manesti1",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=180 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {5,3,293} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press 32 kilian ,  press 35 bb4 - kilian 51 ",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=360 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {2,4} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press 36 sejong ,  press 65 korsh",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&  'qv PerformanceReport'[DurationHdr]<=480 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {7} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press 51 sejong",
              "    'qv PerformanceReport'[DurationHdr]>=90 &&  'qv PerformanceReport'[DurationHdr]<=1440 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {6} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // press 65 sejong ",
              "    'qv PerformanceReport'[DurationHdr]>=240 &&  'qv PerformanceReport'[DurationHdr]<=480 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {17} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // capfilling bosch",
              "    'qv PerformanceReport'[DurationHdr]>=300 &&  'qv PerformanceReport'[DurationHdr]<=600 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {15} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // capfilling sejong sf100",
              "    'qv PerformanceReport'[DurationHdr]>=180 &&  'qv PerformanceReport'[DurationHdr]<=300 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {18} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // capfilling sejong sf135",
              "    'qv PerformanceReport'[DurationHdr]>=60 &&   'qv PerformanceReport'[DurationHdr]<=300 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {16,205} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // capfilling pache1,2",
              "    'qv PerformanceReport'[DurationHdr]>=90 &&   'qv PerformanceReport'[DurationHdr]<=330 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {247} && 'qv PerformanceReport'[PlanTypeId]=28 &&  // capfilling planta 200",
              "    'qv PerformanceReport'[DurationHdr]>=220 &&  'qv PerformanceReport'[DurationHdr]<=720 ,1,",
              "",
              "if('qv PerformanceReport'[MachineID] in {125,51,166,294,40} && 'qv PerformanceReport'[PlanTypeId]=28 &&    // Blender gmp- blender2afzardeghat-blenderbohl-blenderglatt-manesty ",
              "    'qv PerformanceReport'[DurationHdr]>=90 &&  'qv PerformanceReport'[DurationHdr]<=600,1, 0",
              "",
              "",
              "",
              "))))))))))))))))))))))))))"
            ]
          },
          {
            "name": "BomVersion",
            "dataType": "int64",
            "sourceColumn": "BomVersion"
          },
          {
            "type": "calculated",
            "name": "RayvarzIdText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "'qv PerformanceReport'[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "ActualTotalTimePerProduct(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv PerformanceReport'[NetTimePerProduct(h)]+'qv PerformanceReport'[SahmeStopageMachinePerProduct(h)]+'qv PerformanceReport'[ProductStopagePerProduct(h)]"
          },
          {
            "type": "calculated",
            "name": "CountBatchNoPerProduct",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(SUMMARIZE(FILTER('qv PerformanceReport', 'qv PerformanceReport'[PlanTypeId]=26 &&",
              "  'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])   &&",
              " 'qv PerformanceReport'[rayvarzid]=EARLIER('qv PerformanceReport'[rayvarzid]) &&  ",
              "  'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) && 'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion]) ),",
              "           'qv PerformanceReport'[BatchNo]))",
              "",
              "// 'qv PerformanceReport'[MachineID],'qv PerformanceReport'[rayvarzid] , 'qv PerformanceReport'[ShMon],"
            ]
          },
          {
            "type": "calculated",
            "name": "ActualTotalTimePerRayPerMonthPerMachine",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "VAR X = ",
              "SUMMARIZE('qv PerformanceReport','QV PerformanceReport'[RayvarzId],'qv PerformanceReport'[MachineID],'qv PerformanceReport'[ShMon],'qv PerformanceReport'[BomVersion]",
              ",\"FF\",MAX('qv PerformanceReport'[ActualTotalTimePerProduct(h)]))",
              "",
              "",
              "RETURN",
              " ",
              "SUMX(FILTER(X,'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])",
              " && 'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) && ",
              "'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])),[FF])"
            ]
          },
          {
            "type": "calculated",
            "name": "MiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE( max( 'CD DimBaseDates'[GYear]), FILTER('CD DimBaseDates', 'CD DimBaseDates'[ShMon]='qv PerformanceReport'[ShMon]))"
          },
          {
            "type": "calculated",
            "name": "NetTimePerProduct(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "  if('qv PerformanceReport'[PlanTypeId]=26 ,",
              "   ",
              "   CALCULATE(SUM('qv PerformanceReport'[NetTime]),",
              "    FILTER('qv PerformanceReport', 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])&&",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])&&",
              "     'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon] ) &&",
              "      'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion] ) && 'qv PerformanceReport'[PlanTypeId]=26",
              "",
              "",
              "",
              "))/60",
              "",
              ", 0)",
              "  ",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CalSahmeNetTimePerProduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " if('qv PerformanceReport'[PlanTypeId]=26 ,",
              "   DIVIDE(",
              "   CALCULATE( max('qv PerformanceReport'[NetTimePerProduct(h)]),",
              "    FILTER('qv PerformanceReport', 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])&&",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])&&",
              "     'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon] ) && 'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion] ) ",
              "",
              ")) ",
              "",
              " ,",
              "     CALCULATE(max ('qv PerformanceReport'[NetTimePerMachinePerMonth(h)]) , FILTER('qv PerformanceReport' ,",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) &&",
              "    'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) ",
              "       && 'qv PerformanceReport'[PlanTypeId]=26 ))) ,0) ",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "NetTimePerMachinePerMonth(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "CALCULATE(sumx( SUMMARIZE('qv PerformanceReport' , ",
              "                           'qv PerformanceReport'[RayvarzId] , ",
              "                            'qv PerformanceReport'[MachineID] , ",
              "                             'qv PerformanceReport'[ShMon] , ",
              "                              'qv PerformanceReport'[BomVersion],",
              "                              'qv PerformanceReport'[NetTimePerProduct(h)]),'qv PerformanceReport'[NetTimePerProduct(h)]) ,",
              "FILTER('qv PerformanceReport',",
              "'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) &&  'qv PerformanceReport'[ShMon] =EARLIER('qv PerformanceReport'[ShMon])",
              "    &&  'qv PerformanceReport'[PlanTypeId]=26",
              "",
              "",
              "))",
              "                    ",
              "",
              "",
              "       "
            ]
          },
          {
            "type": "calculated",
            "name": "BatchBoxPerProductPerMonthPerMachine",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "CALCULATE( SUM('qv PerformanceReport'[TotalProductionBox]) ,  FILTER('qv PerformanceReport',",
              " 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) ",
              "  && 'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) && ",
              " 'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) &&  ",
              "'qv PerformanceReport'[BatchNo]=EARLIER('qv PerformanceReport'[BatchNo]) &&",
              "",
              " 'qv PerformanceReport'[PlanTypeId]=26 ))",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalStopageMachinePerMonth(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "vAR X = CONCATENATE(\"13\",'qv PerformanceReport'[ShMon])",
              "",
              "VAR RIGHTX = VALUE(RIGHT(X,6))",
              "",
              "RETURN ",
              "",
              "CALCULATE(max('qv StopReport'[TotalStopageMachinePerMonth(min)]) , FILTER('qv StopReport','qv StopReport'[MachineID]='qv PerformanceReport'[MachineID] && 'qv StopReport'[ShMon] =  RIGHTX  ))/60"
            ]
          },
          {
            "type": "calculated",
            "name": "SahmeStopageMachinePerProduct(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv PerformanceReport'[TotalStopageMachinePerMonth(h)]*'qv PerformanceReport'[CalSahmeNetTimePerProduct]"
          },
          {
            "type": "calculated",
            "name": "SahmeStopageMachinePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv PerformanceReport'[SahmeStopageMachinePerProduct(h)]*'qv PerformanceReport'[SahmeNetTimePerBatch]"
          },
          {
            "type": "calculated",
            "name": "NetTimePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  if('qv PerformanceReport'[PlanTypeId]=26 ,",
              "   ",
              "   CALCULATE(SUM('qv PerformanceReport'[NetTime]),",
              "    FILTER('qv PerformanceReport', 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])&&",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])&&",
              "     'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon] ) && 'qv PerformanceReport'[BatchNo]=EARLIER('qv PerformanceReport'[BatchNo] ) && ",
              "      'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion] ) && 'qv PerformanceReport'[PlanTypeId]=26",
              "",
              "",
              "",
              "))/60",
              "",
              ", 0)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProductStopagePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "vAR X = CONCATENATE(\"13\",'qv PerformanceReport'[ShMon])",
              "",
              "VAR RIGHTX =VALUE( RIGHT(X,6))",
              "",
              "RETURN ",
              "if('qv PerformanceReport'[PlanTypeId]=26,",
              "CALCULATE( sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport','qv StopReport'[MachineID]='qv PerformanceReport'[MachineID] && 'qv StopReport'[ShMon] =  RIGHTX  &&  'qv StopReport'[RayvarzId]='qv PerformanceReport'[RayvarzId]  &&",
              "  'qv StopReport'[BatchNo]='qv PerformanceReport'[BatchNo] && 'qv StopReport'[StoppageTypeId] in {19010119,9010205,15110009,15110005,14150204,14150100,14150101,15110011,14050107,14150208,14150202",
              ",13040200,14150206,14050105,14150210,15110014,15110013,14150205,16060400,16071000,19010044,20030000,17090000,14050100,15110007,19010125,15110006,14130102,19010203,14150203,21000000,14050104,19010202",
              ",14050103,19010045,19010102,11030000,15110008,14150209,21010001,15110010,16050301,16070700,16070300,19010124,16070100,16070200,11070200,19010005,20030001,19010038,14150207,19010121,19010040,16070400,19010000",
              ",19010025,15110002,19010204,19000202,19000109,19010103,14050101,11070000,19010026,14050109,11060101,11060302,19010037,15110004,19010200,19000001,11060300,19000104,19010002,17060300,19000108,15110003,14150200",
              ",16050200,14170001,16050400,13090200,15110001,19010201,14140100,14150201,13080000,19000000,20030002,19000110,17120203,17120200,16060500,20030004,15110000,14130101,11080000,19000111,19000301,11060100,19000204",
              ",11070101,19000106,19000102,19000200,17080000,17090600,19000105,21010300,13060000,14150213,14050106,14000900,14000907,19010027,11060401,17060500,16050700,16071001,19000205,19000206,20040301,19010052,19010057",
              ",19010041,14150211,19010048,19010060,19010207,19010054,19010053,17080100,19010049,19010035,17120201,19010051,19010050,19010061,16050600,19010064,14050102,19010062,13080002,21010202,19010055,19010056,20050000",
              ",19010068,14180001,11120204,16050302,17090500,11070002,14150212,21010204,14050108,11060400,19000303,19010208,14050111,19000103,19010209,17090001,16060401,16060402,19010073,14130100,19010082,17080800,17090002",
              ",13050400,16071101,16090000,19010084,19010085,16090001,17060000,19000403,20030003,11060000,19000520,11120201,19010086,19000402,19010234,11120207,13040201,20030005,17120207,17120208,16070000,19010238,14050112",
              ",10080000,19010135,19000100,17100000,11110000,13080001,19000400,19000401,15120014,15120013,12000000,14150401,10080003,13040004,19000112,11120202,19010029}  ))/60 ",
              "",
              ")",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProductStopagePerProduct(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  if('qv PerformanceReport'[PlanTypeId]=26 ,",
              "   ",
              "   CALCULATE(sumx(SUMMARIZE('qv PerformanceReport','qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[MachineID],",
              "                            'qv PerformanceReport'[ShMon],'qv PerformanceReport'[BomVersion],'qv PerformanceReport'[BatchNo]",
              "                        ,'qv PerformanceReport'[ProductStopagePerBatch(h)]),'qv PerformanceReport'[ProductStopagePerBatch(h)])",
              "                           ,",
              "",
              "FILTER('qv PerformanceReport','qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) && 'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) ",
              "                            && 'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) && 'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion])",
              "                            &&  'qv PerformanceReport'[PlanTypeId]=26))",
              "  ",
              "",
              ", 0)",
              "  "
            ]
          },
          {
            "type": "calculated",
            "name": "TotalTimePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'qv PerformanceReport'[NetTimePerBatch(h)]+'qv PerformanceReport'[ProductStopagePerBatch(h)]+'qv PerformanceReport'[SahmeStopageMachinePerBatch(h)]"
          },
          {
            "type": "calculated",
            "name": "SahmeNetTimePerBatch",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " if('qv PerformanceReport'[PlanTypeId]=26 ,",
              "   DIVIDE(",
              "   CALCULATE( max('qv PerformanceReport'[NetTimePerBatch(h)]),",
              "    FILTER('qv PerformanceReport', 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId])&&",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])&& 'qv PerformanceReport'[BatchNo]=EARLIER('qv PerformanceReport'[BatchNo]) &&",
              "     'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon] ) && 'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion] ) ",
              "",
              ")) ",
              "",
              " ,",
              "     CALCULATE(max('qv PerformanceReport'[NetTimePerProduct(h)]) , FILTER('qv PerformanceReport' ,",
              "    'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID]) && 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) &&",
              "    'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) && 'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion])",
              "       && 'qv PerformanceReport'[PlanTypeId]=26 ))) ,0) ",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "CountBatchNo-Bom",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(SUMMARIZE(FILTER('qv PerformanceReport', 'qv PerformanceReport'[PlanTypeId]=26 &&",
              "  'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])   &&",
              " 'qv PerformanceReport'[rayvarzid]=EARLIER('qv PerformanceReport'[rayvarzid]) &&  ",
              "  'qv PerformanceReport'[ShMon]=EARLIER('qv PerformanceReport'[ShMon]) ),",
              "           'qv PerformanceReport'[BatchNo]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],'qv PerformanceReport'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],'qv PerformanceReport'[FinishDate],",
              "'pbi BaseDate'[ShiladiYear],'qv PerformanceReport'[ShiladiYear])",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "PlannedStpPerBatch(Resting)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  CALCULATE(sum('qv StopReport'[DurationStop]),",
              "        FILTER('qv StopReport','qv StopReport'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              "                                && 'qv StopReport'[BatchNo]='qv PerformanceReport'[BatchNo]",
              "                                && 'qv StopReport'[MachineID]='qv PerformanceReport'[MachineID]",
              "                                && 'qv StopReport'[FinishDate]='qv PerformanceReport'[FinishDate] ",
              "                                && 'qv StopReport'[AcceptableType]=\"PlannedSTP\" ",
              "                                && 'qv StopReport'[ResponsibleLvl1]=\"Resting\" ",
              "                                && 'qv StopReport'[StoppageTypeId]<>19010119  ",
              "                                && 'qv StopReport'[StoppageTypeId]<> 19010118",
              "  ",
              "                                && 'qv PerformanceReport'[StartTimeNew]<='qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>'qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[StartTimeNew]<'qv StopReport'[EndTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>='qv StopReport'[EndTimeNew]",
              "",
              "-- taviz seri && taviz mahsol",
              " )) ",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "UnplannedStpPerBatch-DownTime",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  CALCULATE(sum('qv StopReport'[DurationStop]),",
              "        FILTER('qv StopReport','qv StopReport'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              "                                && 'qv StopReport'[BatchNo]='qv PerformanceReport'[BatchNo]",
              "                                && 'qv StopReport'[MachineID]='qv PerformanceReport'[MachineID]",
              "                               && 'qv StopReport'[FinishDate]='qv PerformanceReport'[FinishDate] ",
              "                                && 'qv StopReport'[AcceptableType]=\"DownTime\"",
              "                                && 'qv StopReport'[StoppageTypeId]<>19010119  ",
              "                                && 'qv StopReport'[StoppageTypeId]<> 19010118",
              "  ",
              "                                && 'qv PerformanceReport'[StartTimeNew]<='qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>='qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[StartTimeNew]<='qv StopReport'[EndTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>='qv StopReport'[EndTimeNew]",
              "",
              "-- taviz seri && taviz mahsol",
              " )) ",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'qv PerformanceReport'[FinishDate])"
          },
          {
            "type": "calculated",
            "name": "NextFinishDay",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var rnk=CALCULATE(min('pbi basedate'[daterank]),",
              "FILTER('pbi basedate','pbi basedate'[DateId]='qv PerformanceReport'[finishdate]))",
              "return",
              " if(DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualFinishTime],MINUTE)<420 &&",
              "    DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualFinishTime],MINUTE)>0 ",
              "  -- && 'qv PerformanceReport'[shiftId]=3",
              ", CALCULATE(min('pbi basedate'[DateId]), filter('pbi basedate','pbi basedate'[daterank]=rnk+1)),",
              " 'qv PerformanceReport'[finishdate])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DateDiffFinish",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " right(CONCATENATE(\"000\",DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualFinishTime],MINUTE)),4)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DateDiffStart",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " right(CONCATENATE(\"000\",DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualStartTime],MINUTE)),4)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "StartTimeNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var rnk=CALCULATE(min('pbi basedate'[daterank]),",
              "FILTER('pbi basedate','pbi basedate'[DateId]='qv PerformanceReport'[finishdate]))",
              "return",
              " if( DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualStartTime],MINUTE)<420 &&",
              "     DATEDIFF(\"00:00\",'qv PerformanceReport'[ActualStartTime],MINUTE)>0",
              "   -- && 'qv PerformanceReport'[shiftId]=3",
              "    , CALCULATE(min('pbi basedate'[DateId]), filter('pbi basedate','pbi basedate'[daterank]=rnk+1)),",
              "    'qv PerformanceReport'[finishdate])",
              "    &'qv PerformanceReport'[DateDiffStart]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "EndTimeNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " 'qv PerformanceReport'[NextFinishDay] & 'qv PerformanceReport'[DateDiffFinish]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "PlannedStp<>Resting",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  CALCULATE(sum('qv StopReport'[DurationStop]),",
              "        FILTER('qv StopReport','qv StopReport'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              "                                && 'qv StopReport'[BatchNo]='qv PerformanceReport'[BatchNo]",
              "                                && 'qv StopReport'[MachineID]='qv PerformanceReport'[MachineID]",
              "                                && 'qv StopReport'[FinishDate]='qv PerformanceReport'[FinishDate] ",
              "                                && 'qv StopReport'[AcceptableType]=\"PlannedSTP\" ",
              "                                && 'qv StopReport'[ResponsibleLvl1]<>\"Resting\"  ",
              "                                && 'qv StopReport'[StoppageTypeId]<>19010119  ",
              "                                && 'qv StopReport'[StoppageTypeId]<> 19010118",
              "  ",
              "                                && 'qv PerformanceReport'[StartTimeNew]<='qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>'qv StopReport'[StartTimeNew]",
              "                                && 'qv PerformanceReport'[StartTimeNew]<'qv StopReport'[EndTimeNew]",
              "                                && 'qv PerformanceReport'[EndTimeNew]>='qv StopReport'[EndTimeNew]",
              "",
              "-- taviz seri && taviz mahsol",
              " )) ",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CenterTypeId",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductionCenterIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'qv PerformanceReport'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "Price",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmaxprice = CALCULATE(max('pbi Price'[PriceId]),FILTER('pbi Price','pbi Price'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              " && 'pbi Price'[ShamsiSDate]<='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[FinishDate]<='pbi Price'[FinalFDate] ",
              " ))",
              "",
              "return ",
              "",
              "if(",
              "CALCULATE(max('pbi Price'[FaPrice]),FILTER('pbi Price','pbi Price'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              " && 'pbi Price'[ShamsiSDate]<='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[FinishDate]<='pbi Price'[FinalFDate] ",
              "&& 'pbi Price'[isActual]=TRUE() )) <> BLANK()",
              " ,",
              "CALCULATE(max('pbi Price'[FaPrice]),FILTER('pbi Price','pbi Price'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              " && 'pbi Price'[ShamsiSDate]<='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[FinishDate]<='pbi Price'[FinalFDate] ",
              "&& 'pbi Price'[isActual]=TRUE() ))",
              ",",
              "",
              "CALCULATE(max('pbi Price'[FaPrice]),FILTER('pbi Price','pbi Price'[RayvarzId]='qv PerformanceReport'[RayvarzId]",
              " && 'pbi Price'[ShamsiSDate]<='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[FinishDate]<='pbi Price'[FinalFDate] ",
              "&& 'pbi Price'[PriceId]=vmaxprice ))",
              "",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RemarkNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if('qv PerformanceReport'[PlanTypeId]=29,'qv PerformanceReport'[RemarkOld],'qv PerformanceReport'[Remark])"
          },
          {
            "type": "calculated",
            "name": "ExceptionBatch",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv PerformanceReport'[BatchNo] in {\"2301001\",\"2301002\",\"2301003\",\"2301004\",\"2301005\",\"2301006\",\"2301007\",\"2301008\",\"2301009\",\"2301010\",\"11401\",\"11402\",",
              "\"21401\",\"21402\"}",
              "&& 'qv PerformanceReport'[PlanTypeId]=26 &&  'qv PerformanceReport'[ShMonth]=5  && 'qv PerformanceReport'[ShYear]=1402 &&",
              " 'qv PerformanceReport'[SiteType]=\"Abidi\" ,0 , 1)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewAvailability",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[AVAI%]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv PerformanceReport'[RayvarzId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv PerformanceReport'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv PerformanceReport'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "Productivity",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[Productivity]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv PerformanceReport'[RayvarzId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv PerformanceReport'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv PerformanceReport'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "Quality",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[Quality]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv PerformanceReport'[RayvarzId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv PerformanceReport'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv PerformanceReport'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "StanOEE",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv PerformanceReport'[Quality])*max('qv PerformanceReport'[NewAvailability])*max('qv PerformanceReport'[Productivity]),",
              " FILTER('qv PerformanceReport','qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) &&",
              "'qv PerformanceReport'[MachineId]=EARLIER('qv PerformanceReport'[MachineId]) &&",
              "'qv PerformanceReport'[BomVersion]=EARLIER('qv PerformanceReport'[BomVersion]) && 'qv PerformanceReport'[ShMonth]=EARLIER('qv PerformanceReport'[ShMonth]))) /10000",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "SNewTotalTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[NewBatchTotalTime(min)]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]='qv PerformanceReport'[RayvarzId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[MachineId]='qv PerformanceReport'[MachineId] &&",
              "'qv ProductMachineVisualIndexByBomVersion'[BomVersion]='qv PerformanceReport'[BomVersion]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "modified avgspeed",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var max_output =  CALCULATE(max('qv PerformanceReport'[TotalOutput]),filter('qv PerformanceReport', 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) && 'qv PerformanceReport'[BatchNo]= EARLIER('qv PerformanceReport'[BatchNo]) && 'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])))",
              "return",
              " CALCULATE(max('qv PerformanceReport'[AvgSpeed]),filter('qv PerformanceReport','qv PerformanceReport'[TotalOutput]=max_output && 'qv PerformanceReport'[RayvarzId]=EARLIER('qv PerformanceReport'[RayvarzId]) && 'qv PerformanceReport'[BatchNo]= EARLIER('qv PerformanceReport'[BatchNo]) && 'qv PerformanceReport'[MachineID]=EARLIER('qv PerformanceReport'[MachineID])))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_PerformanceReport = Source{[Schema=\"qv\",Item=\"PerformanceReport\"]}[Data]",
                "in",
                "    qv_PerformanceReport"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "TotalSahmeStopageMachine",
            "expression": [
              " ",
              "   CALCULATE(SUMX(SUMMARIZE('qv PerformanceReport','qv PerformanceReport'[MachineID],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ShMon], 'qv PerformanceReport'[SahmeStopageMachinePerProduct(h)]) ",
              "            , 'qv PerformanceReport'[SahmeStopageMachinePerProduct(h)])",
              "",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "TotalProductStopage",
            "expression": [
              " ",
              "   CALCULATE(SUMX(SUMMARIZE('qv PerformanceReport','qv PerformanceReport'[MachineID],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ShMon], 'qv PerformanceReport'[ProductStopagePerProduct(h)]) ",
              "            , 'qv PerformanceReport'[ProductStopagePerProduct(h)])",
              "",
              ")",
              "",
              ""
            ]
          },
          {
            "name": "TotalNetTime",
            "expression": [
              " ",
              "   CALCULATE(SUMX(SUMMARIZE('qv PerformanceReport','qv PerformanceReport'[MachineID],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ShMon], 'qv PerformanceReport'[NetTimePerProduct(h)]) ",
              "            , 'qv PerformanceReport'[NetTimePerProduct(h)])",
              "",
              ")",
              ""
            ]
          },
          {
            "name": "TotalTime",
            "expression": [
              " ",
              "   CALCULATE(SUMX(SUMMARIZE('qv PerformanceReport','qv PerformanceReport'[MachineID],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ShMon], 'qv PerformanceReport'[ActualTotalTimePerProduct(h)]) ",
              "            , 'qv PerformanceReport'[ActualTotalTimePerProduct(h)])",
              "",
              ")",
              ""
            ]
          }
        ]
      },
      {
        "name": "qv StopReport",
        "columns": [
          {
            "name": "FinishDate",
            "dataType": "int64",
            "sourceColumn": "FinishDate"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "SubBacthNo",
            "dataType": "int64",
            "sourceColumn": "SubBacthNo"
          },
          {
            "name": "DailyStopId",
            "dataType": "int64",
            "sourceColumn": "DailyStopId"
          },
          {
            "name": "DailyProductionHdrId",
            "dataType": "int64",
            "sourceColumn": "DailyProductionHdrId"
          },
          {
            "name": "StoppageTypeId",
            "dataType": "int64",
            "sourceColumn": "StoppageTypeId"
          },
          {
            "name": "Level2Desc",
            "dataType": "string",
            "sourceColumn": "Level2Desc"
          },
          {
            "name": "Level3Desc",
            "dataType": "string",
            "sourceColumn": "Level3Desc"
          },
          {
            "name": "Level4Desc",
            "dataType": "string",
            "sourceColumn": "Level4Desc"
          },
          {
            "name": "ResponsibleType",
            "dataType": "string",
            "sourceColumn": "ResponsibleType"
          },
          {
            "name": "AcceptableType",
            "dataType": "string",
            "sourceColumn": "AcceptableType"
          },
          {
            "name": "TypeStop",
            "dataType": "string",
            "sourceColumn": "TypeStop"
          },
          {
            "name": "ResponsibleLvl1",
            "dataType": "string",
            "sourceColumn": "ResponsibleLvl1"
          },
          {
            "name": "ResponsibleLvl2",
            "dataType": "string",
            "sourceColumn": "ResponsibleLvl2"
          },
          {
            "name": "Frequency",
            "dataType": "int64",
            "sourceColumn": "Frequency"
          },
          {
            "name": "StartTime",
            "dataType": "dateTime",
            "sourceColumn": "StartTime",
            "formatString": "HH:mm:ss",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeCustom\"><DateTimes><DateTime LCID=\"1033\" Group=\"LongTime\" FormatString=\"HH:mm:ss\" /></DateTimes></Format>"
              }
            ]
          },
          {
            "name": "FinishTime",
            "dataType": "dateTime",
            "sourceColumn": "FinishTime",
            "formatString": "HH:mm:ss",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeCustom\"><DateTimes><DateTime LCID=\"1033\" Group=\"LongTime\" FormatString=\"HH:mm:ss\" /></DateTimes></Format>"
              }
            ]
          },
          {
            "name": "DurationStop",
            "dataType": "int64",
            "sourceColumn": "DurationStop"
          },
          {
            "name": "DurationStopOverlay",
            "dataType": "double",
            "sourceColumn": "DurationStopOverlay",
            "formatString": "#,0.00"
          },
          {
            "name": "WeeklyPlanId",
            "dataType": "int64",
            "sourceColumn": "WeeklyPlanId"
          },
          {
            "name": "DateWeeklyPlan",
            "dataType": "int64",
            "sourceColumn": "DateWeeklyPlan"
          },
          {
            "name": "MonthDesc",
            "dataType": "string",
            "sourceColumn": "MonthDesc"
          },
          {
            "name": "DescWeek",
            "dataType": "string",
            "sourceColumn": "DescWeek"
          },
          {
            "name": "MiWeekOfyear",
            "dataType": "int64",
            "sourceColumn": "MiWeekOfyear"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "Remark",
            "dataType": "string",
            "sourceColumn": "Remark"
          },
          {
            "name": "MachineID",
            "dataType": "int64",
            "sourceColumn": "MachineID"
          },
          {
            "name": "MinuteId",
            "dataType": "int64",
            "sourceColumn": "MinuteId"
          },
          {
            "name": "VersionOff",
            "dataType": "int64",
            "sourceColumn": "VersionOff"
          },
          {
            "name": "AcceptableID",
            "dataType": "int64",
            "sourceColumn": "AcceptableID"
          },
          {
            "name": "shiftId",
            "dataType": "int64",
            "sourceColumn": "shiftId"
          },
          {
            "name": "GetDate",
            "dataType": "dateTime",
            "sourceColumn": "GetDate"
          },
          {
            "name": "IdStart",
            "dataType": "int64",
            "sourceColumn": "IdStart"
          },
          {
            "name": "IdFinish",
            "dataType": "int64",
            "sourceColumn": "IdFinish"
          },
          {
            "name": "ielastdayinmonth",
            "dataType": "dateTime",
            "sourceColumn": "ielastdayinmonth"
          },
          {
            "type": "calculated",
            "name": "DateText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "'qv StopReport'[DateWeeklyPlan]"
          },
          {
            "type": "calculated",
            "name": "ShMon",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "LEFT('qv StopReport'[DateText],6)"
          },
          {
            "type": "calculated",
            "name": "RestingPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport'[ShMon]) && 'qv StopReport'[StoppageTypeId]=19010108))"
            ]
          },
          {
            "type": "calculated",
            "name": "TrainingPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport'[ShMon]) && 'qv StopReport'[StoppageTypeId]=19010112 ))"
            ]
          },
          {
            "type": "calculated",
            "name": "SPCPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport'[ShMon]) && 'qv StopReport'[StoppageTypeId]=19010118))"
            ]
          },
          {
            "type": "calculated",
            "name": "TimeSPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport'[ShMon]) && 'qv StopReport'[StoppageTypeId]=19010119))"
            ]
          },
          {
            "type": "calculated",
            "name": "PMPerMachinePerMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport'[ShMon]) && 'qv StopReport'[StoppageTypeId]=19010110))"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalStopageMachinePerMonth(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport' , 'qv StopReport'[MachineID]=EARLIER('qv StopReport'[MachineID])",
              " && 'qv StopReport'[ShMon]=EARLIER('qv StopReport' [ShMon]) && not 'qv StopReport'[StoppageTypeId] in {19010119,9010205,15110009,15110005,14150204,14150100,14150101,15110011,14050107,14150208,14150202",
              ",13040200,14150206,14050105,14150210,15110014,15110013,14150205,16060400,16071000,19010044,20030000,17090000,14050100,15110007,19010125,15110006,14130102,19010203,14150203,21000000,14050104,19010202",
              ",14050103,19010045,19010102,11030000,15110008,14150209,21010001,15110010,16050301,16070700,16070300,19010124,16070100,16070200,11070200,19010005,20030001,19010038,14150207,19010121,19010040,16070400,19010000",
              ",19010025,15110002,19010204,19000202,19000109,19010103,14050101,11070000,19010026,14050109,11060101,11060302,19010037,15110004,19010200,19000001,11060300,19000104,19010002,17060300,19000108,15110003,14150200",
              ",16050200,14170001,16050400,13090200,15110001,19010201,14140100,14150201,13080000,19000000,20030002,19000110,17120203,17120200,16060500,20030004,15110000,14130101,11080000,19000111,19000301,11060100,19000204",
              ",11070101,19000106,19000102,19000200,17080000,17090600,19000105,21010300,13060000,14150213,14050106,14000900,14000907,19010027,11060401,17060500,16050700,16071001,19000205,19000206,20040301,19010052,19010057",
              ",19010041,14150211,19010048,19010060,19010207,19010054,19010053,17080100,19010049,19010035,17120201,19010051,19010050,19010061,16050600,19010064,14050102,19010062,13080002,21010202,19010055,19010056,20050000",
              ",19010068,14180001,11120204,16050302,17090500,11070002,14150212,21010204,14050108,11060400,19000303,19010208,14050111,19000103,19010209,17090001,16060401,16060402,19010073,14130100,19010082,17080800,17090002",
              ",13050400,16071101,16090000,19010084,19010085,16090001,17060000,19000403,20030003,11060000,19000520,11120201,19010086,19000402,19010234,11120207,13040201,20030005,17120207,17120208,16070000,19010238,14050112",
              ",10080000,19010135,19000100,17100000,11110000,13080001,19000400,19000401,15120014,15120013,12000000,14150401,10080003,13040004,19000112,11120202}))"
            ]
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],'qv StopReport'[FinishDate],",
              "                  'pbi BaseDate'[ShiladiYear],'qv StopReport'[ShiladiYear])"
            ]
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'qv StopReport'[FinishDate])"
          },
          {
            "type": "calculated",
            "name": "NextFinishDay",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var rnk=CALCULATE(min('pbi basedate'[daterank]),",
              "FILTER('pbi basedate','pbi basedate'[DateId]='qv stopreport'[finishdate]))",
              "return",
              "",
              " if(DATEDIFF(\"00:00\",'qv StopReport'[FinishTime],MINUTE)<420 &&",
              "    DATEDIFF(\"00:00\",'qv StopReport'[FinishTime],MINUTE)>0 && ",
              "   'qv StopReport'[shiftId]=3,",
              "    CALCULATE(min('pbi basedate'[DateId]), filter('pbi basedate','pbi basedate'[daterank]=rnk+1)),",
              "   'qv stopreport'[finishdate])",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DateDiffFinish",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " right(CONCATENATE(\"000\",DATEDIFF(\"00:00\",'qv StopReport'[FinishTime],MINUTE)),4)",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "DateDiffStart",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "right(CONCATENATE(\"000\",DATEDIFF(\"00:00\",'qv StopReport'[starttime],MINUTE)),4)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "StartTimeNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "var rnk=CALCULATE(min('pbi basedate'[daterank]),",
              "FILTER('pbi basedate','pbi basedate'[DateId]='qv stopreport'[finishdate]))",
              "return",
              " if(DATEDIFF(\"00:00\",'qv StopReport'[StartTime],MINUTE)<420 &&",
              "    DATEDIFF(\"00:00\",'qv StopReport'[StartTime],MINUTE)>0 &&",
              "   'qv StopReport'[shiftId]=3,",
              "    CALCULATE(min('pbi basedate'[DateId]), filter('pbi basedate','pbi basedate'[daterank]=rnk+1)),",
              "    'qv stopreport'[finishdate])&'qv StopReport'[DateDiffStart]"
            ]
          },
          {
            "type": "calculated",
            "name": "EndTimeNew",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'qv StopReport'[NextFinishDay]&'qv StopReport'[DateDiffFinish]"
          },
          {
            "type": "calculated",
            "name": "MiladiMonth",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[IeMonthDesc],'pbi BaseDate'[ShiladiYear],",
              "'qv StopReport'[ShiladiYear],'pbi BaseDate'[ShMonth],'qv StopReport'[ShmonFinishDate])    --VALUE(RIGHT('qv StopReport'[ShMon],4))"
            ]
          },
          {
            "type": "calculated",
            "name": "ShmonFinishDate",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LEFT('qv StopReport'[FinishDate],6)"
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],",
              "'qv StopReport'[MachineID])"
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],",
              "'qv StopReport'[ProcessID])"
            ]
          },
          {
            "type": "calculated",
            "name": "MachineEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv Machine'[MachineDscEn],'Dimqv Machine'[MachineId],",
              "'qv StopReport'[MachineID])"
            ]
          },
          {
            "type": "calculated",
            "name": "ProductName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],'qv StopReport'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "MonthRank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RANKX('qv StopReport','qv StopReport'[ShMon],,ASC,Dense)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "PerformanceDuration",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE (sum(ProductWeeklyVsActual[NetTime]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 ",
              "&& ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[BatchNo]='qv StopReport'[BatchNo] && ProductWeeklyVsActual[RayvarzId]='qv StopReport'[RayvarzId] ",
              "&& ProductWeeklyVsActual[MachineID]='qv StopReport'[MachineID]  ",
              "&& ProductWeeklyVsActual[ShiladiYear]='qv StopReport'[ShiladiYear] && ProductWeeklyVsActual[MiladiMonth]='qv StopReport'[MiladiMonth]))*60",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(sum(ProductWeeklyVsActual[box]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26",
              " && ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[BatchNo]='qv StopReport'[BatchNo] && ProductWeeklyVsActual[RayvarzId]='qv StopReport'[RayvarzId] ",
              "&& ProductWeeklyVsActual[MachineID]='qv StopReport'[MachineID] && ProductWeeklyVsActual[MiladiMonth]='qv StopReport'[MiladiMonth] ",
              "&& 'qv StopReport'[ShiladiYear] = 'qv StopReport'[ShiladiYear] ))",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_StopReport = Source{[Schema=\"qv\",Item=\"StopReport\"]}[Data]",
                "in",
                "    qv_StopReport"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "StopDuration",
            "expression": [
              "",
              "",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "",
              "-- ProductWeeklyVsActual[BatchNo] in VBatchno &&",
              " --&& ProductWeeklyVsActual[MachineDscFa] in VMachine && ProductWeeklyVsActual[RayvarzId] in VProduct && ",
              "-- ProductWeeklyVsActual[SiteType] in vsite &&",
              "",
              "return ",
              "",
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport', ",
              " 'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && ",
              "  'qv StopReport'[FinishDate] in VFinishDate && 'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct  ",
              "   && 'qv StopReport'[BatchNo] in VBatchno  ))"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "ActualDuration",
            "expression": [
              "",
              "",
              "CALCULATE(sum(ProductWeeklyVsActual[Duration]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[ProcessID] in {14,15,17,21,23} ) )*60",
              "",
              "/*",
              "var VProcess = values(ProductWeeklyVsActual[ProcessID])",
              "var VMachine = values(ProductWeeklyVsActual[MachineID])",
              "var VYear = values(ProductWeeklyVsActual[ShiladiYear])",
              "var VMonth = values(ProductWeeklyVsActual[MiladiMonth])",
              "var VWeek = values(ProductWeeklyVsActual[YearWeekNumber])",
              "var VDate = values(ProductWeeklyVsActual[FinishDate])",
              "",
              "return ",
              "",
              "CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ALL(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=1 &&   ",
              " ProductWeeklyVsActual[ProcessID] in VProcess  && ProductWeeklyVsActual[MachineID] in VMachine  &&",
              " ProductWeeklyVsActual[ShiladiYear] in VYear &&  ProductWeeklyVsActual[MiladiMonth] in VMonth &&",
              " ProductWeeklyVsActual[YearWeekNumber] in VWeek &&  ProductWeeklyVsActual[FinishDate] in VDate",
              "  )",
              " )*60",
              "*/",
              "",
              ""
            ]
          },
          {
            "name": "StopPercent",
            "expression": "DIVIDE([StopDuration],[ActualDuration])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "ActualDurationProcess",
            "expression": [
              "",
              "var x = values(ProductWeeklyVsActual[ProcessID])",
              "var y = values(ProductWeeklyVsActual[MachineID])",
              "var z = values(ProductWeeklyVsActual[ShiladiYear])",
              "var t = values(ProductWeeklyVsActual[MiladiMonth])",
              "",
              "",
              "return ",
              "",
              "CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ALL(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=1 &&   ProductWeeklyVsActual[ProcessID] in x  &&",
              " ProductWeeklyVsActual[ShiladiYear] in z &&",
              "  ProductWeeklyVsActual[MiladiMonth] in t ",
              "  )",
              " )*60"
            ]
          },
          {
            "name": "StopPercentProcess",
            "expression": "DIVIDE('qv StopReport'[StopDuration],[ActualDurationProcess])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "StackPercent",
            "expression": [
              "",
              "var vacceptable = SELECTEDVALUE(AcceptableType[AcceptableType])",
              "",
              "return ",
              "",
              "if(vacceptable=\"Availability\" , [Availability%] , DIVIDE([LegendDuration],[ActualDuration]))"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "LegendDuration",
            "expression": [
              "",
              "",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "var vstoptype = SELECTEDVALUE(AcceptableType[AcceptableType])",
              "",
              "-- ProductWeeklyVsActual[BatchNo] in VBatchno &&",
              " --&& ProductWeeklyVsActual[MachineDscFa] in VMachine && ProductWeeklyVsActual[RayvarzId] in VProduct && ",
              "-- ProductWeeklyVsActual[SiteType] in vsite &&",
              "",
              "return ",
              "if(vstoptype<>\"Running\" , ",
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport', ",
              " 'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && ",
              "  'qv StopReport'[FinishDate] in VFinishDate && 'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct  ",
              "   && 'qv StopReport'[BatchNo] in VBatchno && 'qv StopReport'[AcceptableType] = vstoptype )) ",
              ",",
              "if(vstoptype=\"Running\", ",
              "",
              "[ActualDuration] - CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport', ",
              " 'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && ",
              "  'qv StopReport'[FinishDate] in VFinishDate && 'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct  ",
              "   && 'qv StopReport'[BatchNo] in VBatchno ))",
              "))",
              "",
              "",
              "/*",
              "  SWITCH (",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  sumx(tbl4,[box])  ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  sumx(tbl4,[unit]) ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\",  sumx(tbl4,[kilo]),   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  DISTINCTcount(ProductWeeklyVsActual[RayvarzBatch]),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUM(ProductWeeklyVsActual[Duration])*60 ,   -- ok ",
              "     ",
              "          BLANK()",
              ")",
              "*/"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "Availability%",
            "expression": "DIVIDE(([ActualDuration]-[StopDuration]),[ActualDuration])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "PerformancePercent",
            "expression": [
              "",
              "/*",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "var vstoptype = SELECTEDVALUE(AcceptableType[AcceptableType])",
              "*/",
              "",
              "var tblLoad = ADDCOLUMNS(SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[FinishDate],ProductWeeklyVsActual[BatchNo],",
              "\"unit\",sum(ProductWeeklyVsActual[Unit]),",
              "\"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"StopDuration\",sum(ProductWeeklyVsActual[StopDuration]),",
              "\"actualspeede\",max(ProductWeeklyVsActual[AVGSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed-unit/min]))",
              ",\"Running\",[Loading]-[StopDuration],\"Run*CustomizeSpeed\",([Loading]-[StopDuration])*[customizespeede])",
              "",
              "--\"Run*ActualSpeed\",([Loading]-[StopDuration])*[actualspeede]",
              "/*",
              " var tblstop =  SUMMARIZE(FILTER('qv StopReport', ",
              "  'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && 'qv StopReport'[FinishDate] in VFinishDate &&",
              "  'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct && 'qv StopReport'[BatchNo] in VBatchno ),",
              "  'qv StopReport'[RayvarzId],\"StopDuration\",sum('qv StopReport'[DurationStopOverlay]))",
              "",
              "var tbljoin= FILTER(CROSSJOIN(tblLoad,tblstop),ProductWeeklyVsActual[RayvarzId]='qv StopReport'[RayvarzId])",
              "",
              "",
              " var tbl3 =ADDCOLUMNS(tbljoin,",
              " \"Running\",[Loading]-[StopDuration],",
              " \"Run*ActualSpeed\",([Loading]-[StopDuration])*[actualspeede],",
              " \"Run*CustomizeSpeed\",([Loading]-[StopDuration])*[customizespeede] )",
              "",
              "",
              "",
              " ",
              "--sumx(tblLoad,[Loading])",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 1 , ",
              " DIVIDE(SUMX(tbl3,[Run*ActualSpeed]),SUMX(tbl3,[Run*CustomizeSpeed]))",
              "  )",
              "*/",
              "",
              "return",
              "",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 1 , ",
              "  DIVIDE(SUMX(tblLoad,[unit]),SUMX(tblLoad,[Run*CustomizeSpeed]))",
              "  )",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "ReduceSpeed",
            "expression": [
              "",
              "",
              "var tblLoad = ADDCOLUMNS(SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[FinishDate],ProductWeeklyVsActual[BatchNo], \"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"StopDuration\",sum(ProductWeeklyVsActual[StopDuration]),",
              "\"ActualSpeed\",max(ProductWeeklyVsActual[AVGSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed]))",
              ",\"Running\",[Loading]-[StopDuration] , \"Run*ActualSpeed\",([Loading]-[StopDuration])*[ActualSpeed]",
              ",\"Run*CustomizeSpeed\",([Loading]-[StopDuration])*[customizespeede])",
              "",
              "return",
              "",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 0 , ",
              "    1-DIVIDE(SUMX(tblLoad,[Run*ActualSpeed]),SUMX(tblLoad,[Run*CustomizeSpeed]))",
              "  )",
              "",
              "",
              "",
              "",
              "",
              "/*",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "var vstoptype = SELECTEDVALUE(AcceptableType[AcceptableType])",
              "",
              "",
              "var tblLoad = SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1),ProductWeeklyVsActual[RayvarzId], \"Loading\",sum(ProductWeeklyVsActual[Duration])*60,",
              "\"standardSpeed\",max(ProductWeeklyVsActual[standardSpeed]),\"customizespeede\",max(ProductWeeklyVsActual[CustomizeSpeed]))",
              "",
              "",
              " var tblstop =  SUMMARIZE(FILTER('qv StopReport', ",
              "  'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && 'qv StopReport'[FinishDate] in VFinishDate &&",
              "  'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct && 'qv StopReport'[BatchNo] in VBatchno ),",
              "  'qv StopReport'[RayvarzId],\"StopDuration\",sum('qv StopReport'[DurationStopOverlay]))",
              "",
              "var tbljoin= FILTER(CROSSJOIN(tblLoad,tblstop),ProductWeeklyVsActual[RayvarzId]='qv StopReport'[RayvarzId])",
              "",
              "",
              " var tbl3 =ADDCOLUMNS(tbljoin,",
              " \"Running\",[Loading]-[StopDuration],",
              " \"Run*StandardSpeed\",([Loading]-[StopDuration])*[standardSpeed],",
              " \"Run*CustomizeSpeed\",([Loading]-[StopDuration])*[customizespeede] )",
              "",
              "return ",
              "--sumx(tblLoad,[Loading])",
              "if( SELECTEDVALUE('ProductWeeklyVsActual'[ProcessID]) in {13,10,11,16,38,22,20} , 0 , ",
              " 1- DIVIDE(SUMX(tbl3,[Run*StandardSpeed]),SUMX(tbl3,[Run*CustomizeSpeed]))",
              "  )",
              "*/"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "MinorStop",
            "expression": "1-([PerformancePercent]+[ReduceSpeed])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "OEEActualMonthly",
            "expression": "[Availability%]*[PerformancePercent]*0.98",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "DownTime%",
            "expression": [
              " DIVIDE([DownTimeStop],[ActualDuration])",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "DownTimeStop",
            "expression": [
              "",
              "",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "",
              "return ",
              "",
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport', ",
              " 'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && ",
              "  'qv StopReport'[FinishDate] in VFinishDate && 'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct  ",
              "   && 'qv StopReport'[BatchNo] in VBatchno && 'qv StopReport'[AcceptableType]=\"DownTime\" )) "
            ]
          },
          {
            "name": "PlannedStp",
            "expression": [
              "",
              "",
              "var vsite = VALUES('ProductWeeklyVsActual'[SiteType])",
              "",
              "var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('ProductWeeklyVsActual'[machineid])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "",
              "return ",
              "",
              "CALCULATE(sum('qv StopReport'[DurationStopOverlay]) , FILTER('qv StopReport', ",
              " 'qv StopReport'[Processid] in VProcess && 'qv StopReport'[MachineID] in VMachine && ",
              "  'qv StopReport'[FinishDate] in VFinishDate && 'qv StopReport'[SiteType] in vsite && 'qv StopReport'[RayvarzId] in VProduct  ",
              "   && 'qv StopReport'[BatchNo] in VBatchno && 'qv StopReport'[AcceptableType]=\"PlannedSTP\" )) "
            ]
          },
          {
            "name": "PlannedStp%",
            "expression": "DIVIDE([PlannedStp],[ActualDuration])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "ActualDuration2",
            "expression": [
              "",
              "",
              "var VProcess = VALUES('qv StopReport'[ProcessId])",
              "",
              "--var VProcess = values('ProductWeeklyVsActual'[ProcessID])",
              "",
              "var VMachine = values('qv StopReport'[MachineID])",
              "var VProduct = VALUES('ProductWeeklyVsActual'[RayvarzId])",
              "",
              "--var VBatchno = VALUES('ProductWeeklyVsActual'[BatchNo])",
              "",
              "--var VFinishDate = VALUES('ProductWeeklyVsActual'[FinishDate])",
              "",
              "",
              "-- ProductWeeklyVsActual[BatchNo] in VBatchno &&",
              " --&& ProductWeeklyVsActual[MachineDscFa] in VMachine && ProductWeeklyVsActual[RayvarzId] in VProduct && ",
              "-- ProductWeeklyVsActual[SiteType] in vsite &&",
              "",
              "return ",
              " CALCULATE(sum(ProductWeeklyVsActual[Duration]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[processid] in VProcess",
              " && ProductWeeklyVsActual[MachineID] in VMachine ) )*60",
              ""
            ]
          },
          {
            "name": "StopPercent2",
            "expression": "DIVIDE([StopDuration],[ActualDuration2])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "DownTimePareto%",
            "expression": [
              "",
              "",
              "if(SELECTEDVALUE(AcceptableType[AcceptableType])=\"downTime\" , DIVIDE([DownTimeStop],[ActualDuration]),",
              "if(SELECTEDVALUE(AcceptableType[AcceptableType])=\"PlannesSTP\", DIVIDE([PlannedStp],[ActualDuration])",
              ",DIVIDE([DownTimeStop]+[PlannedStp],[ActualDuration])",
              "))"
            ]
          },
          {
            "name": "StopBox",
            "expression": "DIVIDE(max('qv StopReport'[ActualBox]),max('qv StopReport'[PerformanceDuration]))* sum('qv StopReport'[DurationStopOverlay])",
            "formatString": "#,0.00"
          }
        ]
      },
      {
        "name": "ray aaRep33",
        "columns": [
          {
            "name": "Seri",
            "dataType": "int64",
            "sourceColumn": "Seri"
          },
          {
            "name": "SeriDesc",
            "dataType": "string",
            "sourceColumn": "SeriDesc"
          },
          {
            "name": "Product",
            "dataType": "int64",
            "sourceColumn": "Product",
            "formatString": "0"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "OrderQty",
            "dataType": "double",
            "sourceColumn": "OrderQty"
          },
          {
            "name": "ProductReceiptDate",
            "dataType": "string",
            "sourceColumn": "ProductReceiptDate"
          },
          {
            "name": "ExpirationDate",
            "dataType": "string",
            "sourceColumn": "ExpirationDate"
          },
          {
            "name": "ActualProductionQty",
            "dataType": "double",
            "sourceColumn": "ActualProductionQty"
          },
          {
            "name": "PrdBgnProj",
            "dataType": "string",
            "sourceColumn": "PrdBgnProj"
          },
          {
            "name": "StoreNo",
            "dataType": "string",
            "sourceColumn": "StoreNo"
          },
          {
            "name": "StoreDsc",
            "dataType": "string",
            "sourceColumn": "StoreDsc"
          },
          {
            "name": "doctype",
            "dataType": "int64",
            "sourceColumn": "doctype"
          },
          {
            "name": "DocTypeDesc",
            "dataType": "string",
            "sourceColumn": "DocTypeDesc"
          },
          {
            "name": "docno",
            "dataType": "int64",
            "sourceColumn": "docno"
          },
          {
            "name": "partno",
            "dataType": "string",
            "sourceColumn": "partno"
          },
          {
            "name": "PartNoDsc",
            "dataType": "string",
            "sourceColumn": "PartNoDsc"
          },
          {
            "name": "UntCode",
            "dataType": "string",
            "sourceColumn": "UntCode"
          },
          {
            "name": "UntName",
            "dataType": "string",
            "sourceColumn": "UntName"
          },
          {
            "name": "Category",
            "dataType": "int64",
            "sourceColumn": "Category"
          },
          {
            "name": "CategoryDsc",
            "dataType": "string",
            "sourceColumn": "CategoryDsc"
          },
          {
            "name": "serial",
            "dataType": "string",
            "sourceColumn": "serial"
          },
          {
            "name": "QcNo",
            "dataType": "string",
            "sourceColumn": "QcNo"
          },
          {
            "name": "qty",
            "dataType": "double",
            "sourceColumn": "qty"
          },
          {
            "name": "totVal",
            "dataType": "decimal",
            "sourceColumn": "totVal"
          },
          {
            "name": "Val",
            "dataType": "decimal",
            "sourceColumn": "Val"
          },
          {
            "name": "docdate",
            "dataType": "string",
            "sourceColumn": "docdate"
          },
          {
            "name": "ConsType",
            "dataType": "int64",
            "sourceColumn": "ConsType"
          },
          {
            "name": "ConsTypeDesc",
            "dataType": "string",
            "sourceColumn": "ConsTypeDesc"
          },
          {
            "name": "Producer",
            "dataType": "string",
            "sourceColumn": "Producer"
          },
          {
            "name": "ProducerDesc",
            "dataType": "string",
            "sourceColumn": "ProducerDesc"
          },
          {
            "name": "SupplierCode",
            "dataType": "int64",
            "sourceColumn": "SupplierCode"
          },
          {
            "name": "SupplierName",
            "dataType": "string",
            "sourceColumn": "SupplierName"
          },
          {
            "name": "oprtit",
            "dataType": "int64",
            "sourceColumn": "oprtit"
          },
          {
            "name": "tmpRcptDate",
            "dataType": "string",
            "sourceColumn": "tmpRcptDate"
          },
          {
            "name": "ReceiptNo",
            "dataType": "string",
            "sourceColumn": "ReceiptNo"
          },
          {
            "name": "Receiptdate",
            "dataType": "string",
            "sourceColumn": "Receiptdate"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "ProccesName",
            "dataType": "string",
            "sourceColumn": "ProccesName"
          },
          {
            "name": "BatchRatio",
            "dataType": "double",
            "sourceColumn": "BatchRatio"
          },
          {
            "name": "Supplier_Country",
            "dataType": "string",
            "sourceColumn": "Supplier_Country"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;Rayvarz\",",
                "    ray_aaRep33 = Source{[Schema=\"ray\",Item=\"aaRep33\"]}[Data]",
                "in",
                "    ray_aaRep33"
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 2",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShMon]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ActualTotalTimePerRayPerMonthPerMachine(h)",
            "dataType": "double",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ActualTotalTimePerRayPerMonthPerMachine]",
            "formatString": "0.00"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessID]"
          },
          {
            "type": "calculated",
            "name": "MachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[MachineDscEn] , 'Dimqv Machine'[MachineId] , 'CalculatedTable 2'[MachineID])"
          },
          {
            "type": "calculated",
            "name": "ProcessName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv Process'[ProcessNameEn] ,'qv Process'[ProcessId] , 'CalculatedTable 2'[ProcessId])"
          },
          {
            "type": "calculated",
            "name": "TimePerBatch(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]/'CalculatedTable 2'[CountBatchNo-Bom]",
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "TimePerBox(min)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "('CalculatedTable 2'[TimePerBatch(h)]/'CalculatedTable 2'[BatchBox])*60"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BoxToUnit",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BoxToUnit]"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 1",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if('CalculatedTable 2'[Type]=\"Actual\",1,2)"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchBox",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchBox]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CountBatchNo-Bom",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[CountBatchNo-Bom]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SiteType",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[SiteType]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 5",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "union(",
                "",
                "ADDCOLUMNS(",
                " SUMMARIZE(FILTER('qv PerformanceReport' , 'qv PerformanceReport'[PlanTypeId]=26 ),//&& 'qv PerformanceReport'[BoxToUnit]<>0) , ",
                "'qv PerformanceReport'[RayvarzId],",
                "'qv PerformanceReport'[MachineID] , 'qv PerformanceReport'[ProcessId],'qv PerformanceReport'[SiteType],",
                "'qv PerformanceReport'[ShMon],'qv PerformanceReport'[ActualTotalTimePerRayPerMonthPerMachine],'qv PerformanceReport'[CountBatchNo-Bom],'qv PerformanceReport'[ProductNameEn],'qv PerformanceReport'[BoxToUnit],",
                "",
                " \"BatchBox\",max('qv PerformanceReport'[BatchBoxPerProductPerMonthPerMachine])",
                "            // sume hameye bom hash dar yek mah",
                "    ),\"Type\",\"Actual\" )",
                "",
                ",",
                "",
                "ADDCOLUMNS(",
                "SUMMARIZE(FILTER('qv MPS' ,'qv MPS'[ModifiedTimeWholeBatch]<>BLANK()),",
                "'qv MPS'[RayvarzId],",
                "'qv MPS'[MachineID] ,'qv MPS'[ProcessId],'qv MPS'[SiteType],",
                "'qv MPS'[Month],'qv MPS'[ModifiedTimeWholeBatch], 'qv MPS'[ModifiedBatchCount],'qv MPS'[ProductNameEn] ,\"bbb\",max('qv MPS'[NoInBox]),\"aaa\",max('qv MPS'[BatchSize])  ) , \"Type\" , \"Plan\")",
                ")",
                "",
                "",
                "",
                "",
                ""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "BatchTime",
            "expression": [
              "DIVIDE(",
              "",
              "sum('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]), sum('CalculatedTable 2'[CountBatchNo-Bom]))"
            ]
          },
          {
            "name": "BoxTime",
            "expression": "DIVIDE([BatchTime],max('CalculatedTable 2'[BatchBox]))*60",
            "formatString": "0.0000"
          },
          {
            "name": "UnitTime",
            "expression": "DIVIDE([BoxTime], max('CalculatedTable 2'[BoxToUnit]))",
            "formatString": "0.0000"
          },
          {
            "name": "batchboxbatchcount",
            "expression": " CALCULATE(MAX('CalculatedTable 2'[BatchBox]) * sum('CalculatedTable 2'[CountBatchNo-Bom]))",
            "formatString": "0"
          },
          {
            "name": "BatchTimeDeviation",
            "expression": [
              "",
              "if(CALCULATE([BatchTime],'CalculatedTable 2'[Type]=\"Plan\")<> BLANK() && CALCULATE([BatchTime],'CalculatedTable 2'[Type]=\"Actual\")<> BLANK() ,",
              "",
              "divide(CALCULATE([BatchTime],'CalculatedTable 2'[Type]=\"Plan\")-CALCULATE([BatchTime],'CalculatedTable 2'[Type]=\"Actual\") , CALCULATE([BatchTime],'CalculatedTable 2'[Type]=\"Plan\"))",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxTimeDeviation",
            "expression": [
              "",
              "if(CALCULATE([BoxTime],'CalculatedTable 2'[Type]=\"Plan\")<> BLANK() && CALCULATE([BoxTime],'CalculatedTable 2'[Type]=\"Actual\")<> BLANK() ,",
              "divide( CALCULATE([BoxTime],'CalculatedTable 2'[Type]=\"Plan\")-CALCULATE([BoxTime],'CalculatedTable 2'[Type]=\"Actual\") , ",
              "                          CALCULATE([BoxTime],'CalculatedTable 2'[Type]=\"Plan\")",
              "                        )",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "UnitTimeDeviation",
            "expression": [
              "",
              "if(CALCULATE([UnitTime],'CalculatedTable 2'[Type]=\"Plan\")<> BLANK() && CALCULATE([UnitTime],'CalculatedTable 2'[Type]=\"Actual\")<> BLANK() ,",
              "divide(CALCULATE([UnitTime],'CalculatedTable 2'[Type]=\"Plan\")-CALCULATE([UnitTime],'CalculatedTable 2'[Type]=\"Actual\") , CALCULATE([UnitTime],'CalculatedTable 2'[Type]=\"Plan\"))",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TotalTimeDeviation",
            "expression": [
              "",
              "if(    CALCULATE(SUM('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]),'CalculatedTable 2'[Type]=\"Plan\")   <>   BLANK() && ",
              "       CALCULATE(SUM('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]),'CalculatedTable 2'[Type]=\"Actual\")  <>  BLANK() ,",
              "",
              "divide(CALCULATE(SUM('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]),'CalculatedTable 2'[Type]=\"Plan\")-CALCULATE(SUM('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]),'CalculatedTable 2'[Type]=\"Actual\") , CALCULATE(SUM('CalculatedTable 2'[ActualTotalTimePerRayPerMonthPerMachine(h)]),'CalculatedTable 2'[Type]=\"Plan\"))",
              ")"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "CTDimMonth",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "CD DimBaseDates[ShMon]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": "VALUES('CD DimBaseDates'[ShMon])"
            }
          }
        ]
      },
      {
        "name": "VwWastage_Rate",
        "columns": [
          {
            "name": "product",
            "dataType": "string",
            "sourceColumn": "product"
          },
          {
            "name": "productnameen",
            "dataType": "string",
            "sourceColumn": "productnameen"
          },
          {
            "name": "OrderQty",
            "dataType": "decimal",
            "sourceColumn": "OrderQty",
            "formatString": "#,0.00"
          },
          {
            "name": "FranchiseIdDesc",
            "dataType": "string",
            "sourceColumn": "FranchiseIdDesc"
          },
          {
            "name": "lifecyclename",
            "dataType": "string",
            "sourceColumn": "lifecyclename"
          },
          {
            "name": "StrategicVariation",
            "dataType": "string",
            "sourceColumn": "StrategicVariation"
          },
          {
            "name": "ProductionCenterIdDesc",
            "dataType": "string",
            "sourceColumn": "ProductionCenterIdDesc"
          },
          {
            "name": "OrderQtyMultipleBatchRatio",
            "dataType": "decimal",
            "sourceColumn": "OrderQtyMultipleBatchRatio",
            "formatString": "#,0.00"
          },
          {
            "name": "ActualQty",
            "dataType": "double",
            "sourceColumn": "ActualQty"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "batchRatio",
            "dataType": "double",
            "sourceColumn": "batchRatio"
          },
          {
            "name": "TotalQty",
            "dataType": "decimal",
            "sourceColumn": "TotalQty",
            "formatString": "#,0.00"
          },
          {
            "name": "TotalActualQTY",
            "dataType": "double",
            "sourceColumn": "TotalActualQTY"
          },
          {
            "name": "Yield",
            "dataType": "double",
            "sourceColumn": "Yield"
          },
          {
            "name": "waste",
            "dataType": "double",
            "sourceColumn": "waste"
          },
          {
            "name": "countbatchno",
            "dataType": "int64",
            "sourceColumn": "countbatchno"
          },
          {
            "name": "countbatchnom",
            "dataType": "int64",
            "sourceColumn": "countbatchnom"
          },
          {
            "name": "divide",
            "dataType": "double",
            "sourceColumn": "divide"
          },
          {
            "type": "calculated",
            "name": "CalBatchRatio",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "var Vmaxorderqtyperproduct= CALCULATE(max(VwWastage_Rate[OrderQty]),FILTER(VwWastage_Rate,VwWastage_Rate[product]=EARLIER(VwWastage_Rate[product])))",
              "return ",
              "DIVIDE(VwWastage_Rate[OrderQty],Vmaxorderqtyperproduct,00)"
            ]
          },
          {
            "name": "ProductReceiptDate",
            "dataType": "string",
            "sourceColumn": "ProductReceiptDate"
          },
          {
            "type": "calculated",
            "name": "ShMonth",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "left(VwWastage_Rate[ProductReceiptDate],6)"
          },
          {
            "type": "calculated",
            "name": "YieldPerProduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " /*",
              "CALCULATETABLE(VwWastage_Rate,FILTER(VwWastage_Rate,",
              "   (VwWastage_Rate[ProductionCenterIdDesc]=\"ABD\" && VwWastage_Rate[Yield]>0.7 && VwWastage_Rate[Yield]<1.2 && VwWastage_Rate[product]<>\"7001000\")  ||",
              "   (VwWastage_Rate[ProductionCenterIdDesc]=\"ABD 70\" &&  VwWastage_Rate[Yield]>=0.7 && VwWastage_Rate[Yield]<=1.2  && VwWastage_Rate[product]<>\"7001000\")))",
              "   */",
              "",
              "",
              "DIVIDE(CALCULATE(sum(VwWastage_Rate[ActualQty]),FILTER(VwWastage_Rate,VwWastage_Rate[product]=EARLIER(VwWastage_Rate[product]) && VwWastage_Rate[batchRatio]>=0.5))",
              "     , CALCULATE(sum(VwWastage_Rate[OrderQtyMultipleBatchRatio]),",
              "       FILTER(VwWastage_Rate,VwWastage_Rate[product]=EARLIER(VwWastage_Rate[product]) && VwWastage_Rate[batchRatio]>=0.5)) , 00 )"
            ]
          },
          {
            "type": "calculated",
            "name": "Wastage",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "1- VwWastage_Rate[Yield]",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/pbidb;iedb\",",
                "    IE_vwWastage_Rate = Source{[Schema=\"IE\",Item=\"vwWastage_Rate\"]}[Data]",
                "in",
                "    IE_vwWastage_Rate"
              ]
            }
          }
        ]
      },
      {
        "name": "CAlTblWastage",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "product",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[product]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "productnameen",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[productnameen]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "OrderQty",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "VwWastage_Rate[OrderQty]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FranchiseIdDesc",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[FranchiseIdDesc]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "lifecyclename",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[lifecyclename]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StrategicVariation",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[StrategicVariation]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductionCenterIdDesc",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[ProductionCenterIdDesc]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "OrderQtyMultipleBatchRatio",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "VwWastage_Rate[OrderQtyMultipleBatchRatio]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ActualQty",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[ActualQty]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchNo",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[BatchNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "batchRatio",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[batchRatio]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TotalQty",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "VwWastage_Rate[TotalQty]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TotalActualQTY",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[TotalActualQTY]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Yield",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[Yield]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "waste",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[waste]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "countbatchno",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[countbatchno]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "countbatchnom",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[countbatchnom]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "divide",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[divide]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalBatchRatio",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[CalBatchRatio]"
          },
          {
            "type": "calculated",
            "name": "CalYieldProduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " ",
              "DIVIDE( CALCULATE(sum(CAlTblWastage[ActualQty]),FILTER(CAlTblWastage,CAlTblWastage[product]=EARLIER(CAlTblWastage[product])))",
              "     , CALCULATE(sum(CAlTblWastage[OrderQtyMultipleBatchRatio]),FILTER(CAlTblWastage,CAlTblWastage[product]=EARLIER(CAlTblWastage[product]))) , 00 )"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductReceiptDate",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[ProductReceiptDate]"
          },
          {
            "type": "calculated",
            "name": "Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "left(CAlTblWastage[ProductReceiptDate],6)"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShMonth",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[ShMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "YieldPerProduct",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[YieldPerProduct]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Wastage",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "VwWastage_Rate[Wastage]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "CALCULATETABLE(VwWastage_Rate,FILTER(VwWastage_Rate,",
                "   (VwWastage_Rate[ProductionCenterIdDesc]=\"ABD\" && VwWastage_Rate[Yield]>0.7 && VwWastage_Rate[Yield]<1.2 && VwWastage_Rate[product]<>\"7001000\")  ||",
                "   (VwWastage_Rate[ProductionCenterIdDesc]=\"ABD 70\" &&  VwWastage_Rate[Yield]>=0.7 && VwWastage_Rate[Yield]<=1.2  && VwWastage_Rate[product]<>\"7001000\")))",
                "   ",
                "   ",
                "  -- 7001000 =placebo test product"
              ]
            }
          }
        ]
      },
      {
        "name": "TBLLPVision",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "BatchBox",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchBox]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchKilo",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchKilo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Availibility",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Availibility]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BomVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BudgetDesc",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BudgetDesc]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BudgetVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BudgetVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalBatchTotalTime(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CalBatchTotalTime(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalCycleTimePerBatch(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CalCycleTimePerBatch(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalPerformanceTimePerBatch(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CalPerformanceTimePerBatch(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalQualityTimePerBatch(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CalQualityTimePerBatch(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalRunningTimePerBatch(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CalRunningTimePerBatch(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CIPTime",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CIPTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LoadUnloadTime",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LoadUnloadTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[MachineDscFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TimeS",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[TimeS]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Quality",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Quality]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Productivity",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Productivity]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ProcessNameFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "M_rayId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[M_rayId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "newBatchTotalTime(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[newBatchTotalTime(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "NewAvailibility",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[NewAvailibility]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchUnit",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchUnit]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchNo",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ProductEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "OperationAllocation",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[OperationAllocation]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RestPerDay",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[RestPerDay]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "pmpercent",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[pmpercent]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "spcPercent",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[spcPercent]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Train",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Train]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": [
                "SELECTCOLUMNS('qv ProductMachineVisualIndexByBomVersion',\"BatchBox\",'qv ProductMachineVisualIndexByBomVersion'[BatchBox],",
                "\"BatchKilo\",'qv ProductMachineVisualIndexByBomVersion'[BatchKilo],\"BatchNo\",'qv ProductMachineVisualIndexByBomVersion'[Batchno],",
                "\"Availibility\",'qv ProductMachineVisualIndexByBomVersion'[Availibility],",
                "\"NewAvailibility\",'qv ProductMachineVisualIndexByBomVersion'[ActualAvailability],",
                "\"BomVersion\",'qv ProductMachineVisualIndexByBomVersion'[BomVersion],",
                "\"BudgetDesc\",'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc],\"BudgetVersion\",'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],",
                "\"CalBatchTotalTime(min)\",'qv ProductMachineVisualIndexByBomVersion'[CalBatchTotalTime(min)],",
                "\"newBatchTotalTime(min)\",'qv ProductMachineVisualIndexByBomVersion'[ActualBatchTotalTime(min)],",
                "\"CalCycleTimePerBatch(min)\",'qv ProductMachineVisualIndexByBomVersion'[CalCycleTimePerBatch(min)],\"CalPerformanceTimePerBatch(min)\",'qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)],",
                "\"CalQualityTimePerBatch(min)\",'qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)],\"CalRunningTimePerBatch(min)\",'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],",
                "\"CIPTime\",'qv ProductMachineVisualIndexByBomVersion'[CIPTime],\"LoadUnloadTime\",'qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime],",
                "\"M_rayId\",'qv ProductMachineVisualIndexByBomVersion'[M_rayId],\"MachineDscFa\",'qv ProductMachineVisualIndexByBomVersion'[MachineDscFa],",
                "\"RayvarzId\",'qv ProductMachineVisualIndexByBomVersion'[RayvarzId],\"TimeS\",'qv ProductMachineVisualIndexByBomVersion'[TimeS],",
                "\"Quality\",'qv ProductMachineVisualIndexByBomVersion'[Quality],\"Productivity\",'qv ProductMachineVisualIndexByBomVersion'[Productivity],",
                "\"ProcessNameFa\",'qv ProductMachineVisualIndexByBomVersion'[ProcessNameFa],\"BatchUnit\",'qv ProductMachineVisualIndexByBomVersion'[BatchUnit],",
                "\"ProductEn\",'qv ProductMachineVisualIndexByBomVersion'[ProductNameEn],",
                "\"OperationAllocation\",'qv ProductMachineVisualIndexByBomVersion'[OperationAllocation],",
                "\"RestPerDay\",'qv ProductMachineVisualIndexByBomVersion'[RestPerDay],",
                "\"pmpercent\",'qv ProductMachineVisualIndexByBomVersion'[PMPercent],",
                " \"spcPercent\",'qv ProductMachineVisualIndexByBomVersion'[SPCPercent],\"Train\",12)",
                "",
                "",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "WIPTime",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv ProductExcel[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv ProductExcel[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[ProcessNameFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[MachineDscFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CalRunningTimePerBatch(min)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[CalRunningTimePerBatch(min)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[BomVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BudgetVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[BudgetVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BudgetDesc",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv ProductMachineVisualIndexByBomVersion[BudgetDesc]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": "GROUPBY('qv ProductMachineVisualIndexByBomVersion','Dimqv ProductExcel'[RayvarzId],'Dimqv ProductExcel'[ProductNameEn],'qv ProductMachineVisualIndexByBomVersion'[ProcessId],'qv ProductMachineVisualIndexByBomVersion'[ProcessNameFa],'qv ProductMachineVisualIndexByBomVersion'[MachineDscFa],'qv ProductMachineVisualIndexByBomVersion'[MachineId],'qv ProductMachineVisualIndexByBomVersion'[CalRunningTimePerBatch(min)],'qv ProductMachineVisualIndexByBomVersion'[BomVersion],'qv ProductMachineVisualIndexByBomVersion'[BudgetVersion],'qv ProductMachineVisualIndexByBomVersion'[BudgetDesc])"
            }
          }
        ]
      },
      {
        "name": "qv ViewCalendarByMachine",
        "columns": [
          {
            "name": "AbidiHolidays",
            "dataType": "int64",
            "sourceColumn": "AbidiHolidays"
          },
          {
            "name": "DateG",
            "dataType": "dateTime",
            "sourceColumn": "DateG"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "DayName",
            "dataType": "string",
            "sourceColumn": "DayName"
          },
          {
            "name": "IeMonthDesc",
            "dataType": "string",
            "sourceColumn": "IeMonthDesc"
          },
          {
            "name": "IeMonthId",
            "dataType": "int64",
            "sourceColumn": "IeMonthId"
          },
          {
            "name": "IeYear",
            "dataType": "int64",
            "sourceColumn": "IeYear"
          },
          {
            "name": "IsActive",
            "dataType": "boolean",
            "sourceColumn": "IsActive"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "OPHoliday",
            "dataType": "int64",
            "sourceColumn": "OPHoliday"
          },
          {
            "name": "OPHolidayType",
            "dataType": "int64",
            "sourceColumn": "OPHolidayType"
          },
          {
            "name": "RevisionId",
            "dataType": "int64",
            "sourceColumn": "RevisionId"
          },
          {
            "name": "RevisionName",
            "dataType": "string",
            "sourceColumn": "RevisionName"
          },
          {
            "name": "ShDay",
            "dataType": "int64",
            "sourceColumn": "ShDay"
          },
          {
            "name": "ShMon",
            "dataType": "int64",
            "sourceColumn": "ShMon"
          },
          {
            "name": "ShMonth",
            "dataType": "string",
            "sourceColumn": "ShMonth"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "Code",
            "dataType": "string",
            "sourceColumn": "Code"
          },
          {
            "type": "calculated",
            "name": "TotalCapacityMachinePerMonth(h)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "'qv ViewCalendarByMachine'[CountWorkingDayPerMachinePerMonth]*24"
          },
          {
            "type": "calculated",
            "name": "CountWorkingDayPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(CALCULATE(count('qv ViewCalendarByMachine'[AbidiHolidays]),FILTER('qv ViewCalendarByMachine', ",
              "'qv ViewCalendarByMachine'[MachineId]=EARLIER('qv ViewCalendarByMachine'[MachineId]) && ",
              "'qv ViewCalendarByMachine'[ShMon]=EARLIER('qv ViewCalendarByMachine'[ShMon]) && ",
              "'qv ViewCalendarByMachine'[RevisionId]=EARLIER('qv ViewCalendarByMachine'[RevisionId]) && //'qv ViewCalendarByMachine'[IsActive]=False &&",
              "('qv ViewCalendarByMachine'[AbidiHolidays]=0 )))=BLANK(),0,   //|| 'qv ViewCalendarByMachine'[DayName]=\"Thursday\"",
              "",
              "CALCULATE(count('qv ViewCalendarByMachine'[AbidiHolidays]),FILTER('qv ViewCalendarByMachine', ",
              "'qv ViewCalendarByMachine'[MachineId]=EARLIER('qv ViewCalendarByMachine'[MachineId]) && ",
              "'qv ViewCalendarByMachine'[ShMon]=EARLIER('qv ViewCalendarByMachine'[ShMon]) && ",
              "'qv ViewCalendarByMachine'[RevisionId]=EARLIER('qv ViewCalendarByMachine'[RevisionId]) && //'qv ViewCalendarByMachine'[IsActive]=False &&",
              "('qv ViewCalendarByMachine'[AbidiHolidays]=0 ))) //|| 'qv ViewCalendarByMachine'[DayName]=\"Thursday\"",
              "",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "RelatedBudgetVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv VersionBudget'[VersionBudgetId],'qv VersionBudget'[RevisionId],'qv ViewCalendarByMachine'[RevisionId])"
          },
          {
            "type": "calculated",
            "name": "CountWorkingDayPerMachinePerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(COUNT('qv ViewCalendarByMachine'[AbidiHolidays]),FILTER('qv ViewCalendarByMachine', ",
              "'qv ViewCalendarByMachine'[MachineId]=EARLIER('qv ViewCalendarByMachine'[MachineId]) && ",
              "'qv ViewCalendarByMachine'[RevisionId]=EARLIER('qv ViewCalendarByMachine'[RevisionId]) && // 'qv ViewCalendarByMachine'[IsActive]=FALSE &&",
              "('qv ViewCalendarByMachine'[AbidiHolidays]=0   // || 'qv ViewCalendarByMachine'[DayName]=\"Thursday\"",
              ")))"
            ]
          },
          {
            "type": "calculated",
            "name": "CountMonthPerRev",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(",
              "   SUMMARIZE(",
              "    FILTER('qv ViewCalendarByMachine',",
              "       'qv ViewCalendarByMachine'[RelatedBudgetVersion]=EARLIER('qv ViewCalendarByMachine'[RelatedBudgetVersion])  && ",
              "       'qv ViewCalendarByMachine'[MachineId] =EARLIER('qv ViewCalendarByMachine'[MachineId])  //&& 'qv ViewCalendarByMachine'[IsActive]=FALSE",
              "          && 'qv ViewCalendarByMachine'[CountWorkingDayPerMachinePerMonth]>15",
              "), 'qv ViewCalendarByMachine'[ShMon] )",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "ActiveMonthBudget",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var sr3= SEARCH(\"R3\",'qv ViewCalendarByMachine'[RevisionName],,0)",
              "var sr2= SEARCH(\"R2\",'qv ViewCalendarByMachine'[RevisionName],,0)",
              "var sr1= SEARCH(\"R1\",'qv ViewCalendarByMachine'[RevisionName],,0)",
              "var sB= SEARCH(\"B\",'qv ViewCalendarByMachine'[RevisionName],,0)",
              "",
              "return ",
              "if( RIGHT('qv ViewCalendarByMachine'[ShMon],2) in {\"07\" , \"08\" ,\"09\"} && sr3<>0 , 402  , -- \"R3\"",
              "    if(RIGHT('qv ViewCalendarByMachine'[ShMon],2) in {\"10\",\"11\",\"12\"} && sB<>0 ,46 , -- \"B\" ",
              "      if(RIGHT('qv ViewCalendarByMachine'[ShMon],2) in {\"04\",\"05\",\"06\"} && sr2<>0 ,49,  --\"R2\" ",
              "        if(RIGHT('qv ViewCalendarByMachine'[ShMon],2) in {\"01\",\"02\",\"03\"} && sr1<>0 ,48 ))))  -- \"R1\"",
              "",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_ViewCalendarByMachine = Source{[Schema=\"qv\",Item=\"ViewCalendarByMachine\"]}[Data]",
                "in",
                "    qv_ViewCalendarByMachine"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi SalesMAT",
        "columns": [
          {
            "name": "RevisionId",
            "dataType": "int64",
            "sourceColumn": "RevisionId"
          },
          {
            "name": "RevisionName",
            "dataType": "string",
            "sourceColumn": "RevisionName"
          },
          {
            "name": "BaseReportModeId",
            "dataType": "int64",
            "sourceColumn": "BaseReportModeId"
          },
          {
            "name": "ReportMode",
            "dataType": "string",
            "sourceColumn": "ReportMode"
          },
          {
            "name": "Year",
            "dataType": "int64",
            "sourceColumn": "Year"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "Qty",
            "dataType": "double",
            "sourceColumn": "Qty"
          },
          {
            "name": "Value",
            "dataType": "double",
            "sourceColumn": "Value"
          },
          {
            "name": "ProductLevelValue",
            "dataType": "double",
            "sourceColumn": "ProductLevelValue"
          },
          {
            "name": "BrandLevelvalue",
            "dataType": "double",
            "sourceColumn": "BrandLevelvalue"
          },
          {
            "name": "IsLastF",
            "dataType": "int64",
            "sourceColumn": "IsLastF"
          },
          {
            "name": "Parent",
            "dataType": "int64",
            "sourceColumn": "Parent"
          },
          {
            "name": "SaleProdId",
            "dataType": "int64",
            "sourceColumn": "SaleProdId"
          },
          {
            "name": "SaleProd",
            "dataType": "string",
            "sourceColumn": "SaleProd"
          },
          {
            "name": "ielastdayinmonth",
            "dataType": "dateTime",
            "sourceColumn": "ielastdayinmonth"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "IsActual",
            "dataType": "boolean",
            "sourceColumn": "IsActual"
          },
          {
            "name": "GrossQuantity",
            "dataType": "double",
            "sourceColumn": "GrossQuantity"
          },
          {
            "name": "NetQuantity",
            "dataType": "double",
            "sourceColumn": "NetQuantity"
          },
          {
            "name": "GrossValue",
            "dataType": "double",
            "sourceColumn": "GrossValue"
          },
          {
            "name": "NetValue",
            "dataType": "double",
            "sourceColumn": "NetValue"
          },
          {
            "name": "FaPrice",
            "dataType": "double",
            "sourceColumn": "FaPrice"
          },
          {
            "name": "qtyactul",
            "dataType": "int64",
            "sourceColumn": "qtyactul"
          },
          {
            "name": "ReportModeId",
            "dataType": "int64",
            "sourceColumn": "ReportModeId"
          },
          {
            "name": "TargetDtlId",
            "dataType": "int64",
            "sourceColumn": "TargetDtlId"
          },
          {
            "name": "ChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "ChangeDate"
          },
          {
            "name": "PersonFullName",
            "dataType": "string",
            "sourceColumn": "PersonFullName"
          },
          {
            "name": "PersonCode",
            "dataType": "int64",
            "sourceColumn": "PersonCode"
          },
          {
            "name": "sampleQty",
            "dataType": "double",
            "sourceColumn": "sampleQty"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_SalesMAT = Source{[Schema=\"pbi\",Item=\"SalesMAT\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(pbi_SalesMAT, each ([IsLastF] = 1) and ([IsActual] = false))",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ]
      },
      {
        "name": "TimeTypeSlicer",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "TimeType",
            "dataType": "string",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": [
                "{",
                "   \"Loading\",",
                "   \"Running\" ",
                " }",
                "    ",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "qv BomDetailsAllVersion",
        "columns": [
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "FromMonth",
            "dataType": "int64",
            "sourceColumn": "FromMonth"
          },
          {
            "name": "ToMonth",
            "dataType": "int64",
            "sourceColumn": "ToMonth"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "SemiRayvarzID",
            "dataType": "int64",
            "sourceColumn": "SemiRayvarzID"
          },
          {
            "name": "SemiProductNameFa",
            "dataType": "string",
            "sourceColumn": "SemiProductNameFa"
          },
          {
            "name": "SemiProductNameEn",
            "dataType": "string",
            "sourceColumn": "SemiProductNameEn"
          },
          {
            "name": "MaterialID",
            "dataType": "int64",
            "sourceColumn": "MaterialID"
          },
          {
            "name": "MaterialName",
            "dataType": "string",
            "sourceColumn": "MaterialName"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "Qty",
            "dataType": "double",
            "sourceColumn": "Qty"
          },
          {
            "name": "Version",
            "dataType": "int64",
            "sourceColumn": "Version"
          },
          {
            "name": "StandardBatchbox",
            "dataType": "double",
            "sourceColumn": "StandardBatchbox"
          },
          {
            "name": "StandardBatchunit",
            "dataType": "double",
            "sourceColumn": "StandardBatchunit"
          },
          {
            "name": "StandardBatchWeightValue",
            "dataType": "double",
            "sourceColumn": "StandardBatchWeightValue"
          },
          {
            "name": "BatchUnitNet",
            "dataType": "double",
            "sourceColumn": "BatchUnitNet"
          },
          {
            "name": "BatchKiloNet",
            "dataType": "double",
            "sourceColumn": "BatchKiloNet",
            "formatString": "0"
          },
          {
            "name": "BatchBoxNet",
            "dataType": "double",
            "sourceColumn": "BatchBoxNet"
          },
          {
            "name": "PreviousBomDtl",
            "dataType": "int64",
            "sourceColumn": "PreviousBomDtl"
          },
          {
            "name": "IsLast",
            "dataType": "boolean",
            "sourceColumn": "IsLast"
          },
          {
            "name": "UnitId",
            "dataType": "int64",
            "sourceColumn": "UnitId"
          },
          {
            "name": "UnitName",
            "dataType": "string",
            "sourceColumn": "UnitName"
          },
          {
            "name": "CreateDate",
            "dataType": "dateTime",
            "sourceColumn": "CreateDate"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "ShMon",
            "dataType": "int64",
            "sourceColumn": "ShMon"
          },
          {
            "name": "ItemTypeName",
            "dataType": "string",
            "sourceColumn": "ItemTypeName"
          },
          {
            "name": "ItemTypeId",
            "dataType": "int64",
            "sourceColumn": "ItemTypeId"
          },
          {
            "name": "CategoryName",
            "dataType": "string",
            "sourceColumn": "CategoryName"
          },
          {
            "name": "CategoryId",
            "dataType": "int64",
            "sourceColumn": "CategoryId"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "Sort",
            "dataType": "int64",
            "sourceColumn": "Sort"
          },
          {
            "name": "stepno",
            "dataType": "int64",
            "sourceColumn": "stepno"
          },
          {
            "type": "calculated",
            "name": "MachineID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[MachineId],'Dimqv Machine'[MachineDscFa],'qv BomDetailsAllVersion'[MachineDscFa])"
          },
          {
            "name": "Alt_MaterialId",
            "dataType": "int64",
            "sourceColumn": "Alt_MaterialId"
          },
          {
            "name": "Alt_MaterialName",
            "dataType": "string",
            "sourceColumn": "Alt_MaterialName"
          },
          {
            "name": "SelectVersion",
            "dataType": "int64",
            "sourceColumn": "SelectVersion"
          },
          {
            "name": "SelectVersionName",
            "dataType": "string",
            "sourceColumn": "SelectVersionName"
          },
          {
            "type": "calculated",
            "name": "ProductStatus",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tblmanufacture = SUMMARIZE(FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[ProcessType]=\"Manufacture\"),'qv BomDetailsAllVersion'[ProcessId])",
              "",
              "var tblpackaging = SUMMARIZE(FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[ProcessType]=\"packaging\"),'qv BomDetailsAllVersion'[ProcessId])",
              "",
              "var tbl = SUMMARIZE(FILTER('qv BomDetailsAllVersion', 'qv BomDetailsAllVersion'[RayvarzId]=EARLIER('qv BomDetailsAllVersion'[RayvarzId])",
              "                         && 'qv BomDetailsAllVersion'[Version]=EARLIER('qv BomDetailsAllVersion'[Version])",
              "                     ),'qv BomDetailsAllVersion'[ProcessId])",
              "",
              "return",
              "",
              " if(COUNTROWS(INTERSECT(tblmanufacture,tbl))>0 && COUNTROWS(INTERSECT(tblpackaging,tbl))>0,\"manufacture & packaging\" ,",
              " if(COUNTROWS(INTERSECT(tblmanufacture,tbl))>0 && COUNTROWS(INTERSECT(tblpackaging,tbl))=0,\"only manufacture\" ,",
              " if(COUNTROWS(INTERSECT(tblmanufacture,tbl))=0 && COUNTROWS(INTERSECT(tblpackaging,tbl))>0,\"only packaging\" )))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv BomDetailsAllVersion'[ProcessId] =10",
              "|| 'qv BomDetailsAllVersion'[ProcessId]=13 ||'qv BomDetailsAllVersion'[ProcessId]=14||",
              "'qv BomDetailsAllVersion'[ProcessId]=15||'qv BomDetailsAllVersion'[ProcessId]=16 ||",
              "'qv BomDetailsAllVersion'[ProcessId]=22||'qv BomDetailsAllVersion'[ProcessId]=38 ||",
              "'qv BomDetailsAllVersion'[ProcessId]=11 ||'qv BomDetailsAllVersion'[ProcessId]=12 , \"Manufacture\" , ",
              "if( 'qv BomDetailsAllVersion'[ProcessId]=17 ||'qv BomDetailsAllVersion'[ProcessId]=18 ||",
              "  'qv BomDetailsAllVersion'[ProcessId]=19||'qv BomDetailsAllVersion'[ProcessId]=20 ||",
              " 'qv BomDetailsAllVersion'[ProcessId]=23||'qv BomDetailsAllVersion'[ProcessId]=21 ||",
              "  'qv BomDetailsAllVersion'[ProcessId]=24||'qv BomDetailsAllVersion'[ProcessId]=25||'qv BomDetailsAllVersion'[ProcessId]=42",
              " ,\"Packaging\"))"
            ]
          },
          {
            "name": "VersionNote",
            "dataType": "string",
            "sourceColumn": "VersionNote"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 8",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'qv BomDetailsAllVersion'[RayvarzId]&\"-\"&'qv BomDetailsAllVersion'[Version]"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "Note",
            "dataType": "string",
            "sourceColumn": "Note"
          },
          {
            "name": "ProductionCenterName",
            "dataType": "string",
            "sourceColumn": "ProductionCenterName"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_BomDetailsAllVersion = Source{[Schema=\"qv\",Item=\"BomDetailsAllVersion\"]}[Data]",
                "in",
                "    qv_BomDetailsAllVersion"
              ]
            }
          }
        ]
      },
      {
        "name": "UnitTypeSlicer",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "UnitType",
            "dataType": "string",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": [
                "{",
                "    \"Time\",",
                "   \"Box\",",
                "    \"Unit\",",
                "    \"Kilo\",",
                "    \"Batch\",\"Count\" ,\"Person\" }",
                "    ",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 4",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineDscEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SiteType",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[SiteType]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "KiloAlcPerMachinePerMonth",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[KiloAlcPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BoxAlcPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BoxAlcPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "UnitAlcPerMachinePerMonth",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[UnitAlcPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchAlcPerMachinePerMonth",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BatchAlcPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TotalCapacityMachinePerMonth(h)",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[TotalCapacityMachinePerMonth(h)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardTrainingPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardTrainingPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardPMPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardPMPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardRestingPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardRestingPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardSPCPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardSPCPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "WholeTimePerMachinePerMonth(h)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[WholeTimePerMachinePerMonth(h)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Subtract",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Subtract]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SumCycle",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SumCycle]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 4",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE (",
                "                        'qv MPS',",
                "                        'qv MPS'[ProcessNameEn],",
                "                        'qv MPS'[MachineId],",
                "                        'qv MPS'[MachineDscEn],",
                "                        'qv MPS'[RevName],",
                "                        'qv MPS'[Month],",
                "                        'qv MPS'[SiteType],",
                "                        'qv MPS'[KiloAlcPerMachinePerMonth],",
                "                        'qv MPS'[BoxAlcPerMachinePerMonth],",
                "                        'qv MPS'[UnitAlcPerMachinePerMonth],",
                "                        'qv MPS'[BatchAlcPerMachinePerMonth],",
                "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
                "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
                "                        'qv MPS'[StandardPMPerMachinePerMonth],",
                "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
                "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
                "                        'qv MPS'[WholeTimePerMachinePerMonth(h)],",
                "                        \"Subtract\", ('qv MPS'[TotalCapacityMachinePerMonth(h)]- 'qv MPS'[StandardTrainingPerMachinePerMonth]-",
                "                                     'qv MPS'[StandardPMPerMachinePerMonth]-'qv MPS'[StandardRestingPerMachinePerMonth]-'qv MPS'[StandardSPCPerMachinePerMonth]),",
                "                       \"SumCycle\",sum('qv MPS'[TotalTimeWholeBatch(h)])",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 3",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchSize",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BatchSize]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchUnit",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BatchUnit]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchKilo",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BatchKilo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Coefficient",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Coefficient]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TotalTimePerBatch(h)",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[TotalTimePerBatch(h)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FreeTimePerProduct",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[FreeTimePerProduct]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchFreeCap",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchFreeCap]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineDscEn]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 3",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "var VRunningAllocation = CALCULATE (",
                "                      SUMX (",
                "                          SUMMARIZE (",
                "                        'qv MPS',",
                "                        'qv MPS'[MachineId],",
                "                        'qv MPS'[Month],",
                "                        'qv MPS'[RevName],",
                "                        \"sumcycle\", SUM ( 'qv MPS'[TotalTimeWholeBatch(h)] )",
                "                    ),",
                "                    [sumcycle]",
                "                )",
                "            )",
                "",
                "var VRunningCapacity =   CALCULATE (",
                "                 SUMX (",
                "                    SUMMARIZE (",
                "                        'qv MPS',",
                "                        'qv MPS'[MachineId],",
                "                        'qv MPS'[Month],",
                "                        'qv MPS'[RevName],",
                "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],",
                "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
                "                        'qv MPS'[StandardPMPerMachinePerMonth],",
                "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
                "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
                "                        \"subtract\",",
                "                         ('qv MPS'[TotalCapacityMachinePerMonth(h)] - 'qv MPS'[StandardTrainingPerMachinePerMonth] - 'qv MPS'[StandardPMPerMachinePerMonth] ",
                "                           - 'qv MPS'[StandardSPCPerMachinePerMonth] - 'qv MPS'[StandardRestingPerMachinePerMonth]) ",
                "                    ),",
                "                    [subtract]",
                "                )",
                "            )",
                "",
                "",
                " Var freeTime = (VRunningCapacity-VRunningAllocation)/60",
                "return ",
                " SUMMARIZE (",
                "                         'qv MPS',",
                "                         'qv MPS'[MachineId],",
                "                         'qv MPS'[MachineDscEn],",
                "                         'qv MPS'[Month],",
                "                         'qv MPS'[RevName],",
                "                         'qv MPS'[RayvarzId],",
                "                         'qv MPS'[BatchSize],",
                "                         'qv MPS'[BatchUnit],",
                "                         'qv MPS'[BatchKilo],",
                "                         'qv MPS'[Coefficient],",
                "                         'qv MPS'[TotalTimePerBatch(h)], ",
                "                          \"FreeTimePerProduct\", freeTime * 1 , // 'qv MPS'[Coefficient],",
                "                          \"BatchFreeCap\", divide(freeTime * 'qv MPS'[Coefficient],'qv MPS'[TotalTimePerBatch(h)])",
                "",
                "                    ) // [BatchFreeCap])",
                " ",
                "",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "HrMachineCapacity",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineDscEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TotalCapacityMachinePerMonth(h)",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[TotalCapacityMachinePerMonth(h)]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardTrainingPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardTrainingPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardPMPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardPMPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardRestingPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardRestingPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardSPCPerMachinePerMonth",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[StandardSPCPerMachinePerMonth]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Subtract",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Subtract]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SumCycle",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SumCycle]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineMonthCal",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineMonthCal]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 5",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE (",
                "                        'qv MPS',",
                "                        'qv MPS'[ProcessId],",
                "                        'qv MPS'[ProcessNameEn],",
                "                        'qv MPS'[MachineId],",
                "                        'qv MPS'[MachineDscEn],",
                "                        'qv MPS'[RevName],",
                "                        'qv MPS'[RevId],",
                "                        'qv MPS'[Month],      ",
                "                        'qv MPS'[TotalCapacityMachinePerMonth(h)],   //LoadingCapacity",
                "                        'qv MPS'[MachineMonthCal],                    //LadingAllocation",
                "                        'qv MPS'[StandardTrainingPerMachinePerMonth],",
                "                        'qv MPS'[StandardPMPerMachinePerMonth],",
                "                        'qv MPS'[StandardRestingPerMachinePerMonth],",
                "                        'qv MPS'[StandardSPCPerMachinePerMonth],",
                "                         \"Subtract\", ('qv MPS'[TotalCapacityMachinePerMonth(h)]- 'qv MPS'[StandardTrainingPerMachinePerMonth]-'qv MPS'[StandardPMPerMachinePerMonth]",
                "                                     -'qv MPS'[StandardRestingPerMachinePerMonth]-'qv MPS'[StandardSPCPerMachinePerMonth]),   //RunningCapacity",
                "                       \"SumCycle\",sum('qv MPS'[WholeBatchCal])    //RunningAllocation",
                "                         ",
                ")",
                "",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "qv Process",
        "columns": [
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "ProcessHdrId",
            "dataType": "int64",
            "sourceColumn": "ProcessHdrId"
          },
          {
            "name": "ProcessNameEn",
            "dataType": "string",
            "sourceColumn": "ProcessNameEn"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "ProcessAbr",
            "dataType": "string",
            "sourceColumn": "ProcessAbr"
          },
          {
            "name": "DisplayUnit",
            "dataType": "int64",
            "sourceColumn": "DisplayUnit"
          },
          {
            "name": "WIPCode",
            "dataType": "int64",
            "sourceColumn": "WIPCode"
          },
          {
            "name": "IsBottleNeckProcess",
            "dataType": "boolean",
            "sourceColumn": "IsBottleNeckProcess"
          },
          {
            "name": "RayWIPCode",
            "dataType": "int64",
            "sourceColumn": "RayWIPCode"
          },
          {
            "name": "Grouping",
            "dataType": "int64",
            "sourceColumn": "Grouping"
          },
          {
            "name": "DisplayUnitOperation",
            "dataType": "int64",
            "sourceColumn": "DisplayUnitOperation"
          },
          {
            "name": "RayvarzCenter",
            "dataType": "int64",
            "sourceColumn": "RayvarzCenter"
          },
          {
            "name": "rayCenter",
            "dataType": "int64",
            "sourceColumn": "rayCenter"
          },
          {
            "name": "MinLeadTime",
            "dataType": "int64",
            "sourceColumn": "MinLeadTime"
          },
          {
            "name": "MaxLeadTime",
            "dataType": "int64",
            "sourceColumn": "MaxLeadTime"
          },
          {
            "name": "NextProcessNameFa",
            "dataType": "string",
            "sourceColumn": "NextProcessNameFa"
          },
          {
            "name": "QcProcessId",
            "dataType": "int64",
            "sourceColumn": "QcProcessId"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_Process = Source{[Schema=\"qv\",Item=\"Process\"]}[Data]",
                "in",
                "    qv_Process"
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 5",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ModifiedTimeWholeBatch",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ModifiedTimeWholeBatch]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ModifiedBatchCount",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ModifiedBatchCount]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "aaa",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[aaa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "bbb",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[bbb]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 5",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "SUMMARIZE(FILTER('qv MPS' ,'qv MPS'[ModifiedTimeWholeBatch]<>BLANK()),",
                "'qv MPS'[RayvarzId],",
                "'qv MPS'[MachineID] ,'qv MPS'[ProcessId],",
                "'qv MPS'[Month],'qv MPS'[ModifiedTimeWholeBatch], 'qv MPS'[ModifiedBatchCount],\"aaa\",max('qv MPS'[BatchSize]) ,\"bbb\",max('qv MPS'[NoInBox])  )",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 6",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchCount",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchCount]",
            "formatString": "0.00"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SumTotalTime",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SumTotalTime]",
            "formatString": "0.00"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculated",
            "name": "ProcessName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv Process'[ProcessNameEn] ,'qv Process'[ProcessId] , 'CalculatedTable 6'[ProcessId])"
          },
          {
            "type": "calculated",
            "name": "MachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[MachineDscEn] , 'Dimqv Machine'[MachineId] , 'CalculatedTable 6'[MachineID])"
          },
          {
            "type": "calculatedTableColumn",
            "name": "NoInBox",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[NoInBox]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchBox",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[BatchBox]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProductNameEn]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 6",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "UNION(",
                "",
                "ADDCOLUMNS(",
                " SUMMARIZE( FILTER('qv MPS' , 'qv MPS'[IsLastRevID]=1),   //'qv MPS'[ModifiedTimeWholeBatch]<>BLANK() &&",
                "           'qv MPS'[RayvarzId], 'qv MPS'[MachineID] , 'qv MPS'[ProcessId],'qv MPS'[Month],'qv MPS'[ProductNameEn],",
                "    \"SumTotalTime\",sum('qv MPS'[CalTotalTimeWholeBatch(h)]) ,\"BatchCount\", max('qv MPS'[BatchCount]) , \"NoInBox\",max('qv MPS'[NoInBox]), \"BatchBox\",max('qv MPS'[BatchSize])  ) , \"Type\",\"Plan\")",
                "",
                "",
                ",",
                "",
                "ADDCOLUMNS(",
                " SUMMARIZE(FILTER('qv PerformanceReport' , 'qv PerformanceReport'[PlanTypeId]=26 ),//&& 'qv PerformanceReport'[BoxToUnit]<>0) , ",
                "'qv PerformanceReport'[RayvarzId],",
                "'qv PerformanceReport'[MachineID] , 'qv PerformanceReport'[ProcessId],",
                " 'qv PerformanceReport'[ShMon],'qv PerformanceReport'[ProductNameEn],'qv PerformanceReport'[ActualTotalTimePerRayPerMonthPerMachine],'qv PerformanceReport'[CountBatchNo-Bom],'qv PerformanceReport'[BoxToUnit],",
                "",
                " \"BatchBox\",max('qv PerformanceReport'[BatchBoxPerProductPerMonthPerMachine])",
                "            // sume hameye bom hash dar yek mah",
                "     ),\"Type\",\"Actual\" )",
                ")"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "BatchTimeLastBudget",
            "expression": [
              "DIVIDE(",
              "SUM('CalculatedTable 6'[SumTotalTime]), SUM('CalculatedTable 6'[BatchCount]))",
              ""
            ]
          },
          {
            "name": "batchboxbatchcountLastBudget",
            "expression": " CALCULATE(MAX('CalculatedTable 6'[BatchBox]) * sum('CalculatedTable 6'[BatchCount]))",
            "formatString": "#,0.00"
          }
        ]
      },
      {
        "name": "qv BudgetProductMachineIndex",
        "columns": [
          {
            "name": "ProductMachineId",
            "dataType": "int64",
            "sourceColumn": "ProductMachineId"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "Version",
            "dataType": "int64",
            "sourceColumn": "Version"
          },
          {
            "name": "IsLast",
            "dataType": "boolean",
            "sourceColumn": "IsLast"
          },
          {
            "name": "CatalogNominalSpeed",
            "dataType": "double",
            "sourceColumn": "CatalogNominalSpeed"
          },
          {
            "name": "CatalogOperatorCount",
            "dataType": "double",
            "sourceColumn": "CatalogOperatorCount"
          },
          {
            "name": "SpeedUnitId",
            "dataType": "int64",
            "sourceColumn": "SpeedUnitId"
          },
          {
            "name": "UnitName",
            "dataType": "string",
            "sourceColumn": "UnitName"
          },
          {
            "name": "CustomizeNominalSpeed",
            "dataType": "double",
            "sourceColumn": "CustomizeNominalSpeed"
          },
          {
            "name": "CustomizeOperatorCount",
            "dataType": "double",
            "sourceColumn": "CustomizeOperatorCount"
          },
          {
            "name": "NoSubBatch",
            "dataType": "int64",
            "sourceColumn": "NoSubBatch"
          },
          {
            "name": "CIPTime",
            "dataType": "int64",
            "sourceColumn": "CIPTime"
          },
          {
            "name": "LoadUnloadTime",
            "dataType": "int64",
            "sourceColumn": "LoadUnloadTime"
          },
          {
            "name": "StandardSpeed",
            "dataType": "double",
            "sourceColumn": "StandardSpeed"
          },
          {
            "name": "OperatorCount",
            "dataType": "double",
            "sourceColumn": "OperatorCount"
          },
          {
            "name": "BypassSubBatch",
            "dataType": "boolean",
            "sourceColumn": "BypassSubBatch"
          },
          {
            "name": "FormingCount",
            "dataType": "int64",
            "sourceColumn": "FormingCount"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "SemiRayvarzID",
            "dataType": "int64",
            "sourceColumn": "SemiRayvarzID"
          },
          {
            "name": "SemiProductNameFa",
            "dataType": "string",
            "sourceColumn": "SemiProductNameFa"
          },
          {
            "name": "SemiProductNameEn",
            "dataType": "string",
            "sourceColumn": "SemiProductNameEn"
          },
          {
            "name": "SemiProductId",
            "dataType": "int64",
            "sourceColumn": "SemiProductId"
          },
          {
            "name": "OperationAllocation",
            "dataType": "int64",
            "sourceColumn": "OperationAllocation"
          },
          {
            "name": "VersionIndex",
            "dataType": "int64",
            "sourceColumn": "VersionIndex"
          },
          {
            "name": "stepno",
            "dataType": "int64",
            "sourceColumn": "stepno"
          },
          {
            "name": "BomVersion",
            "dataType": "int64",
            "sourceColumn": "BomVersion"
          },
          {
            "name": "ProductMachineStart",
            "dataType": "dateTime",
            "sourceColumn": "ProductMachineStart"
          },
          {
            "name": "ProductMachineFinish",
            "dataType": "dateTime",
            "sourceColumn": "ProductMachineFinish"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "BudgetVersion",
            "dataType": "int64",
            "sourceColumn": "BudgetVersion"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_BudgetProductMachineIndex = Source{[Schema=\"qv\",Item=\"BudgetProductMachineIndex\"]}[Data]",
                "in",
                "    qv_BudgetProductMachineIndex"
              ]
            }
          }
        ]
      },
      {
        "name": "NewAvailability",
        "columns": [
          {
            "name": "MachindeID",
            "dataType": "int64",
            "sourceColumn": "MachindeID"
          },
          {
            "name": "MachindeName",
            "dataType": "string",
            "sourceColumn": "MachindeName"
          },
          {
            "name": "ActualAvailability",
            "dataType": "double",
            "sourceColumn": "ActualAvailability",
            "formatString": "0.00"
          },
          {
            "name": "NewActualAvailability",
            "dataType": "double",
            "sourceColumn": "NewActualAvailability"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"bZHNboQwDIRfBeW8iojzf23VU497RBy6K1RoEZFg+/7FdtC6Kpc40XzjSZyuUwDqom7ztD2GtUn7PiTtsGTdqv7SKdMKwLKCQGwPwAogoGK15ZIJ8EEAmRVMim5vhAC4LAi8UCQs68AJTshx3yejDRduYIwAXFXgDyGf6c8IcEkg5hTxchbmlMH097Let7EJmJPRkl0dBU7iOnyV5VOq7f4a6v9ULZKZlqShXhCP39M8fSwNkGRpqW7/VC2Qkd38Szi2jXt7888LdKxu1h3fu/4x/sdr+VmO2WSvPZfE4UkAwFbPJdUELwgKDzoehQjs+1K2+9i8XcfHWm7DjDrw0ve/\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [MachindeID = _t, MachindeName = _t, ActualAvailability = _t, NewActualAvailability = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"MachindeID\", Int64.Type}, {\"MachindeName\", type text}, {\"ActualAvailability\", type number}, {\"NewActualAvailability\", type number}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 7",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv Machine[MachineDscFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[YearWeekNumber]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[PlanTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Duration",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Duration]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "box",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[box]"
          },
          {
            "type": "calculated",
            "name": "NetTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " 'CalculatedTable 7'[Duration]-'CalculatedTable 7'[plannedstp-Rest]",
              ""
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShiladiYear]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "version",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[version]"
          },
          {
            "type": "calculated",
            "name": "NewPlannedStp",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": " if('CalculatedTable 7'[PlanTypeId]=26, 'CalculatedTable 7'[plannedstp-Rest])"
          },
          {
            "type": "calculatedTableColumn",
            "name": "plannedstp-Rest",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[plannedstp-Rest]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "unplannedstp-DownTime",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[unplannedstp-DownTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "PlannedStp<>Resting",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[PlannedStp<>Resting]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 8",
            "source": {
              "type": "calculated",
              "expression": [
                "--union(",
                "ADDCOLUMNS(SUMMARIZE('qv PerformanceReport',   --FILTER('qv PerformanceReport','qv PerformanceReport'[PlanTypeId] in {26,27,28})",
                "'qv PerformanceReport'[MachineID],'Dimqv Machine'[MachineDscFa],'qv PerformanceReport'[YearWeekNumber],",
                "'qv PerformanceReport'[Typeprog],'qv PerformanceReport'[PlanTypeId],'qv PerformanceReport'[ShiladiYear],\"version\",\"\",",
                "\"Duration\",sum('qv PerformanceReport'[DurationHdr])/60,",
                "\"box\",sum('qv PerformanceReport'[TotalProductionBox]),\"plannedstp-Rest\",sum('qv PerformanceReport'[PlannedStpPerBatch(Resting)])/60,",
                "\"unplannedstp-DownTime\",SUM('qv PerformanceReport'[UnplannedStpPerBatch-DownTime])/60,",
                "\"PlannedStp<>Resting\",SUM('qv PerformanceReport'[PlannedStp<>Resting])/60",
                "),\"Type\",\"Actual\")",
                "",
                "/*",
                ",",
                "",
                "ADDCOLUMNS(SUMMARIZE('qv CompareDailyPlanHistory--',  -- FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId] in {26,27,28}",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[YearWeekNumber],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[ShiladiYear],",
                "'qv CompareDailyPlanHistory'[version],\"Duration\",sum('qv CompareDailyPlanHistory--'[NewTimeMin])/60,",
                "  \"Box\",sum('qv CompareDailyPlanHistory--'[Box]),",
                "\"plannedstp-Rest\",MAX('qv CompareDailyPlanHistory--'[PlannedStpPerMachinePerWeek(min)])/60,\"unplannedstp-DownTime\",0,",
                "\"PlannedStp<>Resting\",0),\"Type\",\"Weekly\")",
                ")",
                "*/",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "qv CompareDailyPlanHistory",
        "columns": [
          {
            "name": "WeeklyplanSmlP",
            "dataType": "int64",
            "sourceColumn": "WeeklyplanSmlP",
            "sourceProviderType": "Integer"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BacthNo",
            "dataType": "string",
            "sourceColumn": "BacthNo",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SubBacthNo",
            "dataType": "int64",
            "sourceColumn": "SubBacthNo",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DateID",
            "dataType": "int64",
            "sourceColumn": "DateID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Unit",
            "dataType": "double",
            "sourceColumn": "Unit",
            "sourceProviderType": "Double"
          },
          {
            "name": "Kilo",
            "dataType": "double",
            "sourceColumn": "Kilo",
            "sourceProviderType": "Double"
          },
          {
            "name": "Box",
            "dataType": "double",
            "sourceColumn": "Box",
            "sourceProviderType": "Double"
          },
          {
            "name": "NetTimeP",
            "dataType": "int64",
            "sourceColumn": "NetTimeP",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Shift",
            "dataType": "int64",
            "sourceColumn": "Shift",
            "sourceProviderType": "Integer"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "version",
            "dataType": "int64",
            "sourceColumn": "version",
            "sourceProviderType": "Integer"
          },
          {
            "name": "StartTime",
            "dataType": "string",
            "sourceColumn": "StartTime",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "FinishTime",
            "dataType": "string",
            "sourceColumn": "FinishTime",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TimeMin",
            "dataType": "int64",
            "sourceColumn": "TimeMin",
            "sourceProviderType": "Integer"
          },
          {
            "name": "NetTime",
            "dataType": "int64",
            "sourceColumn": "NetTime",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PlanTypeId",
            "dataType": "int64",
            "sourceColumn": "PlanTypeId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "StartID",
            "dataType": "int64",
            "sourceColumn": "StartID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "FinishID",
            "dataType": "int64",
            "sourceColumn": "FinishID",
            "sourceProviderType": "Integer"
          },
          {
            "name": "ConfigName",
            "dataType": "string",
            "sourceColumn": "ConfigName",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Month",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "LEFT('qv CompareDailyPlanHistory'[DateID],6)"
          },
          {
            "type": "calculated",
            "name": "TotalTimePerMachineperMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "DIVIDE(CALCULATE(sum('qv CompareDailyPlanHistory'[TimeMin]) , ",
              "FILTER('qv CompareDailyPlanHistory',",
              "'qv CompareDailyPlanHistory'[MachineId]=EARLIER('qv CompareDailyPlanHistory'[MachineId]) ",
              "&& 'qv CompareDailyPlanHistory'[Month]=EARLIER('qv CompareDailyPlanHistory'[Month]) &&",
              "not 'qv CompareDailyPlanHistory'[ConfigName] in {\"off\" , \"off2\"})),60)"
            ]
          },
          {
            "type": "calculated",
            "name": "StopInNetTime(Resting-min)",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv CompareDailyPlanHistory'[NextFinishDay]<>'qv CompareDailyPlanHistory'[DateID] , ",
              "SUMX(SUMMARIZE(FILTER('qv MachineTimeOffIndex', ",
              "'qv CompareDailyPlanHistory'[MachineId]='qv MachineTimeOffIndex'[MachineId] ",
              "&& 'qv CompareDailyPlanHistory'[Shift] ='qv MachineTimeOffIndex'[ShiftId] &&",
              " 'qv MachineTimeOffIndex'[VersionOff]= 'qv CompareDailyPlanHistory'[RelatedStopVersionOff] &&",
              " 'qv MachineTimeOffIndex'[StopageCode]<>0 &&",
              "(",
              "",
              "(",
              " 'qv CompareDailyPlanHistory'[starttime2]<='qv MachineTimeOffIndex'[StartOff]",
              "&& 'qv CompareDailyPlanHistory'[starttime2]<'qv MachineTimeOffIndex'[FinishOff]",
              "&& 'qv CompareDailyPlanHistory'[finishtimeNew]>='qv MachineTimeOffIndex'[FinishOff]",
              "&& 'qv CompareDailyPlanHistory'[finishtimeNew]>'qv MachineTimeOffIndex'[StartOff]",
              ")",
              "||",
              "(",
              " TIMEVALUE(\"00:00\")<='qv MachineTimeOffIndex'[StartOff]",
              " && TIMEVALUE(\"00:00\")<='qv MachineTimeOffIndex'[FinishOff]",
              "&& 'qv CompareDailyPlanHistory'[finishtime2]>='qv MachineTimeOffIndex'[FinishOff]",
              " &&'qv CompareDailyPlanHistory'[finishtime2]>'qv MachineTimeOffIndex'[StartOff]",
              ")",
              "",
              ")",
              "",
              "",
              "),'qv MachineTimeOffIndex'[StartOff],'qv MachineTimeOffIndex'[FinishOff],'qv MachineTimeOffIndex'[Duration]),",
              " 'qv MachineTimeOffIndex'[Duration])",
              ",",
              "",
              "SUMX(SUMMARIZE(FILTER('qv MachineTimeOffIndex', ",
              "'qv CompareDailyPlanHistory'[MachineId]='qv MachineTimeOffIndex'[MachineId] ",
              "&& 'qv CompareDailyPlanHistory'[Shift] ='qv MachineTimeOffIndex'[ShiftId] &&",
              "'qv MachineTimeOffIndex'[StopageCode]<>0 &&",
              "'qv MachineTimeOffIndex'[VersionOff]='qv CompareDailyPlanHistory'[RelatedStopVersionOff] ",
              "&&",
              "(",
              " 'qv CompareDailyPlanHistory'[starttime2]<='qv MachineTimeOffIndex'[StartOff]",
              "&& 'qv CompareDailyPlanHistory'[starttime2]<'qv MachineTimeOffIndex'[FinishOff]",
              "&& 'qv CompareDailyPlanHistory'[finishtimenew]>='qv MachineTimeOffIndex'[FinishOff]",
              "&& 'qv CompareDailyPlanHistory'[finishtimenew]>'qv MachineTimeOffIndex'[StartOff]",
              ")",
              " ),'qv MachineTimeOffIndex'[StartOff],'qv MachineTimeOffIndex'[FinishOff],'qv MachineTimeOffIndex'[Duration]),",
              "  'qv MachineTimeOffIndex'[Duration])",
              "",
              " )  ",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewNetTime",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " 'qv CompareDailyPlanHistory'[NewTimeMin]-'qv CompareDailyPlanHistory'[StopInNetTime(Resting-min)]"
          },
          {
            "type": "calculated",
            "name": "ProductNameEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('Dimqv ProductExcel'[ProductNameEn]) ,FILTER('Dimqv ProductExcel',",
              "              'Dimqv ProductExcel'[RayvarzNumber]='qv CompareDailyPlanHistory'[RayvarzId]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewTimeMin",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " IF('qv CompareDailyPlanHistory'[RayvarzId]=0,0, IF(AND('qv CompareDailyPlanHistory'[RayvarzId]=0,'qv CompareDailyPlanHistory'[NetTime]<=10),0,",
              "IF(AND('qv CompareDailyPlanHistory'[BacthNo]<>\"0\",'qv CompareDailyPlanHistory'[NetTime]<=10 && 'qv CompareDailyPlanHistory'[PlanTypeId]=26),0,'qv CompareDailyPlanHistory'[TimeMin])))",
              "",
              "",
              "",
              "/*",
              "var v1 = DATEDIFF('qv CompareDailyPlan'[StartTime],'qv CompareDailyPlan'[FinishTime],MINUTE)",
              "return",
              "if(v1>0,v1,v1+1440)",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " LOOKUPVALUE( 'pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],",
              "  'qv CompareDailyPlanHistory'[DateID],'pbi BaseDate'[ShiladiYear],'qv CompareDailyPlanHistory'[ShiladiYear])"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardStopPerMachinePerPlanPerShift",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              " if('qv CompareDailyPlanHistory'[NetTime]>=10,",
              "  CALCULATE(sum('qv CompareDailyPlanHistory'[StopInNetTime(Resting-min)]),FILTER('qv CompareDailyPlanHistory',",
              "  'qv CompareDailyPlanHistory'[MachineId]=EARLIER('qv CompareDailyPlanHistory'[MachineId]) &&",
              "  'qv CompareDailyPlanHistory'[Shift]=EARLIER('qv CompareDailyPlanHistory'[Shift]) &&",
              "  'qv CompareDailyPlanHistory'[DateID]=EARLIER( 'qv CompareDailyPlanHistory'[DateID]) &&",
              "  'qv CompareDailyPlanHistory'[PlanTypeId]=EARLIER('qv CompareDailyPlanHistory'[PlanTypeId])",
              "  )))",
              "",
              "",
              "/*",
              "if('qv CompareDailyPlanHistory'[PlanTypeId]=26 && 'qv CompareDailyPlanHistory'[NetTime]>=10,",
              "LOOKUPVALUE('qv MachineTimeOffIndex'[StopPerMashinePerShift],'qv MachineTimeOffIndex'[MachineId],'qv CompareDailyPlanHistory'[MachineId],",
              "           'qv MachineTimeOffIndex'[ShiftId],'qv CompareDailyPlanHistory'[Shift])",
              ")",
              "*/",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'qv CompareDailyPlanHistory'[DateID])"
          },
          {
            "type": "calculated",
            "name": "NextfinishDay",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var rnk=CALCULATE(min('pbi basedate'[daterank]),",
              "FILTER('pbi basedate','pbi basedate'[DateId]='qv CompareDailyPlanHistory'[DateID]))",
              "return",
              " if(DATEDIFF(\"00:00\",'qv CompareDailyPlanHistory'[FinishTime2],MINUTE)<=410 && ",
              "    DATEDIFF(\"00:00\",'qv CompareDailyPlanHistory'[FinishTime2],MINUTE)>0  && ",
              "    DATEDIFF(\"00:00\",'qv CompareDailyPlanHistory'[StartTime2],MINUTE)>=410",
              "   -- &&'qv CompareDailyPlanHistory'[shift] in {3,2}",
              ",  CALCULATE(min('pbi basedate'[DateId]), filter('pbi basedate','pbi basedate'[daterank]=rnk+1)),",
              "  'qv CompareDailyPlanHistory'[DateID])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "FinishTimeNew",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": [
              "if('qv CompareDailyPlanHistory'[NextFinishDay]<>'qv CompareDailyPlanHistory'[DateID],",
              "TIMEVALUE(\"23:59\"),'qv CompareDailyPlanHistory'[finishtime2])",
              ""
            ]
          },
          {
            "name": "BomVersion",
            "dataType": "int64",
            "sourceColumn": "BomVersion",
            "sourceProviderType": "Integer"
          },
          {
            "type": "calculated",
            "name": "AvailabilityTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalAvailabilityTimePerBatch(min)]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv CompareDailyPlanHistory'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]",
              " && 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] ",
              "&& 'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "PerformanceTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[OdlPerformanceTimePerBatch(min)]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              " 'qv CompareDailyPlanHistory'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]",
              "  && 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] ",
              " && 'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "QualityTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CalQualityTimePerBatch(min)]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv CompareDailyPlanHistory'[RayvarzId]='qv CompareDailyPlanHistory'[RayvarzId] &&",
              " 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] ",
              "&& 'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[StandardSpeed]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv CompareDailyPlanHistory'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]",
              " && 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] ",
              " && 'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "CNominalSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[CustomizeNominalSpeed]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv CompareDailyPlanHistory'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId]",
              " && 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] ",
              "&& 'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "VersionType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('qv CompareDailyPlanHistory'[Name]=\"4Week\" , \"4Week Plan\",",
              "",
              " var LastVersion = CALCULATE(max('qv CompareDailyPlanHistory'[version]) , ",
              " FILTER('qv CompareDailyPlanHistory',",
              " 'qv CompareDailyPlanHistory'[ShiladiYear]=EARLIER('qv CompareDailyPlanHistory'[ShiladiYear])",
              "  && 'qv CompareDailyPlanHistory'[YearWeekNumber]=EARLIER('qv CompareDailyPlanHistory'[YearWeekNumber])  ",
              " ))",
              "",
              " -- && 'qv CompareDailyPlanHistory'[RayvarzId]=EARLIER('qv CompareDailyPlanHistory'[RayvarzId])   ",
              "  --&& 'qv CompareDailyPlanHistory'[MachineId]=EARLIER('qv CompareDailyPlanHistory'[MachineId])",
              "",
              "var FirstVersion = ",
              "CALCULATE(min('qv CompareDailyPlanHistory'[version]) , ",
              "FILTER('qv CompareDailyPlanHistory',",
              "'qv CompareDailyPlanHistory'[ShiladiYear]=EARLIER('qv CompareDailyPlanHistory'[ShiladiYear])",
              " && 'qv CompareDailyPlanHistory'[YearWeekNumber]=EARLIER('qv CompareDailyPlanHistory'[YearWeekNumber])",
              "))",
              "",
              "-- && 'qv CompareDailyPlanHistory'[RayvarzId]=EARLIER('qv CompareDailyPlanHistory'[RayvarzId])   ",
              " --&& 'qv CompareDailyPlanHistory'[MachineId]=EARLIER('qv CompareDailyPlanHistory'[MachineId])",
              "",
              " return ",
              " if(FirstVersion=LastVersion ,\"First Last Plan\",",
              "    if('qv CompareDailyPlanHistory'[version]=FirstVersion , \"First Plan\" ,",
              "       if( LastVersion=2 , \"Second Last Plan\" ,        -- if( 'qv CompareDailyPlanHistory'[version]=LastVersion , \"Last Plan\" ,",
              "         if( 'qv CompareDailyPlanHistory'[version]=2 , \"Second Plan\" ,   ",
              " if('qv CompareDailyPlanHistory'[version]=LastVersion  , \"Last Plan\" ,\"Other Versions\"))    --- if('qv CompareDailyPlanHistory'[version]=2 , \"Second Plan\" ,\"Other Versions\"))",
              "",
              "))))"
            ]
          },
          {
            "type": "calculated",
            "name": "VersionTypeNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "  if('qv CompareDailyPlanHistory'[VersionType]=\"Last Plan\" , 1 ,",
              "      if('qv CompareDailyPlanHistory'[VersionType]= \"First Plan\" ,2 ,",
              "       if('qv CompareDailyPlanHistory'[VersionType]=\"4Week Plan\" , 3 ,",
              "        if('qv CompareDailyPlanHistory'[VersionType]=\"Second plan\" , 4 ,",
              "          if('qv CompareDailyPlanHistory'[VersionType]=\"First Last Plan\" , 5,",
              "           if('qv CompareDailyPlanHistory'[VersionType]=\"Second Last Plan\" , 6,0",
              "))))))"
            ]
          },
          {
            "name": "Remark",
            "dataType": "string",
            "sourceColumn": "Remark",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Name",
            "dataType": "string",
            "sourceColumn": "Name",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "LoudUnloadTimePerMachinePerPoduct",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[LoadUnloadTime]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion',",
              "'qv CompareDailyPlanHistory'[RayvarzId]='qv ProductMachineVisualIndexByBomVersion'[RayvarzId] &&",
              " 'qv CompareDailyPlanHistory'[MachineId]='qv ProductMachineVisualIndexByBomVersion'[MachineId] && ",
              "'qv CompareDailyPlanHistory'[BomVersion]='qv ProductMachineVisualIndexByBomVersion'[BomVersion]))"
            ]
          },
          {
            "type": "calculated",
            "name": "PlannedStpPerMachinePerWeek",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[ShiladiYear],",
              "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[machineid] ,'qv CompareDailyPlanHistory'[DateID],",
              "'qv CompareDailyPlanHistory'[PlanTypeId],\"bb\",max('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift]))",
              "",
              "return ",
              "   sumx(FILTER(tbl ,'qv CompareDailyPlanHistory'[MachineId]=EARLIER('qv CompareDailyPlanHistory'[MachineId]) && ",
              "         'qv CompareDailyPlanHistory'[YearWeekNumber]=EARLIER('qv CompareDailyPlanHistory'[YearWeekNumber]) &&",
              "            'qv CompareDailyPlanHistory'[ShiladiYear]=EARLIER('qv CompareDailyPlanHistory'[ShiladiYear]) &&",
              "          'qv CompareDailyPlanHistory'[PlanTypeId]=EARLIER('qv CompareDailyPlanHistory'[PlanTypeId])",
              "",
              "),[bb])",
              "",
              "",
              "/*",
              "if('qv CompareDailyPlan'[PlanTypeId]=26 , ",
              "CALCULATE( SUM('qv CompareDailyPlan'[PlanedStopPerMachinePerShift]) ,",
              "FILTER( 'qv CompareDailyPlan', ",
              "'qv CompareDailyPlan'[MachineId] = EARLIER('qv CompareDailyPlan'[MachineId]) &&",
              "'qv CompareDailyPlan'[ShiladiYear] = EARLIER('qv CompareDailyPlan'[ShiladiYear]) &&",
              "'qv CompareDailyPlan'[YearWeekNumber] = EARLIER('qv CompareDailyPlan'[YearWeekNumber]) ",
              "&& 'qv CompareDailyPlan'[RayvarzId]<>0 && 'qv CompareDailyPlan'[NetTime]>10 && 'qv CompareDailyPlan'[BacthNo]<>\"0\"",
              "",
              ")",
              "))",
              "*/",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RelatedStopVersionOff",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "CALCULATE(max('qv MachineTimeOffIndex'[VersionOff]),",
              "FILTER('qv MachineTimeOffIndex',",
              " 'qv MachineTimeOffIndex'[MachineId]='qv CompareDailyPlanHistory'[MachineId] &&",
              " 'qv MachineTimeOffIndex'[ShiftId] = 'qv CompareDailyPlanHistory'[Shift]  &&",
              " 'qv CompareDailyPlanHistory'[Month]<= ROUND('qv MachineTimeOffIndex'[EndDate]/100,0) &&",
              " 'qv CompareDailyPlanHistory'[Month]>=round('qv MachineTimeOffIndex'[BeginDate]/100,0)))"
            ]
          },
          {
            "type": "calculated",
            "name": "StartTime2",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "left('qv CompareDailyPlanHistory'[startTime],8)",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "FinishTime2",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "left('qv CompareDailyPlanHistory'[FinishTime],8)",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 8",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(COUNT('qv PerformanceReport'[FinishDate]),FILTER('qv PerformanceReport','qv PerformanceReport'[WeeklyPlanId]='qv CompareDailyPlanHistory'[WeeklyplanSmlP]))"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "SELECT  *  ,  '4week' as 'Name'",
                "  FROM [AMARDB].[qv].[CompareDailyPlanHistory]",
                "",
                "  union",
                "",
                "SELECT *   , 'AllVersion' as 'Name'",
                "  FROM [AMARDB].[qv].[CompareDailyPlanAllversion]"
              ],
              "dataSource": "SqlServer etl AMARDB"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT  *  ,  '4week' as 'Name'",
                  "  FROM [AMARDB].[qv].[CompareDailyPlanHistory]",
                  "",
                  "  union",
                  "",
                  "SELECT *   , 'AllVersion' as 'Name'",
                  "  FROM [AMARDB].[qv].[CompareDailyPlanAllversion]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "SELECT  *  ,  '4week' as 'Name'",
              "  FROM [AMARDB].[qv].[CompareDailyPlanHistory]",
              "",
              "  union",
              "",
              "SELECT *   , 'AllVersion' as 'Name'",
              "  FROM [AMARDB].[qv].[CompareDailyPlanAllversion]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT  *  ,  '4week' as 'Name'",
              "  FROM [AMARDB].[qv].[CompareDailyPlanHistory]",
              "",
              "  union",
              "",
              "SELECT *   , 'AllVersion' as 'Name'",
              "  FROM [AMARDB].[qv].[CompareDailyPlanAllversion]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "pbi BaseDate",
        "columns": [
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "DateG",
            "dataType": "dateTime",
            "sourceColumn": "DateG"
          },
          {
            "name": "ShMon",
            "dataType": "int64",
            "sourceColumn": "ShMon"
          },
          {
            "name": "IeLastDayInMonth",
            "dataType": "dateTime",
            "sourceColumn": "IeLastDayInMonth"
          },
          {
            "name": "ShYear",
            "dataType": "int64",
            "sourceColumn": "ShYear"
          },
          {
            "name": "GMonthName",
            "dataType": "string",
            "sourceColumn": "GMonthName"
          },
          {
            "name": "GYear",
            "dataType": "int64",
            "sourceColumn": "GYear"
          },
          {
            "name": "ShDay",
            "dataType": "int64",
            "sourceColumn": "ShDay"
          },
          {
            "name": "ShMonthName",
            "dataType": "string",
            "sourceColumn": "ShMonthName"
          },
          {
            "name": "GDay",
            "dataType": "int64",
            "sourceColumn": "GDay"
          },
          {
            "name": "DayName",
            "dataType": "string",
            "sourceColumn": "DayName"
          },
          {
            "name": "DescWeek",
            "dataType": "string",
            "sourceColumn": "DescWeek"
          },
          {
            "name": "Shamsidays",
            "dataType": "string",
            "sourceColumn": "Shamsidays"
          },
          {
            "name": "ShiladiWeek",
            "dataType": "int64",
            "sourceColumn": "ShiladiWeek"
          },
          {
            "name": "AbidiHolidays",
            "dataType": "int64",
            "sourceColumn": "AbidiHolidays"
          },
          {
            "name": "IeYear",
            "dataType": "int64",
            "sourceColumn": "IeYear"
          },
          {
            "name": "IeMonthDesc",
            "dataType": "string",
            "sourceColumn": "IeMonthDesc"
          },
          {
            "name": "IeLastDayInMonthInt",
            "dataType": "int64",
            "sourceColumn": "IeLastDayInMonthInt"
          },
          {
            "name": "TypeOfHolidays",
            "dataType": "int64",
            "sourceColumn": "TypeOfHolidays"
          },
          {
            "name": "ShowingShMonth",
            "dataType": "string",
            "sourceColumn": "ShowingShMonth"
          },
          {
            "name": "ShMonth",
            "dataType": "string",
            "sourceColumn": "ShMonth"
          },
          {
            "name": "QuarterSh",
            "dataType": "int64",
            "sourceColumn": "QuarterSh"
          },
          {
            "name": "QuarterMi",
            "dataType": "int64",
            "sourceColumn": "QuarterMi"
          },
          {
            "name": "ShiladiYear",
            "dataType": "int64",
            "sourceColumn": "ShiladiYear"
          },
          {
            "type": "calculated",
            "name": "DateRank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "rankx('pbi BaseDate','pbi BaseDate'[DateG],,asc,dense)",
              "",
              "",
              "/* ",
              " CALCULATE(DISTINCTCOUNT('pbi BaseDate'[DateG]),",
              " filter('pbi BaseDate','pbi BaseDate'[DateG]<=EARLIER('pbi BaseDate'[DateG])))",
              "",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "DateGText",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "FORMAT('pbi BaseDate'[DateG],\"YYYY/MM/DD\")"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    pbi_BaseDate = Source{[Schema=\"pbi\",Item=\"BaseDate\"]}[Data]",
                "in",
                "    pbi_BaseDate"
              ]
            }
          }
        ]
      },
      {
        "name": "ProductWeeklyVsActual",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "MachineID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FinishDate",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "qv PerformanceReport[FinishDate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[PlanTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BomVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchNo",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BatchNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[YearWeekNumber]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShiladiYear]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "LoadUnLoad",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[LoadUnLoad]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Availability",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Availability]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Performance",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Performance]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Quality",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Quality]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "version",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[version]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Duration",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Duration]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "box",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[box]",
            "formatString": "#,0"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "standardSpeed",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[standardSpeed]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "AVGSpeed",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[AVGSpeed]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "plannedstp-Rest",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[plannedstp-Rest]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "UnplannedStpPerBatch-DownTime",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[UnplannedStpPerBatch-DownTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "plannedstp<>Rest",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[plannedstp<>Rest]"
          },
          {
            "type": "calculated",
            "name": "NetTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[Duration]-ProductWeeklyVsActual[plannedstp-Rest]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "VersionType",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[VersionType]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessNameFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShMon]"
          },
          {
            "type": "calculated",
            "name": "VersionTypeId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[VersionType]=\"Actual\",1,",
              "if(ProductWeeklyVsActual[VersionType]=\"First Plan\",2,",
              "if(ProductWeeklyVsActual[VersionType]=\"Last Plan\",3,",
              "if(ProductWeeklyVsActual[VersionType]=\"Forcast\",4,",
              "if(ProductWeeklyVsActual[VersionType]=\"Budget\",5,",
              "if(ProductWeeklyVsActual[VersionType]=\"4Week Plan\",6,",
              "if(ProductWeeklyVsActual[VersionType]=\"Second Plan\",7,",
              "if(ProductWeeklyVsActual[VersionType]=\"Plan Target\",8",
              "))))))))"
            ]
          },
          {
            "type": "calculated",
            "name": "FinalProductName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " if(",
              " LEFT(ProductWeeklyVsActual[RayvarzId],3) = \"570\" ,",
              " lOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],value(SUBSTITUTE(ProductWeeklyVsActual[RayvarzId],570,700))) ,",
              "",
              " if(LEFT(ProductWeeklyVsActual[RayvarzId],3) = \"560\" ,",
              " lOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],value(SUBSTITUTE(ProductWeeklyVsActual[RayvarzId],560,700))),",
              "",
              "lOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],ProductWeeklyVsActual[RayvarzId])",
              ")",
              "",
              "",
              "",
              ")"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessID]"
          },
          {
            "type": "calculated",
            "name": "NoInBox",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[NoInBox],'Dimqv ProductExcel'[RayvarzNumber],ProductWeeklyVsActual[RayvarzId])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Unit",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[box]*ProductWeeklyVsActual[NoInBox]"
          },
          {
            "type": "calculated",
            "name": "StandardBatchBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv BomDetailsAllVersion'[StandardBatchBox]),",
              "FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[RayvarzId]=ProductWeeklyVsActual[RayvarzId]&&",
              "'qv BomDetailsAllVersion'[version]=ProductWeeklyVsActual[BomVersion]",
              "-- && 'qv BomDetailsAllVersion'[MachineId]=ProductWeeklyVsActual[MachineId]",
              ")",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "StandardBatchKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv BomDetailsAllVersion'[BatchKiloNet]),",
              "FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[rayvarzid]=ProductWeeklyVsActual[RayvarzId] ",
              "&& ProductWeeklyVsActual[ProcessID]='qv BomDetailsAllVersion'[ProcessId]",
              " && ProductWeeklyVsActual[BomVersion]='qv BomDetailsAllVersion'[version]))"
            ],
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "BatchCount",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE(ProductWeeklyVsActual[box],ProductWeeklyVsActual[StandardBatchBox])"
          },
          {
            "type": "calculated",
            "name": "TotalBatchKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[BatchCount]*ProductWeeklyVsActual[StandardBatchKilo]"
          },
          {
            "type": "calculated",
            "name": "ProductCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[TypeIdDesc],'Dimqv ProductExcel'[RayvarzNumber],ProductWeeklyVsActual[RayvarzId])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NextFinishDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[VersionTypeId] in {2,3},",
              "CALCULATE(max('qv CompareDailyPlanHistory'[NextFinishDay]),FILTER('qv CompareDailyPlanHistory',",
              " 'qv CompareDailyPlanHistory'[RayvarzId] = ProductWeeklyVsActual[RayvarzId] &&",
              " 'qv CompareDailyPlanHistory'[BacthNo] = ProductWeeklyVsActual[BatchNo] &&",
              " 'qv CompareDailyPlanHistory'[ProcessId] = ProductWeeklyVsActual[ProcessId] &&",
              " 'qv CompareDailyPlanHistory'[YearWeekNumber] = ProductWeeklyVsActual[YearWeekNumber] &&",
              " 'qv CompareDailyPlanHistory'[ShiladiYear] = ProductWeeklyVsActual[ShiladiYear]))",
              ")",
              " "
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessOrderPerProduct",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(max('qv BomDetailsAllVersion'[Sort]),FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[RayvarzId]=ProductWeeklyVsActual[RayvarzId] && 'qv BomDetailsAllVersion'[ProcessId] =ProductWeeklyVsActual[ProcessID]))"
          },
          {
            "type": "calculated",
            "name": "IsSakhtProcess",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(ProductWeeklyVsActual[ProcessID] in {14,16,15},1,0) --capfilling-press-coating",
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "DateDiff",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var maxprocessidsakht = CALCULATE(max(ProductWeeklyVsActual[ProcessID]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[VersionTypeId]=7 &&",
              " ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[IsSakhtProcess]=1))",
              "",
              "var Vmaxprocessid= CALCULATE(max(ProductWeeklyVsActual[ProcessOrderPerProduct]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              "&& ProductWeeklyVsActual[VersionTypeId]=7 && ProductWeeklyVsActual[PlanTypeId]=26 ",
              "&& ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ",
              "ProductWeeklyVsActual[ShiladiYear]=EARLIER(ProductWeeklyVsActual[ShiladiYear])",
              "&& ProductWeeklyVsActual[YearWeekNumber]=EARLIER(ProductWeeklyVsActual[YearWeekNumber]) ))",
              "",
              "var StartDateFinishOP = CALCULATE(MIN(ProductWeeklyVsActual[MiladiFinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              "&& ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo])&& ProductWeeklyVsActual[VersionTypeId]=7 && ",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ShiladiYear]=EARLIER(ProductWeeklyVsActual[ShiladiYear])",
              "&& ProductWeeklyVsActual[YearWeekNumber]=EARLIER(ProductWeeklyVsActual[YearWeekNumber])",
              " && ProductWeeklyVsActual[ProcessOrderPerProduct]=Vmaxprocessid && ProductWeeklyVsActual[ProcessID] in {17,20,21,23} ))",
              "",
              "var FinishDateSakhtOP = CALCULATE(min(ProductWeeklyVsActual[MiladiFinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[VersionTypeId]=7 &&",
              " ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ProcessID]=maxprocessidsakht ",
              " && ProductWeeklyVsActual[Remark2]=EARLIER(ProductWeeklyVsActual[Remark2])))",
              "",
              "var sshamsilastop = CALCULATE(MIN(ProductWeeklyVsActual[FinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo])&& ProductWeeklyVsActual[VersionTypeId]=7 && ",
              "ProductWeeklyVsActual[PlanTypeId]=26  && ProductWeeklyVsActual[ProcessOrderPerProduct]=Vmaxprocessid))",
              "",
              "var sshamsisakhtop = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[VersionTypeId]=7 &&",
              " ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ProcessID]=maxprocessidsakht))",
              "",
              "return ",
              "if(ProductWeeklyVsActual[ProductCategory]=\"Syrup\",10000,",
              "if(StartDateFinishOP=BLANK(),-8888888888888, -- op akhar nadarad dar hafte morede nazar",
              " if(ProductWeeklyVsActual[RayvarzId]>=7000000 && sshamsilastop>=14010101 && sshamsisakhtop>=14010101, ",
              " DATEDIFF(FinishDateSakhtOP,StartDateFinishOP,DAY) ,-100000000000000)))",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MiladiFinishDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[DateG],'pbi BaseDate'[DateId],ProductWeeklyVsActual[FinishDate])",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "MiladiNextFinishDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[DateG],'pbi BaseDate'[DateId],ProductWeeklyVsActual[NextFinishDate])",
            "formatString": "Short Date",
            "annotations": [
              {
                "name": "Format",
                "value": "<Format Format=\"DateTimeShortDatePattern\" />"
              }
            ]
          },
          {
            "type": "calculated",
            "name": "NewBatchNo",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var va = SUBSTITUTE(ProductWeeklyVsActual[BatchNo],\"A\",\"\")",
              "var vb =SUBSTITUTE(ProductWeeklyVsActual[BatchNo],\"B\",\"\")",
              "",
              "",
              "",
              "var AFind  = CONTAINSSTRING(ProductWeeklyVsActual[BatchNo], \"A\") ",
              "var BFind  =CONTAINSSTRING(ProductWeeklyVsActual[BatchNo], \"B\") ",
              "",
              "var ALoc = SEARCH(\"A\",ProductWeeklyVsActual[BatchNo],1,BLANK())",
              "var BLoc = SEARCH(\"B\",ProductWeeklyVsActual[BatchNo],1,BLANK())",
              "",
              "return ",
              "",
              "if(AFind =TRUE() && (ALoc=3 || ALoc=5) ,va,if(BFind=TRUE() && (BLoc=3 || BLoc=5) ,vb,ProductWeeklyVsActual[BatchNo]))"
            ]
          },
          {
            "type": "calculated",
            "name": "RayvarzIdText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "ProductWeeklyVsActual[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "RiskStatus",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " if(ProductWeeklyVsActual[DateDiff]<> -8888888888888 && ProductWeeklyVsActual[DateDiff]<>-100000000000000,",
              " if(ProductWeeklyVsActual[DateDiff]=3   ,\"Low Risk\" , ",
              " if(ProductWeeklyVsActual[DateDiff]<3  ,\"High Risk\",",
              " if(ProductWeeklyVsActual[DateDiff]>3   ,\"No Risk\",BLANK()))))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RiskNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[RiskStatus]=\"High Risk\",3,",
              "if(ProductWeeklyVsActual[RiskStatus]=\"Low Risk\",2,",
              "if(ProductWeeklyVsActual[RiskStatus]=\"No Risk\",1,0)))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[ProcessID] in {17,20,21,23,42} ,\"Packaging\" ,",
              " if(ProductWeeklyVsActual[ProcessID] in {14,15,16},\"Solid\" ,",
              " if(ProductWeeklyVsActual[ProcessID] in {10,11,13,38,22} , \"Manufacture\" ,",
              " ProductWeeklyVsActual[ProcessNameFa])))"
            ]
          },
          {
            "type": "calculated",
            "name": "DateDiffCoating",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var StartDateFinishOP = CALCULATE(MIN(ProductWeeklyVsActual[MiladiFinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo])&& ProductWeeklyVsActual[VersionTypeId]=7 && ",
              "ProductWeeklyVsActual[PlanTypeId]=26  && ProductWeeklyVsActual[ProcessID]=16 ",
              "&& ProductWeeklyVsActual[YearWeekNumber]=EARLIER(ProductWeeklyVsActual[YearWeekNumber]))) -- rokesh",
              "",
              " var FinishDateSakhtOP = CALCULATE(min(ProductWeeklyVsActual[MiladiFinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[VersionTypeId]=7 &&",
              " ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ProcessID]=14 ",
              " && ProductWeeklyVsActual[Remark2]=EARLIER(ProductWeeklyVsActual[Remark2]))) --press",
              "",
              " var sshamsilastop = CALCULATE(MIN(ProductWeeklyVsActual[FinishDate]),",
              " FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo])&& ProductWeeklyVsActual[VersionTypeId]=7 && ",
              " ProductWeeklyVsActual[PlanTypeId]=26  && ProductWeeklyVsActual[ProcessID]=16 && ",
              " ProductWeeklyVsActual[YearWeekNumber]=EARLIER(ProductWeeklyVsActual[YearWeekNumber]))) --rokesh",
              "",
              " var sshamsisakhtop = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              " && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[VersionTypeId]=7 &&",
              " ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ProcessID]=14))  -- press",
              "",
              " return ",
              "  if(StartDateFinishOP=BLANK(),-8888888888888, -- op akhar nadarad dar hafte morede nazar",
              "  if(ProductWeeklyVsActual[RayvarzId]>=7000000 && sshamsilastop>=14010101 && sshamsisakhtop>=14010101 && ProductWeeklyVsActual[ProcessID]=16, ",
              "  DATEDIFF(FinishDateSakhtOP,StartDateFinishOP,DAY) ,-100000000000000))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "RiskStatusCoating",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[DateDiffCoating]=-100000000000000 || ProductWeeklyVsActual[DateDiffCoating]=-8888888888888,BLANK(),",
              "if(ProductWeeklyVsActual[DateDiffCoating]>3 ,\"No Risk\",",
              " if(ProductWeeklyVsActual[DateDiffCoating]=3   ,\"Low Risk\" , ",
              " if( ProductWeeklyVsActual[DateDiffCoating]<3 ,\"High Risk\",BLANK()))))"
            ]
          },
          {
            "type": "calculated",
            "name": "Remark2",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(CONTAINSSTRING(ProductWeeklyVsActual[Remark], \"دوباره کاری\")=TRUE(),1) --\"دوباره کاری\""
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "if(ProductWeeklyVsActual[MachineDscFa]=\"CoatingFG\",\"CMO\",if(ProductWeeklyVsActual[MachineDscFa]=\"CMOFG\",\"CMO\",",
              "LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],",
              "'ProductWeeklyVsActual'[MachineID])",
              "))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Department",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[SiteType]=\"CMO\" && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\" ,\"Packaging\", ",
              "if(ProductWeeklyVsActual[SiteType]=\"CMO\" && ProductWeeklyVsActual[ProcessCategory]=\"Solid\" ,\"Solid\",",
              "",
              "LOOKUPVALUE('Dimqv Machine'[DepartmentName],'Dimqv Machine'[MachineId],'ProductWeeklyVsActual'[MachineID])",
              ")",
              ")"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "shiftId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[shiftId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "shiftName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[shiftName]"
          },
          {
            "type": "calculated",
            "name": "DayName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE('pbi BaseDate'[DayName],'pbi BaseDate'[DateId],'ProductWeeklyVsActual'[FinishDate])"
          },
          {
            "type": "calculated",
            "name": "MiladiMonth",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[ShMon]>=140001,",
              "LOOKUPVALUE('pbi BaseDate'[IeMonthDesc],'pbi BaseDate'[ShiladiYear],",
              "ProductWeeklyVsActual[ShiladiYear],'pbi BaseDate'[ShMon],ProductWeeklyVsActual[ShMon]))"
            ],
            "sortByColumn": "MiladiMonthOrder"
          },
          {
            "type": "calculated",
            "name": "MiladiMonthOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmonth =right(ProductWeeklyVsActual[ShMon],2)",
              "  return ",
              "if(not ProductWeeklyVsActual[PlanTypeId] in {46,47,48,49,402} ,",
              " if( ProductWeeklyVsActual[ShMon]>=140001 ,",
              "  if(vmonth=\"10\",1 , if(vmonth=\"11\",2,if(vmonth=\"12\",3,IF(vmonth=\"01\",4,IF(vmonth=\"02\",5,IF(vmonth=\"03\",6,",
              "  IF(vmonth=\"04\",7,IF(vmonth=\"05\",8,IF(vmonth=\"06\",9,IF(vmonth=\"07\",10,IF(vmonth=\"08\",11,IF(vmonth=\"09\",12))))))))))))",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "IsFinishProcess",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi IsFinshBatchLastOP'[IsFinish],'pbi IsFinshBatchLastOP'[RayvarzId],ProductWeeklyVsActual[RayvarzId],'pbi IsFinshBatchLastOP'[BatchNo],ProductWeeklyVsActual[BatchNo],'pbi IsFinshBatchLastOP'[ProcessId],ProductWeeklyVsActual[ProcessID])"
          },
          {
            "type": "calculated",
            "name": "DateDiffTodayToPackagingOP",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "DATEDIFF(",
              "CALCULATE(MIN(ProductWeeklyVsActual[MiladiFinishDate]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) ",
              "&& ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo])&& ProductWeeklyVsActual[VersionTypeId]=1 && ",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ProcessID] in {17,20,21,23} ))",
              ",",
              "max(DimAllBomVersion[CalLastRefreshTime]),DAY)",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MachineEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "if(ProductWeeklyVsActual[MachineDscFa]=\"CoatingFG\",\"CoatingFG\",if(ProductWeeklyVsActual[MachineDscFa]=\"CMOFG\",\"CMOFG\",",
              "LOOKUPVALUE('Dimqv Machine'[MachineDscEn],'Dimqv Machine'[MachineId],ProductWeeklyVsActual[MachineID])",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[MachineDscFa]=\"CoatingFG\",\"Coating 570\",if(ProductWeeklyVsActual[MachineDscFa]=\"CMOFG\",\"Manual Packaging 610\",",
              "",
              "LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],ProductWeeklyVsActual[ProcessID])   ",
              "))"
            ]
          },
          {
            "type": "calculated",
            "name": "CenterType",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[ProductionCenterId],'Dimqv ProductExcel'[RayvarzNumber],'ProductWeeklyVsActual'[RayvarzId])",
              "",
              "--93 abidi 70"
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 3",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var x = SUMMARIZE( FILTER(ProductWeeklyVsActual,  ProductWeeklyVsActual[VersionTypeid]=1 && ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]))",
              ",ProductWeeklyVsActual[ProcessID])",
              "",
              "var tblp={20,17}",
              "",
              " --&&ProductWeeklyVsActual[VersionType]=\"Actual\"  ProductWeeklyVsActual[CenterType]=\"Abidi  70\" &&",
              "return ",
              "if(20 in x && 17 in x ,1,0)"
            ]
          },
          {
            "type": "calculated",
            "name": "NewBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[CenterType]=93 && ProductWeeklyVsActual[ProcessID]=17  && ProductWeeklyVsActual[versiontypeid]=1,",
              "DIVIDE(ProductWeeklyVsActual[box],ProductWeeklyVsActual[NoBlisterInBox],0),ProductWeeklyVsActual[box])"
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 4",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(DISTINCTCOUNT(ProductWeeklyVsActual[ProcessId]),filter(ProductWeeklyVsActual,",
              "ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) &&",
              " ProductWeeklyVsActual[VersionTypeId]=EARLIER(ProductWeeklyVsActual[VersionTypeId]) &&",
              "ProductWeeklyVsActual[ProcessCategory]=\"packaging\" && ProductWeeklyVsActual[CenterType]=93 && ProductWeeklyVsActual[MiladiMonth]=\"OCT\" && ProductWeeklyVsActual[ShiladiYear]=2022))"
            ]
          },
          {
            "type": "calculated",
            "name": "InsActiveBudgetMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if( RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"07\" , \"08\" ,\"09\"} ,402 ,  -- \"R3\"",
              "   if(RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"10\",\"11\",\"12\"} , 46 ,  -- \"B\" ",
              "     if(RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"04\",\"05\",\"06\"} , 49 ,  --\"R2\" ",
              "        if(RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"01\",\"02\",\"03\"} , 48 ))))  -- \"R1\""
            ]
          },
          {
            "type": "calculated",
            "name": "CountWorkingDayPerMachinePerMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ViewCalendarByMachine'[CountWorkingDayPerMachinePerMonth]),",
              "FILTER('qv ViewCalendarByMachine',",
              "'qv ViewCalendarByMachine'[MachineId]=ProductWeeklyVsActual[MachineID] &&",
              "'qv ViewCalendarByMachine'[ShMon]=ProductWeeklyVsActual[ShMon] && ",
              "'qv ViewCalendarByMachine'[ActiveMonthBudget] = ProductWeeklyVsActual[InsActiveBudgetMonth]))"
            ]
          },
          {
            "type": "calculated",
            "name": "RayvarzBatch",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[RayvarzId] & \"-\" & ProductWeeklyVsActual[NewBatchNo]"
          },
          {
            "type": "calculated",
            "name": "NoBlisterInBox",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[CountPerUsageType],'Dimqv ProductExcel'[RayvarzNumber],ProductWeeklyVsActual[RayvarzId])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MPSTargetTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv MPS'[MachineMonthCal]) ,",
              " FILTER('qv MPS',ProductWeeklyVsActual[MachineID]='qv MPS'[MachineID] && ",
              "'qv MPS'[Month]= ProductWeeklyVsActual[ShMon] && ",
              "'qv MPS'[TargetTypeId]=ProductWeeklyVsActual[InsActiveBudgetMonth]))"
            ]
          },
          {
            "type": "calculated",
            "name": "MPSTargetBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[Month],'qv MPS'[TargetTypeId],",
              "'qv MPS'[ProductionType],\"box\",max('qv MPS'[BoxAlcPerMachinePerMonth]))",
              "",
              "return ",
              "SUMX(FILTER(tbl,'qv MPS'[MachineId]= ProductWeeklyVsActual[MachineID] && 'qv MPS'[Month]=ProductWeeklyVsActual[ShMon] && ",
              "'qv MPS'[TargetTypeId]= ProductWeeklyVsActual[InsActiveBudgetMonth]),[box])",
              " ",
              "",
              "",
              "/*",
              "var tbl =",
              "SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[Month],'qv MPS'[RevName],\"sss\",sum('qv MPS'[BoxAlcPerMachinePerMonth]))",
              "",
              "return ",
              "CALCULATE(MAXX(tbl,[sss]) , filter(tbl,ProductWeeklyVsActual[MachineID]= [MachineID] && ",
              " [Month]= ProductWeeklyVsActual[ShMon] && ",
              " [TargetTypeId]=ProductWeeklyVsActual[InsActiveBudgetMonth]))",
              "*/",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MPSTargetUnit",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[Month],'qv MPS'[TargetTypeId],",
              "'qv MPS'[ProductionType],\"unit\",max('qv MPS'[UnitAlcPerMachinePerMonth]))",
              "",
              "return ",
              "SUMX(FILTER(tbl,'qv MPS'[MachineId]= ProductWeeklyVsActual[MachineID] && 'qv MPS'[Month]=ProductWeeklyVsActual[ShMon] && ",
              "'qv MPS'[TargetTypeId]= ProductWeeklyVsActual[InsActiveBudgetMonth]),[Unit])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MPSTargetKilo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[Month],'qv MPS'[TargetTypeId],",
              "'qv MPS'[ProductionType],\"kilo\",max('qv MPS'[KiloAlcPerMachinePerMonth]))",
              "",
              "return ",
              "SUMX(FILTER(tbl,'qv MPS'[MachineId]= ProductWeeklyVsActual[MachineID] && 'qv MPS'[Month]=ProductWeeklyVsActual[ShMon] && ",
              "'qv MPS'[TargetTypeId]= ProductWeeklyVsActual[InsActiveBudgetMonth]),[kilo])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MPSTargetBatch",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE('qv MPS','qv MPS'[MachineId],'qv MPS'[Month],'qv MPS'[TargetTypeId],",
              "'qv MPS'[ProductionType],\"Batch\",max('qv MPS'[BatchAlcPerMachinePerMonth]))",
              "",
              "return ",
              "SUMX(FILTER(tbl,'qv MPS'[MachineId]= ProductWeeklyVsActual[MachineID] && 'qv MPS'[Month]=ProductWeeklyVsActual[ShMon] && ",
              "'qv MPS'[TargetTypeId]= ProductWeeklyVsActual[InsActiveBudgetMonth]),[Batch])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 5",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[VersionTypeId]=1,",
              "CALCULATE(MAX('qv StopReport'[DurationStopOverlay]),FILTER('qv StopReport',",
              "'qv StopReport'[MachineID]=ProductWeeklyVsActual[MachineID] && 'qv StopReport'[RayvarzId]=ProductWeeklyVsActual[RayvarzId] &&",
              "ProductWeeklyVsActual[FinishDate]='qv StopReport'[FinishDate] && 'qv StopReport'[BatchNo]=ProductWeeklyVsActual[BatchNo] && ",
              "'qv StopReport'[AcceptableType]=\"DownTime\"))",
              ")"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "CustomizeSpeed",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[CustomizeSpeed]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StopDuration",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[StopDuration]"
          },
          {
            "type": "calculated",
            "name": "CustomizeSpeed-unit/min",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[ProcessID]=21, ProductWeeklyVsActual[CustomizeSpeed]*ProductWeeklyVsActual[NoInBox] , ProductWeeklyVsActual[CustomizeSpeed])",
              "--counter box/min ---> covert to unit/min"
            ]
          },
          {
            "type": "calculated",
            "name": "MonthRank",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "RANKX(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon],,ASC,Dense)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 7",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[FinishDate]& \"-\" & ProductWeeklyVsActual[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "ProductCoverType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[SizepartTypeIdDesc],'Dimqv ProductExcel'[RayvarzId],ProductWeeklyVsActual[RayvarzIdText])"
          },
          {
            "type": "calculated",
            "name": "ProductType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[TypeIdDesc],'Dimqv ProductExcel'[RayvarzId],ProductWeeklyVsActual[RayvarzIdText])"
          },
          {
            "type": "calculated",
            "name": "OEETargett",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "SWITCH( TRUE(), ",
              "--Blistering",
              "'ProductWeeklyVsActual'[ProcessId] =17\t && 'ProductWeeklyVsActual'[MachineId] = \t248\t, \t0.477190866,",
              "'ProductWeeklyVsActual'[ProcessId] =17\t && 'ProductWeeklyVsActual'[MachineId]  = \t249\t, \t0.504145286,",
              "'ProductWeeklyVsActual'[ProcessId] =17\t && 'ProductWeeklyVsActual'[MachineId]  = \t10\t,\t0.460006716,",
              "'ProductWeeklyVsActual'[ProcessId] =17  && 'ProductWeeklyVsActual'[MachineId]  = \t11\t,\t0.438796116,",
              "'ProductWeeklyVsActual'[ProcessId] =17  && 'ProductWeeklyVsActual'[MachineId]  = \t12\t,\t0.575793677,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t13\t,\t0.508025726,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t14\t,\t0.473677818,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t22\t,\t0.518397515,",
              "'ProductWeeklyVsActual'[ProcessId] =17\t && 'ProductWeeklyVsActual'[MachineId]  = \t56\t,\t0.463973012,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t250\t, \t0.477190866,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t123\t, \t0.474,",
              "'ProductWeeklyVsActual'[ProcessId] =17 && 'ProductWeeklyVsActual'[MachineId]  = \t458\t, \t0.48,",
              "--Press",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  = \t3\t,\t0.454330625,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId] = \t246\t,\t0.405801457,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  = \t5\t,\t0.304199596,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId] = \t4\t,\t0.568020859,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  = \t2\t,\t0.45478784,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  = \t7\t,\t0.306705072,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId] = \t6\t,\t0.36350734,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  =  293\t,\t0.42  ,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  =  173\t,\t0.39  ,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  =  425\t,\t0.41  ,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  =  426\t,\t0.41  ,",
              "'ProductWeeklyVsActual'[ProcessId] =14\t && 'ProductWeeklyVsActual'[MachineId]  =  457\t,\t0.42  ,",
              "--Counter",
              "'ProductWeeklyVsActual'[ProcessId]=21\t && 'ProductWeeklyVsActual'[MachineId]  =   19\t,\t0.580379936,",
              "'ProductWeeklyVsActual'[ProcessId] =21\t && 'ProductWeeklyVsActual'[MachineId] =   58\t,\t0.543957603,",
              "'ProductWeeklyVsActual'[ProcessId] =21\t && 'ProductWeeklyVsActual'[MachineId]  =   295\t,\t0.580379936,",
              "--Cap Filling\t",
              "'ProductWeeklyVsActual'[ProcessId] =15\t && 'ProductWeeklyVsActual'[MachineId]  = \t17\t,\t0.571751013,",
              "'ProductWeeklyVsActual'[ProcessId] =15\t && 'ProductWeeklyVsActual'[MachineId] = \t18\t,\t0.65,",
              "'ProductWeeklyVsActual'[ProcessId] =15\t && 'ProductWeeklyVsActual'[MachineId]  = \t15\t,\t0.647798681,",
              "'ProductWeeklyVsActual'[ProcessId] =15\t && 'ProductWeeklyVsActual'[MachineId]  = \t247\t,   0.472011261,",
              "--syrup",
              "'ProductWeeklyVsActual'[ProcessId]=23\t && 'ProductWeeklyVsActual'[MachineId]  = \t21 , 0.561224463)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "Productivity",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv ProductMachineVisualIndexByBomVersion'[Productivity]),",
              "FILTER('qv ProductMachineVisualIndexByBomVersion','qv ProductMachineVisualIndexByBomVersion'[RayvarzId]=ProductWeeklyVsActual[RayvarzId] ",
              "&& 'qv ProductMachineVisualIndexByBomVersion'[MachineId]=ProductWeeklyVsActual[MachineID] &&",
              "ProductWeeklyVsActual[BomVersion] = 'qv ProductMachineVisualIndexByBomVersion'[BomVersion]))/100"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "DevName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Deviation\""
          },
          {
            "type": "calculated",
            "name": "LastProcessID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmaxsort= CALCULATE(max('qv BomDetailsAllVersion'[Sort]),",
              "FILTER('qv BomDetailsAllVersion',ProductWeeklyVsActual[RayvarzId]='qv BomDetailsAllVersion'[RayvarzId] && ",
              "ProductWeeklyVsActual[BomVersion]='qv BomDetailsAllVersion'[Version] && not 'qv BomDetailsAllVersion'[ProcessId] in {18,19,24,25}  ))",
              "",
              "return ",
              "",
              "CALCULATE(MAX('qv BomDetailsAllVersion'[ProcessNameFa]),FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[Sort]=vmaxsort && ProductWeeklyVsActual[RayvarzId]='qv BomDetailsAllVersion'[RayvarzId] && ",
              "ProductWeeklyVsActual[BomVersion]='qv BomDetailsAllVersion'[Version] ",
              "&& not 'qv BomDetailsAllVersion'[ProcessId] in {18,19,24,25} ))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProductionCenterName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('qv BomDetailsAllVersion'[ProductionCenterName],",
              "'qv BomDetailsAllVersion'[RayvarzId],ProductWeeklyVsActual[RayvarzId],",
              "'qv BomDetailsAllVersion'[Version],ProductWeeklyVsActual[BomVersion],",
              "'qv BomDetailsAllVersion'[ProcessId],ProductWeeklyVsActual[ProcessId])"
            ]
          },
          {
            "type": "calculated",
            "name": "RevName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[PlanTypeId]=47 ,  CALCULATE(max('qv MPS'[RevName]),FILTER( 'qv MPS', 'qv MPS'[RayvarzId]=ProductWeeklyVsActual[RayvarzId] &&",
              "'qv MPS'[Month] = ProductWeeklyVsActual[ShMon] && 'qv MPS'[TargetTypeId]=47 && 'qv MPS'[IsLastF]=TRUE()) ))"
            ]
          },
          {
            "type": "calculated",
            "name": "Company",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[MachineDscFa]=\"CoatingFG\",\"CMOSFG\",if(ProductWeeklyVsActual[MachineDscFa]=\"CMOFG\",\"CMOFG\",",
              "",
              "  LOOKUPVALUE('Dimqv Machine'[CompanyName],'Dimqv Machine'[MachineId],'ProductWeeklyVsActual'[MachineID])",
              ")",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "Remark",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Remark]"
          },
          {
            "type": "calculated",
            "name": "StrategicType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[StrategicVariation],'Dimqv ProductExcel'[RayvarzId],ProductWeeklyVsActual[RayvarzIdText])"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineDscFa]"
          },
          {
            "type": "calculated",
            "name": "BatchNoException",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if(ProductWeeklyVsActual[BatchNo] in {\"2301001\",\"2301002\",\"2301003\",\"2301004\",\"2301005\",\"2301006\",\"2301007\",\"2301008\",\"2301009\",\"2301010\",\"11401\",\"11402\",\"21401\",\"21402\"}",
              "&& ProductWeeklyVsActual[PlanTypeId]=26 &&  ProductWeeklyVsActual[MiladiMonth]= \"Aug\"&& ProductWeeklyVsActual[ShiladiYear]=2023 && ProductWeeklyVsActual[SiteType]=\"Abidi\" ,0 , 1)"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "SOEE",
            "dataType": "double",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "[NewOEE]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SAvailability",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SAvailability]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "SPerformance",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[SPerformance]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StandardCT",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[StandardCT]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ActualCT",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ActualCT]"
          },
          {
            "type": "calculated",
            "name": "WastageByProcess",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[VersionType]=\"Actual\" && ProductWeeklyVsActual[PlanTypeId]=26 , ",
              "CALCULATE(max(wastage_2022[Wastage By Process%]),FILTER(wastage_2022,wastage_2022[RayvarzIdNum]=ProductWeeklyVsActual[RayvarzId] ",
              "&& ProductWeeklyVsActual[BatchNo]=wastage_2022[BatchNo] && ProductWeeklyVsActual[ProcessID]=wastage_2022[ProcessId])))"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "WastageInput",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if(ProductWeeklyVsActual[VersionType]=\"Actual\" && ProductWeeklyVsActual[PlanTypeId]=26 , ",
              "CALCULATE(max(wastage_2022[ProcessInput2]),FILTER(wastage_2022,wastage_2022[RayvarzIdNum]=ProductWeeklyVsActual[RayvarzId] ",
              "&& ProductWeeklyVsActual[BatchNo]=wastage_2022[BatchNo] && ProductWeeklyVsActual[ProcessID]=wastage_2022[ProcessId])))"
            ]
          },
          {
            "type": "calculated",
            "name": "TotalBatchTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " if(ProductWeeklyVsActual[VersionType]=\"Actual\" && ProductWeeklyVsActual[PlanTypeId]=26 , ",
              "CALCULATE(max('qv PerformanceReport'[NetTimePerBatch(h)]),filter('qv PerformanceReport',",
              "'qv PerformanceReport'[RayvarzId]=ProductWeeklyVsActual[RayvarzId] && 'qv PerformanceReport'[BatchNo]=ProductWeeklyVsActual[BatchNo] ",
              "&& 'qv PerformanceReport'[ProcessID]=ProductWeeklyVsActual[ProcessId]))*60   )"
            ]
          },
          {
            "type": "calculated",
            "name": "Input*wastage",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "ProductWeeklyVsActual[WastageInput]*if(ProductWeeklyVsActual[WastageByProcess]<0,0,ProductWeeklyVsActual[WastageByProcess])"
          },
          {
            "type": "calculated",
            "name": "Input*wastage*Time",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "ProductWeeklyVsActual[TotalBatchTime]*ProductWeeklyVsActual[Input*Wastage]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "WastageTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE(ProductWeeklyVsActual[WastageInput],ProductWeeklyVsActual[Input*wastage*Time])"
          },
          {
            "type": "calculated",
            "name": "ReworkTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var vreworktime = CALCULATE(max (ProductWeeklyVsActual[TotalBatchTime]) , FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId]) &&",
              "ProductWeeklyVsActual[ProcessID]=EARLIER(ProductWeeklyVsActual[ProcessID]) && ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) &&",
              "ProductWeeklyVsActual[BatchNo]<>ProductWeeklyVsActual[NewBatchNo] && ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[VersionType]=\"Actual\"))",
              "",
              "",
              "return ",
              "if(ProductWeeklyVsActual[BatchNo]=ProductWeeklyVsActual[NewBatchNo] ,vreworktime)",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualQuality%",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "DIVIDE(",
              "",
              "CALCULATE(sum(ProductWeeklyVsActual[TotalBatchTime]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId])&&",
              "ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[ProcessID]=EARLIER(ProductWeeklyVsActual[ProcessID]) &&",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[VersionType]=\"Actual\")) ,",
              "",
              "CALCULATE(sum(ProductWeeklyVsActual[TotalBatchTime]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId])&&",
              "ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[ProcessID]=EARLIER(ProductWeeklyVsActual[ProcessID]) &&",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[VersionType]=\"Actual\"))  ",
              "+",
              "CALCULATE(sum(ProductWeeklyVsActual[ReworkTime]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId])&&",
              "ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[ProcessID]=EARLIER(ProductWeeklyVsActual[ProcessID]) &&",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[VersionType]=\"Actual\"))",
              "+",
              "CALCULATE(sum(ProductWeeklyVsActual[WastageTime]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[RayvarzId]=EARLIER(ProductWeeklyVsActual[RayvarzId])&&",
              "ProductWeeklyVsActual[NewBatchNo]=EARLIER(ProductWeeklyVsActual[NewBatchNo]) && ProductWeeklyVsActual[ProcessID]=EARLIER(ProductWeeklyVsActual[ProcessID]) &&",
              "ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[VersionType]=\"Actual\"))",
              ")",
              "",
              "",
              "",
              "",
              "--DIVIDE(ProductWeeklyVsActual[TotalBatchTime],ProductWeeklyVsActual[TotalBatchTime]+ProductWeeklyVsActual[ReworkTime]+ProductWeeklyVsActual[WastageTime])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "PMPerson",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " if( ProductWeeklyVsActual[VersionType]=\"Last Plan\" && ProductWeeklyVsActual[Remark]=\"PM 2000\",3,",
              "if(ProductWeeklyVsActual[VersionType]=\"Last Plan\" && ProductWeeklyVsActual[Remark]=\"PM 600\",2,",
              "if(ProductWeeklyVsActual[VersionType]=\"Last Plan\"  && ProductWeeklyVsActual[Remark]=\"PM 300\",1)))"
            ]
          },
          {
            "type": "calculated",
            "name": "DownTimeTarget",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(sum(DTTarget[Target (Loading)]),FILTER(DTTarget,DTTarget[ProcessId]=ProductWeeklyVsActual[ProcessID]))"
          },
          {
            "type": "calculated",
            "name": "PlannedSTPTarget",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(sum(PlannedSTPTarget[SumDuration]),FILTER(PlannedSTPTarget,PlannedSTPTarget[MachineID]=ProductWeeklyVsActual[MachineID] && PlannedSTPTarget[FinishDate]=ProductWeeklyVsActual[FinishDate]))"
          },
          {
            "type": "calculated",
            "name": "LicenseHolder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[LisenceHolderIdDesc],'Dimqv ProductExcel'[RayvarzNumber],",
              "ProductWeeklyVsActual[RayvarzId])"
            ]
          },
          {
            "type": "calculated",
            "name": "PerformanceTargetByproduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": " DIVIDE(ProductWeeklyVsActual[standardSpeed],ProductWeeklyVsActual[CustomizeSpeed])"
          },
          {
            "type": "calculated",
            "name": "ActualSpeed",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(AVERAGE('qv PerformanceReport'[ActualSpeed]),FILTER('qv PerformanceReport' ,",
              " ProductWeeklyVsActual[RayvarzId]='qv PerformanceReport'[RayvarzId] &&",
              "ProductWeeklyVsActual[BatchNo]='qv PerformanceReport'[BatchNo] && ",
              "ProductWeeklyVsActual[MachineID]='qv PerformanceReport'[MachineID] &&",
              "ProductWeeklyVsActual[FinishDate]='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[PlanTypeId]=26 &&",
              "ProductWeeklyVsActual[VersionTypeId]=1  && ProductWeeklyVsActual[PlanTypeId] = 26))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 9",
            "source": {
              "type": "calculated",
              "expression": [
                " union(",
                "SUMMARIZE('qv PerformanceReport', -- in {26,27,28} FILTER('qv PerformanceReport','qv PerformanceReport'[PlanTypeId]=26)",
                "'qv PerformanceReport'[MachineID],'qv PerformanceReport'[MachineDscFa],'qv PerformanceReport'[FinishDate],",
                "'qv PerformanceReport'[Typeprog],'qv PerformanceReport'[PlanTypeId],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ProcessID],",
                "'qv PerformanceReport'[ProductNameEn],",
                "'qv PerformanceReport'[BomVersion],'qv PerformanceReport'[ShMon],'qv PerformanceReport'[BatchNo],'qv PerformanceReport'[YearWeekNumber],",
                "'qv PerformanceReport'[ProcessNameFa],",
                "'qv PerformanceReport'[shiftId],'qv PerformanceReport'[shiftName],",
                "'qv PerformanceReport'[ShiladiYear],\"Remark\",max('qv PerformanceReport'[Remarknew]),",
                "\"LoadUnLoad\",0,\"Availability\",0,\"Performance\",0,\"Quality\",0 ,",
                "\"version\",\"\",\"VersionType\",\"Actual\",\"StopDuration\",sum('qv PerformanceReport'[DurationStopOverlay]),",
                "\"Duration\",sum('qv PerformanceReport'[DurationHdr])/60,\"box\",sum('qv PerformanceReport'[TotalProductionBox]),",
                "\"plannedstp-Rest\",sum('qv PerformanceReport'[PlannedStpPerBatch(Resting)])/60,",
                "\"UnplannedStpPerBatch-DownTime\",SUM('qv PerformanceReport'[UnplannedStpPerBatch-DownTime])/60,",
                "\"plannedstp<>Rest\",sum('qv PerformanceReport'[PlannedStp<>Resting])/60,",
                "\"standardSpeed\",max('qv PerformanceReport'[StandardSpeedT]),",
                "\"CustomizeSpeed\",max('qv PerformanceReport'[CustomizeSpeedT]),\"AVGSpeed\",max('qv PerformanceReport'[modified avgspeed]),\"NewOEE\",max('qv PerformanceReport'[StanOEE]),",
                "\"SAvailability\",max('qv PerformanceReport'[NewAvailability]),\"SPerformance\",max('qv PerformanceReport'[Productivity]),",
                "\"StandardCT\",max('qv PerformanceReport'[SNewTotalTime]),\"ActualCT\",max('qv PerformanceReport'[TotalTimePerBatch(h)])*60",
                " )",
                ",",
                "",
                "SUMMARIZE(filter('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[VersionTypeNumber] in {1,2,3,4}),    ",
                "  --in {26,27,28}  FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId]=26 )",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[DateID],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[ProductNameEn],'qv CompareDailyPlanHistory'[BomVersion],'qv CompareDailyPlanHistory'[Month],'qv CompareDailyPlanHistory'[BacthNo],",
                "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[ProcessNameFa],",
                "'qv CompareDailyPlanHistory'[Shift], 'qv CompareDailyPlanHistory'[shiftName],",
                "'qv CompareDailyPlanHistory'[ShiladiYear],'qv CompareDailyPlanHistory'[Remark],",
                "'qv CompareDailyPlanHistory'[LoudUnloadTimePerMachinePerPoduct],",
                "'qv CompareDailyPlanHistory'[AvailabilityTime],'qv CompareDailyPlanHistory'[PerformanceTime],",
                "'qv CompareDailyPlanHistory'[QualityTime],'qv CompareDailyPlanHistory'[version],'qv CompareDailyPlanHistory'[VersionType],\"StopDuration\",0,",
                "\"Duration\",sum('qv CompareDailyPlanHistory'[NewTimeMin])/60,\"Box\",sum('qv CompareDailyPlanHistory'[Box]),",
                "\"Plannedstp-Rest\",MAX('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift])/60,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,",
                "\"standardSpeed\",max('qv CompareDailyPlanHistory'[StandardSpeed]),\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "",
                "SUMMARIZE(filter('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[VersionTypeNumber] =5),    ",
                "  --in {26,27,28}  FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId]=26 )",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[DateID],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[ProductNameEn],'qv CompareDailyPlanHistory'[BomVersion],'qv CompareDailyPlanHistory'[Month],'qv CompareDailyPlanHistory'[BacthNo],",
                "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[ProcessNameFa],",
                "'qv CompareDailyPlanHistory'[Shift], 'qv CompareDailyPlanHistory'[shiftName],",
                "'qv CompareDailyPlanHistory'[ShiladiYear],'qv CompareDailyPlanHistory'[Remark],",
                "'qv CompareDailyPlanHistory'[LoudUnloadTimePerMachinePerPoduct],",
                "'qv CompareDailyPlanHistory'[AvailabilityTime],'qv CompareDailyPlanHistory'[PerformanceTime],",
                "'qv CompareDailyPlanHistory'[QualityTime],'qv CompareDailyPlanHistory'[version],\"VersionType\",\"First Plan\",\"StopDuration\",0,",
                "\"Duration\",sum('qv CompareDailyPlanHistory'[NewTimeMin])/60,\"Box\",sum('qv CompareDailyPlanHistory'[Box]),",
                "\"Plannedstp-Rest\",MAX('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift])/60,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,",
                "\"standardSpeed\",max('qv CompareDailyPlanHistory'[StandardSpeed]),\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "SUMMARIZE(filter('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[VersionTypeNumber] =5),    ",
                "  --in {26,27,28}  FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId]=26 )",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[DateID],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[ProductNameEn],'qv CompareDailyPlanHistory'[BomVersion],'qv CompareDailyPlanHistory'[Month],'qv CompareDailyPlanHistory'[BacthNo],",
                "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[ProcessNameFa],",
                "'qv CompareDailyPlanHistory'[Shift], 'qv CompareDailyPlanHistory'[shiftName],",
                "'qv CompareDailyPlanHistory'[ShiladiYear],'qv CompareDailyPlanHistory'[Remark],",
                "'qv CompareDailyPlanHistory'[LoudUnloadTimePerMachinePerPoduct],",
                "'qv CompareDailyPlanHistory'[AvailabilityTime],'qv CompareDailyPlanHistory'[PerformanceTime],",
                "'qv CompareDailyPlanHistory'[QualityTime],'qv CompareDailyPlanHistory'[version],\"VersionType\",\"Last Plan\",\"StopDuration\",0,",
                "\"Duration\",sum('qv CompareDailyPlanHistory'[NewTimeMin])/60,\"Box\",sum('qv CompareDailyPlanHistory'[Box]),",
                "\"Plannedstp-Rest\",MAX('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift])/60,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,",
                "\"standardSpeed\",max('qv CompareDailyPlanHistory'[StandardSpeed]),\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "",
                "SUMMARIZE(filter('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[VersionTypeNumber] =6),    ",
                "  --in {26,27,28}  FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId]=26 )",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[DateID],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[ProductNameEn],'qv CompareDailyPlanHistory'[BomVersion],'qv CompareDailyPlanHistory'[Month],'qv CompareDailyPlanHistory'[BacthNo],",
                "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[ProcessNameFa],",
                "'qv CompareDailyPlanHistory'[Shift], 'qv CompareDailyPlanHistory'[shiftName],",
                "'qv CompareDailyPlanHistory'[ShiladiYear],'qv CompareDailyPlanHistory'[Remark],",
                "'qv CompareDailyPlanHistory'[LoudUnloadTimePerMachinePerPoduct],",
                "'qv CompareDailyPlanHistory'[AvailabilityTime],'qv CompareDailyPlanHistory'[PerformanceTime],",
                "'qv CompareDailyPlanHistory'[QualityTime],'qv CompareDailyPlanHistory'[version],\"VersionType\",\"Last Plan\",\"StopDuration\",0,",
                "\"Duration\",sum('qv CompareDailyPlanHistory'[NewTimeMin])/60,\"Box\",sum('qv CompareDailyPlanHistory'[Box]),",
                "\"Plannedstp-Rest\",MAX('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift])/60,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,",
                "\"standardSpeed\",max('qv CompareDailyPlanHistory'[StandardSpeed]),\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "",
                "SUMMARIZE(filter('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[VersionTypeNumber] =6),    ",
                "  --in {26,27,28}  FILTER('qv CompareDailyPlanHistory','qv CompareDailyPlanHistory'[PlanTypeId]=26 )",
                "'qv CompareDailyPlanHistory'[MachineID],'qv CompareDailyPlanHistory'[MachineDscFa],  'qv CompareDailyPlanHistory'[DateID],",
                "'qv CompareDailyPlanHistory'[ConfigName],'qv CompareDailyPlanHistory'[PlanTypeId], 'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[ProductNameEn],'qv CompareDailyPlanHistory'[BomVersion],'qv CompareDailyPlanHistory'[Month],'qv CompareDailyPlanHistory'[BacthNo],",
                "'qv CompareDailyPlanHistory'[YearWeekNumber],'qv CompareDailyPlanHistory'[ProcessNameFa],",
                "'qv CompareDailyPlanHistory'[Shift], 'qv CompareDailyPlanHistory'[shiftName],",
                "'qv CompareDailyPlanHistory'[ShiladiYear],'qv CompareDailyPlanHistory'[Remark],",
                "'qv CompareDailyPlanHistory'[LoudUnloadTimePerMachinePerPoduct],",
                "'qv CompareDailyPlanHistory'[AvailabilityTime],'qv CompareDailyPlanHistory'[PerformanceTime],",
                "'qv CompareDailyPlanHistory'[QualityTime],'qv CompareDailyPlanHistory'[version],\"VersionType\",\"Second Plan\",\"StopDuration\",0,",
                "\"Duration\",sum('qv CompareDailyPlanHistory'[NewTimeMin])/60,\"Box\",sum('qv CompareDailyPlanHistory'[Box]),",
                "\"Plannedstp-Rest\",MAX('qv CompareDailyPlanHistory'[StandardStopPerMachinePerPlanPerShift])/60,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,",
                "\"standardSpeed\",max('qv CompareDailyPlanHistory'[StandardSpeed]),\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "",
                "",
                "SUMMARIZE(filter('qv MPS','qv MPS'[IsLastF]= TRUE && 'qv MPS'[TargetTypeId]=47),",
                "'qv MPS'[MachineID],'qv MPS'[MachineDescFa],'qv MPS'[BatchCount],'qv MPS'[TargetType],'qv MPS'[TargetTypeId],",
                "'qv MPS'[RayvarzId],'qv MPS'[ProcessId],'qv MPS'[ProductNameEn], 'qv MPS'[BomVersion],'qv MPS'[month],\"BatchNo\",max('qv MPS'[BatchCount]),\"YearWeekNumber\",0,",
                "\"processname\",max('qv MPS'[ProcessNameFa]),\"ShiftId\",\"\",\"ShiftName\",\"\", \"ShiladiYear\",0,\"Remark\",\"\",\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,\"VersionType\",\"Forcast\",\"StopDuration\",0,",
                "\"Duration\",(max('qv MPS'[TotalTimePerBox(OEE Actual)])*max('qv MPS'[BatchCountBatchBox]))/60,\"Box\",max('qv MPS'[BatchCountBatchBox]),\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,",
                "\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0,\"StandardCT\",0,\"ActualCT\",0",
                "",
                " )",
                ",",
                "SUMMARIZE(filter('qv MPS','qv MPS'[IsLastF]= TRUE && 'qv MPS'[TargetTypeId]<>47 && 'qv MPS'[TargetTypeId]='qv MPS'[CorrectBudgetVersion]),",
                " 'qv MPS'[MachineID],'qv MPS'[MachineDescFa],'qv MPS'[BatchCount],'qv MPS'[TargetType],'qv MPS'[TargetTypeId],",
                " 'qv MPS'[RayvarzId],'qv MPS'[ProcessId],'qv MPS'[ProductNameEn], 'qv MPS'[BomVersion],'qv MPS'[month],\"BatchNo\",max('qv MPS'[BatchCount]),\"YearWeekNumber\",0,",
                "\"processname\",max('qv MPS'[ProcessNameFa]),\"ShiftId\",\"\",\"ShiftName\",\"\", \"ShiladiYear\",0,\"Remark\",\"\",\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,\"VersionType\",\"Budget\",\"StopDuration\",0,",
                "\"Duration\",(max('qv MPS'[TotalTimePerBox(OEE Actual)])*max('qv MPS'[BatchCountBatchBox]))/60,\"Box\",max('qv MPS'[BatchCountBatchBox]),\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,",
                "\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0,\"StandardCT\",0,\"ActualCT\",0",
                " ),",
                "",
                "",
                "SUMMARIZE(CMOStore,CMOStore[MachineId],CMOStore[MachineDesc],CMOStore[TarikhSanad],",
                "CMOStore[TypeProg],CMOStore[PlanTypeId],CMOStore[CodeKala],CMOStore[ProcessId],CMOStore[OnvanKala],",
                "CMOStore[BomVersion],CMOStore[CMOMonth],CMOStore[Serial],CMOStore[YearWeekNumber],[ProcessName],CMOStore[ShiftId],CMOStore[ShiftName],CMOStore[ShiladiYear],",
                "\"Remark\",max(CMOStore[SharhRadifSanad]),\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,\"VersionType\",\"Actual\",\"StopDuration\",0,\"Duration\",0,\"Box\",sum(CMOStore[NewKhalesTolid]),",
                "\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                " ,\"StandardCT\",0,\"ActualCT\",0",
                "),",
                "",
                "SUMMARIZE('pbi PMSchedule','pbi PMSchedule'[MachineId],'pbi PMSchedule'[MachineNameEn],'pbi PMSchedule'[DateId],",
                "'pbi PMSchedule'[TypeProg],'pbi PMSchedule'[PlanTypeId],'pbi PMSchedule'[RayvarzId],'pbi PMSchedule'[ProcessId],'pbi PMSchedule'[ProductName],",
                "'pbi PMSchedule'[BomVersion],'pbi PMSchedule'[Shmonth],'pbi PMSchedule'[BatchNo],'pbi PMSchedule'[YearWeekNumber],'pbi PMSchedule'[ProcessNameEn],'pbi PMSchedule'[ShilftId],'pbi PMSchedule'[ShiftName],'pbi PMSchedule'[ShiladiYear],",
                "\"Remark\",max('pbi PMSchedule'[PMTypeDesc]),\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,\"VersionType\",\"PM Schedule\",\"StopDuration\",0,\"Duration\",max('pbi PMSchedule'[Duration(h)]),\"Box\",sum('pbi PMSchedule'[BatchNo])*0,",
                "\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0 )",
                "",
                ",",
                "",
                "SUMMARIZE('pbi PMForecast','pbi PMForecast'[MachineId],'pbi PMForecast'[MachineName],'pbi PMForecast'[DateId],",
                "'pbi PMForecast'[TypeProg],'pbi PMForecast'[PlanTypeId],'pbi PMForecast'[RayvarzId],'pbi PMForecast'[ProcessId],'pbi PMForecast'[ProductName],",
                "'pbi PMForecast'[BomVersion],'pbi PMForecast'[Shmonth],'pbi PMForecast'[BatchNo],'pbi PMForecast'[YearWeekNumber],'pbi PMForecast'[ProcessNameEn],'pbi PMForecast'[ShilftId],'pbi PMForecast'[ShiftName],'pbi PMForecast'[ShiladiYear],",
                "\"Remark\",max('pbi PMForecast'[NewPMDesc]),\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,\"VersionType\",\"PM Forecast\",\"StopDuration\",0,\"Duration\",max('pbi PMForecast'[Duration]),\"Box\",sum('pbi PMForecast'[BatchNo])*0,",
                "\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,\"CustomizeSpeed\",0,\"AVGSpeed\",0,\"NewOEE\",0,\"SAvailability\",0,\"SPerformance\",0",
                ",\"StandardCT\",0,\"ActualCT\",0 )",
                "",
                " )",
                ""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "SatFirstvsForcast",
            "expression": [
              "",
              "var vweeklyfirst = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]), ",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"weekly First Version\"))",
              "",
              "var vforcast = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ALL(ProductWeeklyVsActual)",
              ",ProductWeeklyVsActual[ShMon]=SELECTEDVALUE(ProductWeeklyVsActual[ShMon]) &&",
              " ProductWeeklyVsActual[ProcessCategory]=SELECTEDVALUE(ProductWeeklyVsActual[ProcessCategory]) &&",
              " ProductWeeklyVsActual[VersionType]=\"Forcast\" ))",
              "return ",
              "",
              "DIVIDE(vweeklyfirst,vforcast)",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "SatLastvsForcast",
            "expression": [
              "",
              "var vweeklyfirst = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly Last Version\"))",
              "",
              "var vforcast = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ALL(ProductWeeklyVsActual)",
              ",ProductWeeklyVsActual[ShMon]=SELECTEDVALUE(ProductWeeklyVsActual[ShMon]) &&",
              " ProductWeeklyVsActual[ProcessCategory]=SELECTEDVALUE(ProductWeeklyVsActual[ProcessCategory]) &&",
              " ProductWeeklyVsActual[VersionType]=\"Forcast\" ))",
              "",
              "return ",
              "",
              "DIVIDE(vweeklyfirst,vforcast)",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxForcast",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Forcast\" ))/1000000",
              "",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "SatActualvsForcast",
            "expression": [
              "",
              "var VActual = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]), ",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Actual\"))",
              "",
              "var vforcast = ",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ALL(ProductWeeklyVsActual)",
              ",ProductWeeklyVsActual[ShMon]=SELECTEDVALUE(ProductWeeklyVsActual[ShMon]) &&",
              " ProductWeeklyVsActual[ProcessCategory]=SELECTEDVALUE(ProductWeeklyVsActual[ProcessCategory]) &&",
              " ProductWeeklyVsActual[VersionType]=\"Forcast\" ))",
              "return ",
              "DIVIDE(VActual,vforcast)",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TimeActual",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 ))*60",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "TimeForcast",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Forcast\" ))",
              ""
            ]
          },
          {
            "name": "TimeLastVersion",
            "expression": [
              "",
              " CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionTypeid]=3))*60",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "TimeFirstVersion",
            "expression": [
              "",
              " CALCULATE(SUM(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual, ",
              "ProductWeeklyVsActual[VersionTypeid]=2))*60"
            ]
          },
          {
            "name": "UnitForcast",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Forcast\" ))",
              ""
            ]
          },
          {
            "name": "UnitLastVersion",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly Last Version\"))",
              ""
            ]
          },
          {
            "name": "UnitFirstVersion",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly First Version\"))",
              ""
            ]
          },
          {
            "name": "UnitActual",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))",
              "",
              ""
            ]
          },
          {
            "name": "KiloWeeklyFirstVersion",
            "expression": [
              "",
              "/*",
              "var tbl= SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=2 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[BatchNo],ProductWeeklyVsActual[StandardBatchKilo])",
              "",
              "return ",
              " SUMX(tbl,ProductWeeklyVsActual[StandardBatchKilo])",
              "*/",
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly First Version\"))",
              "",
              ""
            ]
          },
          {
            "name": "KiloWeeklyLastVersion",
            "expression": [
              "",
              "/*",
              "var tbl= SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=3 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[BatchNo],ProductWeeklyVsActual[StandardBatchKilo])",
              "",
              "return ",
              "SUMX(tbl,ProductWeeklyVsActual[StandardBatchKilo])",
              "*/",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly Last Version\"))",
              ""
            ]
          },
          {
            "name": "KiloForcast",
            "expression": [
              "",
              "/*",
              "var tbl= SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=4),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[BatchNo],ProductWeeklyVsActual[StandardBatchKilo])",
              "",
              "return ",
              "SUMX(tbl,ProductWeeklyVsActual[BatchNo]*ProductWeeklyVsActual[StandardBatchKilo])",
              "*/",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Forcast\"))",
              ""
            ]
          },
          {
            "name": "KiloActual",
            "expression": [
              "",
              "/*",
              "var tbl= SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[BatchNo],ProductWeeklyVsActual[StandardBatchKilo])",
              "",
              "return ",
              "SUMX(tbl,ProductWeeklyVsActual[StandardBatchKilo])",
              "*/",
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Actual\"))",
              ""
            ]
          },
          {
            "name": "BoxhighRisk",
            "expression": [
              "",
              "DIVIDE(",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "  ProductWeeklyVsActual[RiskStatus]=\"High Risk\" ))",
              ",",
              "",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "  ProductWeeklyVsActual[RiskStatus]=\"High Risk\"))",
              ")",
              "*",
              " ",
              "DIVIDE(",
              "   CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "   ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "   ProductWeeklyVsActual[RiskStatus]=\"High Risk\"))",
              ",",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 ))",
              ")",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxCoatinghighRisk",
            "expression": [
              "",
              "DIVIDE(",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "  ProductWeeklyVsActual[RiskStatusCoating]=\"High Risk\"))",
              ",",
              "",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "  ProductWeeklyVsActual[RiskStatusCoating]=\"High Risk\" ))",
              ")",
              "*",
              " ",
              "DIVIDE(",
              "   CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "   ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 && ",
              "   ProductWeeklyVsActual[RiskStatusCoating]=\"High Risk\"))",
              ",",
              "  CALCULATE(SUM(ProductWeeklyVsActual[box])",
              "  ,filter(ALLSELECTED(ProductWeeklyVsActual),ProductWeeklyVsActual[VersionTypeId]=2 ))",
              ")",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxBudget",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Budget\" ))/1000000",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "UnitBudget",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Budget\" ))",
              ""
            ]
          },
          {
            "name": "TimeBudget",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Budget\" ))",
              ""
            ]
          },
          {
            "name": "KiloBudget",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Budget\"))",
              ""
            ]
          },
          {
            "name": "Unit4Week",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Weekly 4week\" ))",
              ""
            ]
          },
          {
            "name": "Time4week",
            "expression": [
              "",
              "FIXED(CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Weekly 4Week\" )),0,1)",
              "& \"   4Week(Time)\"",
              ""
            ]
          },
          {
            "name": "Kilo4Week",
            "expression": [
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Weekly 4week\"))",
              ""
            ]
          },
          {
            "name": "TotalBox",
            "expression": [
              "",
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = SELECTEDVALUE(TblVersionType[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              " ",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "return ",
              "",
              "",
              "  SWITCH (",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\"  && VersionType = \"Actual TotalMonth\"  , (CALCULATE(sum(ProductWeeklyVsActual[NewBox]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE(sum(ProductWeeklyVsActual[NewBox]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )))/1000000",
              "  ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\" && VersionType = \"Actual TotalMonth\",  (CALCULATE(sum(ProductWeeklyVsActual[Unit]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE(sum(ProductWeeklyVsActual[Unit]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )))/1000000",
              " ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\" && VersionType = \"Actual TotalMonth\",  (CALCULATE(sum(ProductWeeklyVsActual[TotalBatchKilo]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE(sum(ProductWeeklyVsActual[TotalBatchKilo]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )))/1000000",
              ",   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\" && VersionType = \"Actual TotalMonth\",  (CALCULATE(DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE(DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )))",
              ",    --",
              "        ",
              "          TimeTypeSelection = \"Time\" && VersionType = \"Actual TotalMonth\", (CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )))*60",
              "    -- ok ",
              "",
              "     ,",
              "",
              "TimeTypeSelection = \"Box\" && VersionType <> \"Actual TotalMonth\" ,  CALCULATE(sum(ProductWeeklyVsActual[NewBox]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType ))/1000000 ,",
              "",
              " TimeTypeSelection = \"Unit\" && VersionType <> \"Actual TotalMonth\" , CALCULATE(sum(ProductWeeklyVsActual[Unit]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType ))/1000000,",
              "",
              "TimeTypeSelection = \"kilo\" && VersionType <> \"Actual TotalMonth\" , CALCULATE(sum(ProductWeeklyVsActual[TotalBatchKilo]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType ))/1000000,",
              "",
              "  TimeTypeSelection = \"Batch\" && VersionType <> \"Actual TotalMonth\" ,CALCULATE(DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType )),",
              "",
              "TimeTypeSelection = \"Time\" && VersionType <> \"Actual TotalMonth\" , CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType ))*60,",
              "",
              "          BLANK()",
              ")",
              "",
              "  ",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00"
          },
          {
            "name": "AchievementActualvsFirst",
            "expression": [
              "",
              "",
              " DIVIDE(CALCULATE([MonthToDateSelection],FILTER(TblVersionType,TblVersionType[VersionType]=\"Actual\")),",
              " CALCULATE([MonthToDateSelection],FILTER(TblVersionType, TblVersionType[VersionType]=\"First Plan\")))",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "AchievementActualvsLast",
            "expression": [
              "",
              "",
              "DIVIDE(CALCULATE([MonthToDateSelection],FILTER(TblVersionType, TblVersionType[VersionType]=\"Actual\")),",
              "CALCULATE([MonthToDateSelection],FILTER(TblVersionType, TblVersionType[VersionType]=\"Last Plan\")))",
              "",
              "",
              "",
              "",
              "/*",
              "var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "  RETURN",
              "      SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", ",
              "DIVIDE(",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))/1000000,",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))/1000000",
              ")  ,  --ok   MBox ",
              "",
              "         TimeTypeSelection = \"Unit\", ",
              "DIVIDE(",
              "CALCULATE(SUM(ProductWeeklyVsActual[unit]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)),",
              "CALCULATE(SUM(ProductWeeklyVsActual[Unit]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))",
              ")  ,    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", ",
              "DIVIDE(",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)),",
              "CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))",
              ") ,   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\",   ",
              "DIVIDE(",
              "CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)),",
              "CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))",
              ") ,    --",
              "        ",
              "         TimeTypeSelection = \"Time\", ",
              "DIVIDE(",
              "CALCULATE(count(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)),",
              "CALCULATE(count(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))",
              "),",
              "          BLANK ()",
              "       )",
              "",
              "*/",
              "--DIVIDE([BoxActual],[BoxLastVersion])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TotalDuration",
            "expression": [
              " SUM(ProductWeeklyVsActual[Duration])*60",
              "",
              ""
            ]
          },
          {
            "name": "BoxActualMain",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))/1000000",
              ""
            ]
          },
          {
            "name": "BoxLastVersionMain",
            "expression": [
              "",
              " CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly Last Version\"))/1000000",
              ""
            ]
          },
          {
            "name": "Box4WeekMain",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "filter(ProductWeeklyVsActual,",
              "ProductWeeklyVsActual[VersionType]=\"Weekly 4week\" ))/1000000 "
            ]
          },
          {
            "name": "BoxFirstVersionMain",
            "expression": [
              "",
              " CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly First Version\"))",
              "/1000000",
              ""
            ]
          },
          {
            "name": "Time4weekMain",
            "expression": [
              "",
              "FIXED(CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Weekly 4Week\" ))",
              ")"
            ]
          },
          {
            "name": "TimeFirstVersionMain",
            "expression": [
              "",
              "FIXED(CALCULATE(SUM(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual, ",
              "ProductWeeklyVsActual[VersionType]=\"weekly First Version\"))",
              ")"
            ]
          },
          {
            "name": "TimeLastVersionMain",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"weekly Last Version\"))"
            ]
          },
          {
            "name": "TimeActualMain",
            "expression": [
              "",
              "CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 ))",
              "",
              ""
            ],
            "formatString": "0"
          },
          {
            "name": "MonthToDateSelection",
            "expression": [
              "",
              "var vsite = VALUES(ProductWeeklyVsActual[SiteType])",
              "--",
              "var VProcessCategory =  VALUES(ProductWeeklyVsActual[ProcessCategory])",
              "var VProcess = values(ProductWeeklyVsActual[ProcessNameFa])",
              "",
              "var VMachine = values(ProductWeeklyVsActual[MachineDscFa])",
              "var VProduct = VALUES(ProductWeeklyVsActual[RayvarzId])",
              "var VShift =  values(ProductWeeklyVsActual[shiftName])",
              "var VTypeprog = VALUES(ProductWeeklyVsActual[Typeprog])",
              "--",
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = SELECTEDVALUE(TblVersionType[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              " ",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              "",
              "return ",
              "",
              "   SWITCH (",
              "          TRUE (),",
              "",
              "vmonthtype=\"Daily\" , CALCULATE([UnitSelection] ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType))  ,",
              "vmonthtype=\"Month To Date\",  ",
              "CALCULATE([UnitSelection], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=VersionType )),",
              "      ",
              "vmonthtype= \"Month To Go\" && VersionType=\"Actual\", ",
              "CALCULATE([UnitSelection],FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ",
              "ProductWeeklyVsActual[FinishDate]>=currentDate && ProductWeeklyVsActual[VersionType]=\"Last Plan\" )) ,    ",
              "",
              "vmonthtype=\"Month To Go\" && VersionType <> \"Actual\", ",
              "CALCULATE([UnitSelection],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=VersionType )), ",
              "",
              "vmonthtype=\"Total Month\"  && VersionType <> \"Actual\", ",
              "CALCULATE([UnitSelection], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<=endate  && ProductWeeklyVsActual[VersionType]=VersionType ))",
              "  ,",
              "vmonthtype=\"Total Month\"  && VersionType = \"Actual\", ",
              " CALCULATE([UnitSelection],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE([UnitSelection],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )),",
              "",
              "      BLANK ()",
              "       )",
              "",
              "",
              "",
              "/*",
              "",
              " if( vmonthtype=\"Month To Date\", monthtodate ,",
              "  if(  vmonthtype= \"Month To Go\" && VersionType=\"Actual\", monthtogoLastPlan,",
              "  if(  vmonthtype=\"Month To Go\" && VersionType <> \"Actual\", monthtogo,",
              "  if(   vmonthtype=\"Total Month\"  && VersionType <> \"Actual\", totalMonth,",
              "  if(   vmonthtype=\"Total Month\"  && VersionType = \"Actual\",  monthtogoLastPlan + monthtodateActual ,",
              "  if(   vmonthtype=\"Daily\" , [UnitSelection]",
              "   ))))",
              "))",
              "*/",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "LastPlanUnitSelection",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "  RETURN",
              "      SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", CALCULATE(SUM(ProductWeeklyVsActual[box]), ",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))  ,  --ok   MBox ",
              "",
              "         TimeTypeSelection = \"Unit\", CALCULATE(SUM(ProductWeeklyVsActual[unit]), ",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))  ,    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]), ",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))  ,   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\",  CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]), ",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))  ,    --",
              "        ",
              "         TimeTypeSelection = \"Time\", CALCULATE(SUM(ProductWeeklyVsActual[Duration]), ",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"Last Plan\"))  ,   -- ok ",
              "     ",
              "         BLANK ()",
              "      )",
              "",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "FirstPlanUnitSelection",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "",
              "  RETURN",
              "      SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"First Plan\"))  ,  --ok   MBox ",
              "",
              "         TimeTypeSelection = \"Unit\", CALCULATE(SUM(ProductWeeklyVsActual[unit]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"First Plan\")) ,    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"First Plan\")) ,   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\",   CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"First Plan\")) ,    --",
              "        ",
              "         TimeTypeSelection = \"Time\", CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "filter(ProductWeeklyVsActual, ProductWeeklyVsActual[VersionType]=\"First Plan\"))*60 ,   -- ok ",
              "     ",
              "         BLANK ()",
              "      )",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "ActualUnitSelection",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "  RETURN",
              "      SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "          filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))  ,  --ok   MBox ",
              "",
              "         TimeTypeSelection = \"Unit\",CALCULATE(SUM(ProductWeeklyVsActual[unit]),",
              "          filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)) ,    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "          filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1)) ,   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\", CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]),",
              "          filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))  ,    --",
              "        ",
              "         TimeTypeSelection = \"Time\", CALCULATE(SUM(ProductWeeklyVsActual[Duration]),",
              "          filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1))  ,   -- ok ",
              "     ",
              "         BLANK ()",
              "      )",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "4WeekUnitSelection",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "",
              "  RETURN",
              "      SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", CALCULATE(SUM(ProductWeeklyVsActual[box]),",
              "              filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"4Week Plan\"))  ,  --ok   MBox ",
              "",
              "         TimeTypeSelection = \"Unit\", CALCULATE(SUM(ProductWeeklyVsActual[unit]),",
              "              filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"4Week Plan\")) ,    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", CALCULATE(SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "              filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"4Week Plan\")) ,   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\",  CALCULATE(count(ProductWeeklyVsActual[NewBatchNo]),",
              "              filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"4Week Plan\")) ,    --",
              "        ",
              "         TimeTypeSelection = \"Time\", CALCULATE(count(ProductWeeklyVsActual[Duration]),",
              "              filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"4Week Plan\"))*60 ,   -- ok ",
              "     ",
              "         BLANK ()",
              "      )",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "UnitSelection",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              " var tbl1 = SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[BatchNoException]<>0)",
              "             ,ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[processid],ProductWeeklyVsActual[CenterType],",
              "              ProductWeeklyVsActual[processcategory],ProductWeeklyVsActual[versiontype], ProductWeeklyVsActual[Duration]",
              "              ,\"unit\",sum(ProductWeeklyVsActual[Unit]),\"kilo\",sum(ProductWeeklyVsActual[TotalBatchKilo]),",
              "              \"batchcount\",DISTINCTCOUNT(ProductWeeklyVsActual[NewBatchNo]),\"box\",sum(ProductWeeklyVsActual[box]))",
              "--filter(tbl1,[processcategory]=\"Packaging\")",
              "var tbl2= GROUPBY(filter(tbl1,[processcategory]=\"Packaging\"),ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[ProcessID])",
              "var tbl5= GROUPBY(filter(tbl1,[processcategory]<>\"Packaging\"),ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[ProcessID])",
              "",
              "var tbl3= SELECTCOLUMNS(GROUPBY(tbl2,ProductWeeklyVsActual[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),ProductWeeklyVsActual[ProcessID]))",
              "                ,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              " ",
              "",
              "var tbl7= SELECTCOLUMNS(SUMMARIZE(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",1 )   --countx(CURRENTGROUP(),ProductWeeklyVsActual[ProcessID])",
              "                 ,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              "--GROUPBY(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),xm) ",
              "--var tbl7 = SUMMARIZE(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",1,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              "",
              "var tbl6  = union(tbl3,tbl7)",
              "",
              "var vjoin =FILTER(CROSSJOIN(tbl1,tbl6),ProductWeeklyVsActual[RayvarzId]=[rayvarz])",
              "--manual packaging id =20 -- blister id = 17 ",
              "var tbl9 = SUMMARIZE(vjoin,ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[processid],ProductWeeklyVsActual[CenterType],",
              "               ProductWeeklyVsActual[processcategory],ProductWeeklyVsActual[versiontype],ProductWeeklyVsActual[Duration],[countprocess],[box],[kilo],[unit],[batchcount])",
              "",
              "",
              "var tbl4 = UNION(filter(tbl9,ProductWeeklyVsActual[processid]=20 && [countprocess]=2 && ProductWeeklyVsActual[CenterType]=93) ,",
              "filter(tbl9, [countprocess]=2 && ProductWeeklyVsActual[CenterType]<>93)  ,filter(tbl9, [countprocess]=1)) -- ,filter(vjoin, [countprocess]=2 && ProductWeeklyVsActual[CenterType]<>93)",
              " ",
              "",
              "",
              "",
              " RETURN",
              "",
              "  SWITCH (",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  sumx(tbl4,[box])  ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  sumx(tbl4,[unit]) ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\",  sumx(tbl4,[kilo]),   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  DISTINCTcount(ProductWeeklyVsActual[RayvarzBatch]),    --",
              "        ",
              "           TimeTypeSelection = \"Time\", SUM(ProductWeeklyVsActual[Duration])*60 ,   -- ok ",
              "",
              "           TimeTypeSelection = \"Count\", sumx(SUMMARIZE(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate],",
              "                                         ProductWeeklyVsActual[MachineEn],\"aa\",DISTINCTcount(ProductWeeklyVsActual[Remark])) ,[aa]),",
              "",
              "           TimeTypeSelection = \"Person\",  sumx(SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=\"Last Plan\") ,ProductWeeklyVsActual[FinishDate],",
              "                                         ProductWeeklyVsActual[MachineEn],\"aa\",DISTINCTcount(ProductWeeklyVsActual[Remark])*max(ProductWeeklyVsActual[PMPerson]) ) ,[aa]) ,",
              "     ",
              "          BLANK()",
              ")",
              "",
              "",
              "/*",
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "return ",
              "       SWITCH (",
              "         TRUE (),",
              "         TimeTypeSelection = \"Box\", SUM (ProductWeeklyVsActual[newbox])  ,       --ok      MBox ",
              "",
              "         TimeTypeSelection = \"Unit\", SUM (ProductWeeklyVsActual[Unit]),    -- ok",
              "            ",
              "         TimeTypeSelection = \"kilo\", SUM(ProductWeeklyVsActual[TotalBatchKilo]),   -- ok",
              " ",
              "         TimeTypeSelection = \"Batch\", count(ProductWeeklyVsActual[NewBatchNo]),    --",
              "        ",
              "         TimeTypeSelection = \"Time\", SUM(ProductWeeklyVsActual[Duration])*60 ,   -- ok ",
              "     ",
              "          BLANK()",
              "      )",
              "*/",
              "",
              "/*",
              "",
              " var tbl93 = SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[CenterType]=93),",
              "              ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[processid],ProductWeeklyVsActual[CenterType],",
              "              ProductWeeklyVsActual[processcategory],ProductWeeklyVsActual[versiontype],",
              "              ProductWeeklyVsActual[Unit],ProductWeeklyVsActual[TotalBatchKilo],ProductWeeklyVsActual[NewBatchNo],",
              "              ProductWeeklyVsActual[Duration],\"aaa\",sum(ProductWeeklyVsActual[newbox]))",
              "",
              "",
              "var total = union(tbl1,FILTER(tbl93,ProductWeeklyVsActual[processid]=20))",
              "--sumx(total,[aaa])",
              "  -- sum(ProductWeeklyVsActual[newbox])",
              "*/"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "MonthToDateSelectionBefore",
            "expression": [
              "",
              "var vsite = VALUES(ProductWeeklyVsActual[SiteType])",
              "--",
              "var VProcessCategory =  SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[ProcessCategory]),ProductWeeklyVsActual[ProcessCategory])",
              "",
              "var vtest = SUMMARIZE(filter(all(ProductWeeklyVsActual),ProductWeeklyVsActual[MiladiMonth] in values(ProductWeeklyVsActual[MiladiMonth])  &&",
              " ProductWeeklyVsActual[ShiladiYear] in values(ProductWeeklyVsActual[ShiladiYear]) && ProductWeeklyVsActual[YearWeekNumber] in values(ProductWeeklyVsActual[YearWeekNumber]))",
              ",ProductWeeklyVsActual[ProcessNameFa])",
              "-- && ProductWeeklyVsActual[ProcessNameFa] in VALUES(ProductWeeklyVsActual[ProcessNameFa]",
              "var test=COUNTROWS(vtest)",
              "",
              "var VProcess = SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[ProcessNameFa]),ProductWeeklyVsActual[ProcessNameFa])",
              "",
              "var VMachine = SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[MachineDscFa]),ProductWeeklyVsActual[MachineDscFa])",
              "var VProduct = SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[FinalProductName]),ProductWeeklyVsActual[FinalProductName])",
              "var VShift =   SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[shiftName]),ProductWeeklyVsActual[shiftName])",
              "var VTypeprog = SUMMARIZE(ALLSELECTED(ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear],ProductWeeklyVsActual[Typeprog]),ProductWeeklyVsActual[Typeprog])",
              "--",
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = VALUES(ProductWeeklyVsActual[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              " ",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              "",
              " var monthtodate =  ",
              " CALCULATE([UnitSelection], FILTER(all(ProductWeeklyVsActual),ProductWeeklyVsActual[FinishDate]>=sdate ",
              " && ProductWeeklyVsActual[FinishDate]<=currentDate && ProductWeeklyVsActual[SiteType] in vsite",
              " && ProductWeeklyVsActual[VersionType] in VersionType && ProductWeeklyVsActual[ProcessCategory] in VProcessCategory && ProductWeeklyVsActual[ProcessNameFa] in VProcess ",
              " && ProductWeeklyVsActual[MachineDscFa] in VMachine  && ProductWeeklyVsActual[FinalProductName] in VProduct",
              " && ProductWeeklyVsActual[shiftName] in VShift  && ProductWeeklyVsActual[Typeprog] in VTypeprog ))",
              "",
              "",
              "",
              "var monthtodateActual =  ",
              "CALCULATE([UnitSelection],",
              "FILTER(all(ProductWeeklyVsActual),ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<=currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\" ",
              "&& ProductWeeklyVsActual[SiteType] in vsite  && ProductWeeklyVsActual[ProcessCategory] in VProcessCategory ",
              " && ProductWeeklyVsActual[ProcessNameFa] in VProcess && ProductWeeklyVsActual[MachineDscFa] in VMachine",
              " && ProductWeeklyVsActual[FinalProductName] in VProduct && ProductWeeklyVsActual[shiftName] in VShift ",
              "&& ProductWeeklyVsActual[Typeprog] in VTypeprog  ))",
              "",
              "var monthtogoLastPlan =  ",
              "CALCULATE([UnitSelection],",
              "FILTER(all(ProductWeeklyVsActual),ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\" && ProductWeeklyVsActual[SiteType] in vsite",
              "&& ProductWeeklyVsActual[ProcessCategory] in VProcessCategory ",
              "&& ProductWeeklyVsActual[ProcessNameFa] in VProcess && ProductWeeklyVsActual[MachineDscFa] in VMachine",
              "&& ProductWeeklyVsActual[FinalProductName] in VProduct && ProductWeeklyVsActual[shiftName] in VShift ",
              "&& ProductWeeklyVsActual[Typeprog] in VTypeprog ))",
              "",
              "var monthtogo =  ",
              "CALCULATE([UnitSelection],",
              "FILTER(all(ProductWeeklyVsActual),ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>currentDate ",
              "&& ProductWeeklyVsActual[SiteType] in vsite  && ProductWeeklyVsActual[VersionType] in VersionType",
              "&& ProductWeeklyVsActual[ProcessCategory] in VProcessCategory ",
              "&& ProductWeeklyVsActual[ProcessNameFa] in VProcess && ProductWeeklyVsActual[MachineDscFa] in VMachine",
              "&& ProductWeeklyVsActual[FinalProductName] in VProduct && ProductWeeklyVsActual[shiftName] in VShift ",
              "&& ProductWeeklyVsActual[Typeprog] in VTypeprog ))",
              "",
              "var totalMonth =  ",
              "CALCULATE([UnitSelection], FILTER(all(ProductWeeklyVsActual),ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[SiteType] in vsite",
              "&& ProductWeeklyVsActual[VersionType] in VersionType  && ProductWeeklyVsActual[ProcessCategory] in VProcessCategory ",
              "&& ProductWeeklyVsActual[ProcessNameFa] in VProcess && ProductWeeklyVsActual[MachineDscFa]  in VMachine",
              "&& ProductWeeklyVsActual[FinalProductName] in VProduct && ProductWeeklyVsActual[shiftName]  in VShift ",
              "&& ProductWeeklyVsActual[Typeprog] in VTypeprog))",
              "",
              "",
              "",
              "return ",
              "test",
              "/*",
              " if( vmonthtype=\"Month To Date\", monthtodate ,",
              "  if(  vmonthtype= \"Month To Go\" && VersionType=\"Actual\", monthtogoLastPlan,",
              "  if(  vmonthtype=\"Month To Go\" && VersionType <> \"Actual\", monthtogo,",
              "  if(   vmonthtype=\"Total Month\"  && VersionType <> \"Actual\", totalMonth,",
              "  if(   vmonthtype=\"Total Month\"  && VersionType = \"Actual\",  monthtogoLastPlan + monthtodateActual ,",
              "  if(   vmonthtype=\"Daily\" , [UnitSelection]",
              "   ))))",
              "))",
              "*/",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "Achievement",
            "expression": [
              "",
              "var vversion= CALCULATE(max(TblVersionType[VersionType]),FILTER(TblVersionType,TblVersionType[VersionId]<>1))",
              "",
              " return ",
              " ",
              " DIVIDE(CALCULATE([MonthToDateSelection],FILTER(TblVersionType,TblVersionType[VersionType]=\"Actual\")),",
              "  CALCULATE([MonthToDateSelection],FILTER(TblVersionType, TblVersionType[VersionType] = vversion)))",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "UnitSelectionTotalOutput",
            "expression": [
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              " var tbl1 = SUMMARIZE(FILTER(ProductWeeklyVsActual ,ProductWeeklyVsActual[BatchNoException]<>0)    --,ProductWeeklyVsActual[Remark2]<>1",
              "             ,ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[processid],ProductWeeklyVsActual[CenterType],",
              "              ProductWeeklyVsActual[processcategory],ProductWeeklyVsActual[versiontype], ProductWeeklyVsActual[Duration]",
              "              ,\"unit\",sum(ProductWeeklyVsActual[Unit]),\"kilo\",sum(ProductWeeklyVsActual[TotalBatchKilo]),",
              "              \"batchcount\",count(ProductWeeklyVsActual[NewBatchNo]),\"box\",sum(ProductWeeklyVsActual[newbox]))",
              "",
              "",
              "var tbl2= GROUPBY(filter(tbl1,[processcategory]=\"Packaging\"),ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[ProcessID])",
              "var tbl5= GROUPBY(filter(tbl1,[processcategory]<>\"Packaging\"),ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[ProcessID])",
              "",
              "var tbl3= SELECTCOLUMNS(GROUPBY(tbl2,ProductWeeklyVsActual[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),ProductWeeklyVsActual[ProcessID]))",
              "                ,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              " ",
              "",
              "var tbl7= SELECTCOLUMNS(SUMMARIZE(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",1 )   --countx(CURRENTGROUP(),ProductWeeklyVsActual[ProcessID])",
              "                 ,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              "--GROUPBY(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),xm) ",
              "--var tbl7 = SUMMARIZE(tbl5,ProductWeeklyVsActual[rayvarzid],\"countprocess\",1,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              "",
              "var tbl6  = union(tbl3,tbl7)",
              "",
              "var vjoin =FILTER(CROSSJOIN(tbl1,tbl6),ProductWeeklyVsActual[RayvarzId]=[rayvarz])",
              "--manual packaging id =20 -- blister id = 17 ",
              "var tbl9 = SUMMARIZE(vjoin,ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[processid],ProductWeeklyVsActual[CenterType],",
              "               ProductWeeklyVsActual[processcategory],ProductWeeklyVsActual[versiontype],ProductWeeklyVsActual[Duration],[countprocess],[box],[kilo],[unit],[batchcount])",
              "",
              "",
              "",
              "/*",
              " var tbl2= GROUPBY(filter(tbl1,[processcategory]=\"Packaging\"),ProductWeeklyVsActual[rayvarzid],ProductWeeklyVsActual[ProcessID])",
              " var tbl3= SELECTCOLUMNS(GROUPBY(tbl2,ProductWeeklyVsActual[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),ProductWeeklyVsActual[ProcessID]))",
              "                ,\"rayvarz\",ProductWeeklyVsActual[RayvarzId],\"countprocess\",[countprocess])",
              "",
              "var vjoin =FILTER(CROSSJOIN(tbl1,tbl3),ProductWeeklyVsActual[RayvarzId]=[rayvarz])",
              "--manual packaging id =20 -- blister id = 17 ",
              "*/",
              "",
              "var tbl4 = UNION(filter(tbl9,ProductWeeklyVsActual[processid]=20 &&  ProductWeeklyVsActual[CenterType]=93) ,",
              " filter(tbl9, ProductWeeklyVsActual[CenterType]<>93  ))",
              " -- blister high potent ha dar nazar gerefte nashode",
              " RETURN",
              " ",
              " SWITCH (",
              "          TRUE (),",
              "         TimeTypeSelection = \"Box\",  sumx(tbl4,[box])  ,       --ok      MBox ",
              "",
              "          TimeTypeSelection = \"Unit\",  sumx(tbl4,[unit]) ,    -- ok",
              "            ",
              "          TimeTypeSelection = \"kilo\",  sumx(tbl4,[kilo]),   -- ok",
              " ",
              "          TimeTypeSelection = \"Batch\",   DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUM(ProductWeeklyVsActual[Duration])*60 ,   -- ok ",
              "     ",
              "          BLANK()",
              "      )"
            ]
          },
          {
            "name": "CapacityLoss",
            "expression": [
              "  ",
              "",
              "var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "var tbl = ",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(SUMMARIZE(DimMachine,DimMachine[MachineId],",
              "",
              "\"ForcastTarget\",max(ProductWeeklyVsActual[MPSTargetTime]),",
              "",
              "\"TotalTime\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[ActiveMonthBudget] <> BLANK())) *24 ),",
              "",
              "\"utilizationTime\",sum(ProductWeeklyVsActual[Duration]),",
              "\"utilizationBox\",sum(ProductWeeklyVsActual[box]),",
              "\"utilizationBatch\",DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "\"utilizationKilo\",SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "\"utilizationUnit\",SUM(ProductWeeklyVsActual[unit]),",
              "",
              "\"WorkingDay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=0)) *24),",
              "",
              "\"Holiay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=1)) *24)",
              "),",
              "\"Loss\",[WorkingDay]-[utilizationTime]),\"CapLosssTime\",if([Loss]<0,0,[Loss])),",
              "\"CapHoliday\",[TotalTime]-[utilizationTime]-[CapLosssTime])",
              "",
              "return ",
              "",
              "  SWITCH ( ",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  (SUMX(tbl,[CapLosssTime])* DIVIDE(SUMX(tbl,[utilizationBox]),SUMX(tbl,[utilizationTime])))/1000000 ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  (SUMX(tbl,[CapLosssTime])* DIVIDE(SUMX(tbl,[utilizationUnit]),SUMX(tbl,[utilizationTime])))/1000000 ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\", SUMX(tbl,[CapLosssTime])* DIVIDE(SUMX(tbl,[utilizationKilo]),SUMX(tbl,[utilizationTime])) ,   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  SUMX(tbl,[CapLosssTime])* DIVIDE(SUMX(tbl,[utilizationBatch]),SUMX(tbl,[utilizationTime])),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUMX(tbl,[CapLosssTime]) ,   -- ok ",
              "     ",
              "          BLANK()",
              ")"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "CapacityUtilization",
            "expression": [
              " ",
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "var tbl = ",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(SUMMARIZE(DimMachine,DimMachine[MachineId],",
              "",
              "\"ForcastTarget\",max(ProductWeeklyVsActual[MPSTargetTime]),",
              "",
              "\"TotalTime\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[ActiveMonthBudget] <> BLANK())) *24 ),",
              "",
              "\"utilizationTime\",sum(ProductWeeklyVsActual[Duration]),",
              "\"utilizationBox\",sum(ProductWeeklyVsActual[box]),",
              "\"utilizationBatch\",DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "\"utilizationKilo\",SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "\"utilizationUnit\",SUM(ProductWeeklyVsActual[unit]),",
              "",
              "\"WorkingDay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=0)) *24),",
              "",
              "\"Holiay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=1)) *24)",
              "),",
              "\"Loss\",[WorkingDay]-[utilizationTime]),\"CapLosss\",if([Loss]<0,0,[Loss])),",
              "\"CapHoliday\",[TotalTime]-[utilizationTime]-[CapLosss])",
              "",
              "",
              "return ",
              "",
              "  SWITCH ( ",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  SUMX(tbl,[utilizationBox]) /1000000 ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  SUMX(tbl,[utilizationUnit])/1000000 ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\",  SUMX(tbl,[utilizationKilo]),   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  SUMX(tbl,[utilizationBatch]),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUMX(tbl,[utilizationTime]) ,   -- ok ",
              "     ",
              "          BLANK()",
              ")",
              "",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "MPSTarget",
            "expression": [
              "",
              "",
              " var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "var tbl = ",
              "SUMMARIZE(ProductWeeklyVsActual,ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[MachineID],",
              "",
              "\"ForcastTargetTime\",max(ProductWeeklyVsActual[MPSTargetTime]),",
              "\"ForcastTargetBox\", max(ProductWeeklyVsActual[MPSTargetBox]),",
              "\"ForcastTargetBatch\",max(ProductWeeklyVsActual[MPSTargetBatch]),",
              "\"ForcastTargetKilo\",max(ProductWeeklyVsActual[MPSTargetKilo]),",
              "\"ForcastTargetUnit\",max(ProductWeeklyVsActual[MPSTargetUnit])",
              "",
              ")",
              "",
              "return ",
              "",
              "  SWITCH ( ",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  SUMX(tbl,[ForcastTargetBox])/1000000  ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  SUMX(tbl,[ForcastTargetUnit])/1000000000 ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\",  SUMX(tbl,[ForcastTargetKilo]),   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  SUMX(tbl,[ForcastTargetBatch]),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUMX(tbl, [ForcastTargetTime]) ,   -- ok ",
              "     ",
              "          BLANK()",
              ")",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "HolidayProcess",
            "expression": [
              "",
              "",
              "var TimeTypeSelection = SELECTEDVALUE (UnitTypeSlicer[UnitType])",
              "",
              "var tbl = ",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(",
              "ADDCOLUMNS(SUMMARIZE(DimMachine,DimMachine[MachineId],",
              "",
              "\"ForcastTarget\",max(ProductWeeklyVsActual[MPSTargetTime]),",
              "",
              "\"TotalTime\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[ActiveMonthBudget] <> BLANK())) *24 ),",
              "",
              "\"utilizationTime\",sum(ProductWeeklyVsActual[Duration]),",
              "\"utilizationBox\",sum(ProductWeeklyVsActual[box]),",
              "\"utilizationBatch\",DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzBatch]),",
              "\"utilizationKilo\",SUM(ProductWeeklyVsActual[TotalBatchKilo]),",
              "\"utilizationUnit\",SUM(ProductWeeklyVsActual[unit]),",
              "",
              "\"WorkingDay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=0)) *24),",
              "",
              "\"Holiay\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[AbidiHolidays]=1)) *24)",
              "),",
              "\"Loss\",[WorkingDay]-[utilizationTime]),\"CapLosssTime\",if([Loss]<0,0,[Loss])),",
              "\"CapHolidayTime\",[TotalTime]-[utilizationTime]-[CapLosssTime])",
              "",
              "return ",
              "",
              "  SWITCH ( ",
              "           TRUE (),",
              "          TimeTypeSelection = \"Box\",  (SUMX(tbl,[CapHolidayTime])* DIVIDE(SUMX(tbl,[utilizationBox]),SUMX(tbl,[utilizationTime])))/1000000 ,       --ok      MBox ",
              "",
              "           TimeTypeSelection = \"Unit\",  (SUMX(tbl,[CapHolidayTime])* DIVIDE(SUMX(tbl,[utilizationUnit]),SUMX(tbl,[utilizationTime])))/1000000 ,    -- ok",
              "            ",
              "           TimeTypeSelection = \"kilo\", SUMX(tbl,[CapHolidayTime])* DIVIDE(SUMX(tbl,[utilizationKilo]),SUMX(tbl,[utilizationTime])) ,   -- ok",
              " ",
              "           TimeTypeSelection = \"Batch\",  SUMX(tbl,[CapHolidayTime])* DIVIDE(SUMX(tbl,[utilizationBatch]),SUMX(tbl,[utilizationTime])),    --",
              "        ",
              "          TimeTypeSelection = \"Time\", SUMX(tbl,[CapHolidayTime]) ,   -- ok ",
              "     ",
              "          BLANK()",
              ")",
              "",
              ""
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "MonthToDateSelectionTotalOutput",
            "expression": [
              "",
              "var vsite = VALUES(ProductWeeklyVsActual[SiteType])",
              "--",
              "var VProcessCategory =  VALUES(ProductWeeklyVsActual[ProcessCategory])",
              "var VProcess = values(ProductWeeklyVsActual[ProcessNameFa])",
              "",
              "var VMachine = values(ProductWeeklyVsActual[MachineDscFa])",
              "var VProduct = VALUES(ProductWeeklyVsActual[RayvarzId])",
              "var VShift =  values(ProductWeeklyVsActual[shiftName])",
              "var VTypeprog = VALUES(ProductWeeklyVsActual[Typeprog])",
              "--",
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = SELECTEDVALUE(TblVersionType[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              " ",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              "",
              "return ",
              "",
              "   SWITCH (",
              "          TRUE (),",
              "",
              "vmonthtype=\"Daily\" , CALCULATE([UnitSelectionTotalOutput] ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType))  ,",
              "vmonthtype=\"Month To Date\",  ",
              "CALCULATE([UnitSelectionTotalOutput], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=VersionType )),",
              "      ",
              "vmonthtype= \"Month To Go\" && VersionType=\"Actual\", ",
              "CALCULATE([UnitSelectionTotalOutput],FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ",
              "ProductWeeklyVsActual[FinishDate]>=currentDate && ProductWeeklyVsActual[VersionType]=\"Last Plan\" )) ,    ",
              "",
              "vmonthtype=\"Total Month\"  && VersionType = \"Actual\", ",
              " CALCULATE([UnitSelectionTotalOutput],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE([UnitSelectionTotalOutput],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )),",
              "",
              "      BLANK ()",
              "       )",
              ""
            ]
          },
          {
            "name": "CapacityPercent",
            "expression": "DIVIDE([CapacityUtilization],([CapacityUtilization]+[CapacityLoss]+[HolidayProcess]))",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "LossPercent",
            "expression": "DIVIDE([CapacityLoss],([CapacityUtilization]+[CapacityLoss]+[HolidayProcess]))",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "HolidayPercent",
            "expression": "DIVIDE([HolidayProcess],([CapacityUtilization]+[CapacityLoss]+[HolidayProcess]))",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TargetPercent",
            "expression": [
              "",
              "var tbl  = SUMMARIZE(DimMachine,DimMachine[MachineId],",
              "",
              "\"TotalTime\",(CALCULATE(DISTINCTCOUNT('qv ViewCalendarByMachine'[DateId]),",
              "filter('qv ViewCalendarByMachine','qv ViewCalendarByMachine'[ActiveMonthBudget] <> BLANK())) *24 ))",
              "",
              " return ",
              "",
              " DIVIDE([MPSTarget],SUMX(tbl,[TotalTime]))",
              "",
              " --DIVIDE([MPSTarget],([CapacityUtilization]+[CapacityLoss]+[HolidayProcess]))"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TopUtilization",
            "expression": [
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = SELECTEDVALUE(TblVersionType[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              "",
              "return ",
              "",
              "   SWITCH (",
              "          TRUE (),",
              "",
              "vmonthtype=\"Daily\" , CALCULATE([CapacityUtilization] ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType))  ,",
              "vmonthtype=\"Month To Date\",  ",
              "CALCULATE([CapacityUtilization], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=VersionType )),",
              "      ",
              "vmonthtype= \"Month To Go\" && VersionType=\"Actual\", ",
              "CALCULATE([CapacityUtilization],FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ",
              "ProductWeeklyVsActual[FinishDate]>=currentDate && ProductWeeklyVsActual[VersionType]=\"Last Plan\" )) ,    ",
              "",
              "vmonthtype=\"Month To Go\" && VersionType <> \"Actual\", ",
              "CALCULATE([CapacityUtilization],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=VersionType )), ",
              "",
              "vmonthtype=\"Total Month\"  && VersionType <> \"Actual\", ",
              "CALCULATE([CapacityUtilization], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<=endate  && ProductWeeklyVsActual[VersionType]=VersionType ))",
              "  ,",
              "vmonthtype=\"Total Month\"  && VersionType = \"Actual\", ",
              " CALCULATE([CapacityUtilization],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE([CapacityUtilization],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )),",
              "",
              "      BLANK ()",
              "       )",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "TopLoss",
            "expression": [
              "",
              "var vmonthtype = SELECTEDVALUE(MonthTypeReport[DateType])",
              "var VersionType = SELECTEDVALUE(TblVersionType[VersionType])",
              "",
              "var sdate = CALCULATE(min(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var endate = CALCULATE(max(ProductWeeklyVsActual[FinishDate]),ALLEXCEPT(ProductWeeklyVsActual,ProductWeeklyVsActual[MiladiMonth],ProductWeeklyVsActual[ShiladiYear]))",
              "var currentDate = max(DimAllBomVersion[CurrentDate])",
              "",
              "",
              "return ",
              "",
              "   SWITCH (",
              "          TRUE (),",
              "",
              "vmonthtype=\"Daily\" , CALCULATE([CapacityLoss] ,filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionType]=VersionType))  ,",
              "vmonthtype=\"Month To Date\",  ",
              "CALCULATE([CapacityLoss], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=VersionType )),",
              "      ",
              "vmonthtype= \"Month To Go\" && VersionType=\"Actual\", ",
              "CALCULATE([CapacityLoss],FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ",
              "ProductWeeklyVsActual[FinishDate]>=currentDate && ProductWeeklyVsActual[VersionType]=\"Last Plan\" )) ,    ",
              "",
              "vmonthtype=\"Month To Go\" && VersionType <> \"Actual\", ",
              "CALCULATE([CapacityLoss],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=VersionType )), ",
              "",
              "vmonthtype=\"Total Month\"  && VersionType <> \"Actual\", ",
              "CALCULATE([CapacityLoss], FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<=endate  && ProductWeeklyVsActual[VersionType]=VersionType ))",
              "  ,",
              "vmonthtype=\"Total Month\"  && VersionType = \"Actual\", ",
              " CALCULATE([CapacityLoss],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]<=endate && ProductWeeklyVsActual[FinishDate]>=currentDate  ",
              "&& ProductWeeklyVsActual[VersionType]=\"Last Plan\"  ))  + ",
              "CALCULATE([CapacityLoss],",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[FinishDate]>=sdate ",
              "&& ProductWeeklyVsActual[FinishDate]<currentDate && ProductWeeklyVsActual[VersionType]=\"Actual\"  )),",
              "",
              "      BLANK ()",
              "       )",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "ProductCount",
            "expression": [
              "CALCULATE(DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzId])",
              ",FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1",
              " && ProductWeeklyVsActual[PlanTypeId]=26))"
            ]
          },
          {
            "name": "SizePartChange",
            "expression": [
              "",
              "",
              "var tbl = SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[FinishDate],\"countperday\",DISTINCTCOUNT(ProductWeeklyVsActual[RayvarzId])-1)",
              "",
              "return ",
              "SUMX(tbl,[countperday])",
              ""
            ]
          },
          {
            "name": "QualityOEE",
            "expression": "0.98",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Westage",
            "expression": "0"
          },
          {
            "name": "BoxByStandardSpeed",
            "expression": " DIVIDE( sum(ProductWeeklyVsActual[box])*max(ProductWeeklyVsActual[standardSpeed]),max(ProductWeeklyVsActual[AVGSpeed]))"
          },
          {
            "name": "BoxLossBySpeed",
            "expression": "[BoxByStandardSpeed] - sum(ProductWeeklyVsActual[box])"
          },
          {
            "name": "Pareto",
            "expression": [
              "",
              "var tbl = SUMMARIZE(ALLSELECTED('qv StopReport'),'qv StopReport'[Level4Desc],\"count\",[StopPercent])",
              "var vlevel=SELECTEDVALUE('qv StopReport'[Level4Desc])",
              "var vtotal=CALCULATE([DownTimePareto%],all('qv StopReport'))",
              "",
              "return ",
              "DIVIDE(sumx(FILTER(tbl,[count] >= maxx(FILTER(tbl,'qv StopReport'[Level4Desc]=vlevel),[count])),[count]),vtotal)",
              "",
              "",
              "",
              "",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "CuttOff",
            "expression": [
              "",
              "var vselect = SELECTEDVALUE(CutOffRange[Value])/100",
              "return ",
              "if([Pareto]<=vselect,1,0)"
            ]
          },
          {
            "name": "ReduceSpeedTarget",
            "expression": "1- AVERAGE(ProductWeeklyVsActual[Productivity])",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Measure 2",
            "expression": "[ReduceSpeedTarget]-[ReduceSpeed]",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Paretoresponsible",
            "expression": [
              "",
              "var tbl = SUMMARIZE(ALLSELECTED('qv StopReport'),'qv StopReport'[ResponsibleType],\"count\",[StopPercent])",
              "var vlevel=SELECTEDVALUE('qv StopReport'[ResponsibleType])",
              "var vtotal=CALCULATE([DownTimePareto%],all('qv StopReport'))",
              "",
              "return ",
              "DIVIDE(sumx(FILTER(tbl,[count] >= maxx(FILTER(tbl,'qv StopReport'[ResponsibleType]=vlevel),[count])),[count]),vtotal)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "CutOffresponsible",
            "expression": [
              "",
              "var vselect = SELECTEDVALUE(CutOffRange[Value])/100",
              "return ",
              "if([Paretoresponsible]<=vselect,1,0)",
              ""
            ]
          },
          {
            "name": "StandardOEE",
            "expression": "CALCULATE(AVERAGE(ProductWeeklyVsActual[SOEE]),FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[SOEE]<>BLANK() ))/100",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "StandardAvailability",
            "expression": [
              "CALCULATE(AVERAGE(ProductWeeklyVsActual[SAvailability]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[SOEE]<>BLANK() ))/100"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "StandardPerformance",
            "expression": [
              "CALCULATE(AVERAGE(ProductWeeklyVsActual[SPerformance]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[SOEE]<>BLANK() ))/100"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Sum of TotalBatchKilo",
            "expression": "SUM([TotalBatchKilo])"
          },
          {
            "name": "StandardCycletime",
            "expression": [
              "CALCULATE(AVERAGE(ProductWeeklyVsActual[StandardCT]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[StandardCT]<>BLANK() ))"
            ]
          },
          {
            "name": "ActualCycletime",
            "expression": [
              "CALCULATE(AVERAGE(ProductWeeklyVsActual[ActualCT]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[PlanTypeId]=26 && ProductWeeklyVsActual[ActualCT]<>BLANK() ))"
            ]
          },
          {
            "name": "AchievementActualvs4Week",
            "expression": [
              "",
              "",
              " DIVIDE(CALCULATE([MonthToDateSelection],FILTER(TblVersionType,TblVersionType[VersionType]=\"Actual\")),",
              " CALCULATE([MonthToDateSelection],FILTER(TblVersionType, TblVersionType[VersionType]=\"4Week Plan\")))"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TargetOEE",
            "expression": [
              "",
              "",
              "var vtotaltimemachine = CALCULATE(sum(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 ))*60",
              "",
              "var tbl = SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[MachineId],ProductWeeklyVsActual[FinishDate],",
              "\"DTTarget\",max(ProductWeeklyVsActual[DownTimeTarget]),\"PLSTPTarget\",max(ProductWeeklyVsActual[PlannedSTPTarget]))",
              "",
              "var vdttarget= MAXX(tbl,[DTTarget])",
              "var PLNSTtarget= DIVIDE(sumx(tbl,[PLSTPTarget]) , vtotaltimemachine)",
              "",
              "var availabilityTarget = 1-(vdttarget+PLNSTtarget)",
              "",
              "",
              "Var PerformanceTarget = DIVIDE(max(ProductWeeklyVsActual[standardSpeed]),max(ProductWeeklyVsActual[CustomizeSpeed]))",
              "",
              "var QualitytTarget = 0.98",
              "",
              "return ",
              "availabilityTarget*PerformanceTarget*QualitytTarget",
              "",
              ""
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TargetAvailability",
            "expression": [
              "",
              "",
              "",
              "var vtotaltimemachine = CALCULATE(sum(ProductWeeklyVsActual[Duration]),filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 ))*60",
              "",
              "var tbl = SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[MachineId],ProductWeeklyVsActual[FinishDate],",
              "\"DTTarget\",max(ProductWeeklyVsActual[DownTimeTarget]),\"PLSTPTarget\",max(ProductWeeklyVsActual[PlannedSTPTarget]))",
              "",
              " var vdttarget= MAXX(tbl,[DTTarget])",
              " var PLNSTtarget= DIVIDE(sumx(tbl,[PLSTPTarget]) , vtotaltimemachine)",
              "",
              " var availabilityTarget = 1-(vdttarget+PLNSTtarget)",
              "",
              "",
              "return ",
              "availabilityTarget"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "TargetPerformance",
            "expression": [
              "",
              "",
              "--Var PerformanceTarget = DIVIDE(max(ProductWeeklyVsActual[standardSpeed]),max(ProductWeeklyVsActual[CustomizeSpeed]))",
              "",
              "--return PerformanceTarget",
              "",
              "",
              "",
              "var vtotaltimemachine = CALCULATE(sum(ProductWeeklyVsActual[Duration]),",
              "FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26))*60  ",
              "",
              "var tbl = ADDCOLUMNS(SUMMARIZE(FILTER(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId]=1 && ProductWeeklyVsActual[PlanTypeId]=26),",
              "ProductWeeklyVsActual[MachineId],ProductWeeklyVsActual[FinishDate],ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[BatchNo],ProductWeeklyVsActual[PerformanceTargetByproduct],",
              "\"Duration\",sum(ProductWeeklyVsActual[Duration])*60,\"Weight\",DIVIDE(sum(ProductWeeklyVsActual[Duration])*60,vtotaltimemachine)),\"FinalPTarget\",",
              " ProductWeeklyVsActual[PerformanceTargetByproduct]*[Weight])",
              "",
              "",
              "return ",
              "sumx (tbl,[FinalPTarget])"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "dim Process",
        "columns": [
          {
            "name": "ProcessName",
            "dataType": "string",
            "sourceColumn": "ProcessName",
            "sortByColumn": "SortOrder"
          },
          {
            "name": "ProcessId",
            "dataType": "string",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "SortOrder",
            "dataType": "int64",
            "sourceColumn": "SortOrder"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"VVBLroMwDLxKlHUXBfp7Z0HchvK64BRv05AFCAWpu55jDJd5Y6dC6mYSecb2eOraI0i79UiImP3BF1fCzTeH2ssbM5LWToSz1TBiWQe3DtIpURBKI9aJ4qd08pAWT6St5880R4XcPBs7s53Su7z5RnnY3uqmkPfeMUrL+mvfUxFOeUZQq/Lr6LvDtPUOk1a2Xq0cs9gMDfSfdKHTQ2yUiYoz4frRqOXP5aUe87MbJbeo+kK47HnoFIeFtwZEbaryid981OsR1HSZY7KpicGMiF/9xucI8aexURNyzYJvmn8=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ProcessName = _t, ProcessId = _t, SortOrder = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ProcessName\", type text}, {\"ProcessId\", type text}, {\"SortOrder\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "TblVersionType",
        "columns": [
          {
            "name": "VersionType",
            "dataType": "string",
            "sourceColumn": "VersionType",
            "sortByColumn": "VersionTypeOrder"
          },
          {
            "name": "VersionId",
            "dataType": "int64",
            "sourceColumn": "VersionId"
          },
          {
            "name": "VersionTypeOrder",
            "dataType": "int64",
            "sourceColumn": "VersionTypeOrder"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WckwuKU3MUdJRMgRiM6VYnWglt8yi4hKFgJzEPKCQERCbgIV9EhGixkBsClGcX5QMlACrAqkGiTmVpqSnloCVgMwFCZmEp6Zmw3SbgU0ACQf4KgQnZ6SmlOakAsUsgNgAJg40OBVqsiUQ6wLNiQUA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [VersionType = _t, VersionId = _t, VersionTypeOrder = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"VersionType\", type text}, {\"VersionId\", Int64.Type}, {\"VersionTypeOrder\", Int64.Type}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Sum of VersionType",
            "expression": "SUM([VersionType])"
          }
        ]
      },
      {
        "name": "pbi AdjustProductionQtyReport",
        "columns": [
          {
            "name": "Date",
            "dataType": "dateTime",
            "sourceColumn": "Date"
          },
          {
            "name": "TargetHdrId",
            "dataType": "int64",
            "sourceColumn": "TargetHdrId"
          },
          {
            "name": "LandingProductionId",
            "dataType": "int64",
            "sourceColumn": "LandingProductionId"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "ProductionUntilNow",
            "dataType": "double",
            "sourceColumn": "ProductionUntilNow"
          },
          {
            "name": "WeeklyPlanningUntilEndOfTheMonth",
            "dataType": "double",
            "sourceColumn": "WeeklyPlanningUntilEndOfTheMonth"
          },
          {
            "name": "ForeCast",
            "dataType": "double",
            "sourceColumn": "ForeCast"
          },
          {
            "name": "PlanDeviationValues",
            "dataType": "double",
            "sourceColumn": "PlanDeviationValues"
          },
          {
            "name": "Difference",
            "dataType": "double",
            "sourceColumn": "Difference"
          },
          {
            "name": "batchDifference",
            "dataType": "int64",
            "sourceColumn": "batchDifference"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "ProccessId",
            "dataType": "int64",
            "sourceColumn": "ProccessId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MinNextMonth",
            "dataType": "int64",
            "sourceColumn": "MinNextMonth"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "RCCPConfigId",
            "dataType": "int64",
            "sourceColumn": "RCCPConfigId"
          },
          {
            "name": "IssueName",
            "dataType": "string",
            "sourceColumn": "IssueName"
          },
          {
            "name": "UpdateDate",
            "dataType": "dateTime",
            "sourceColumn": "UpdateDate"
          },
          {
            "type": "calculated",
            "name": "LastDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(CALCULATE(max('pbi AdjustProductionQtyReport'[Date]),FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[RayvarzId]=EARLIER('pbi AdjustProductionQtyReport'[RayvarzId]) && 'pbi AdjustProductionQtyReport'[MachineId]=EARLIER('pbi AdjustProductionQtyReport'[MachineId]) && 'pbi AdjustProductionQtyReport'[Month]=EARLIER('pbi AdjustProductionQtyReport'[Month])))='pbi AdjustProductionQtyReport'[Date],1,0)"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 2",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(sum('pbi AdjustProductionQtyReport'[ForeCast]),FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[Month]=EARLIER('pbi AdjustProductionQtyReport'[Month]) && 'pbi AdjustProductionQtyReport'[ProccessId]=EARLIER('pbi AdjustProductionQtyReport'[ProccessId]) && 'pbi AdjustProductionQtyReport'[Date]='pbi AdjustProductionQtyReport'[LastDate]))",
            "formatString": "0"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 3",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth]),",
              "FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[Month]=EARLIER('pbi AdjustProductionQtyReport'[Month]) ",
              "&& 'pbi AdjustProductionQtyReport'[ProccessId]=EARLIER('pbi AdjustProductionQtyReport'[ProccessId]) &&",
              " 'pbi AdjustProductionQtyReport'[Date]='pbi AdjustProductionQtyReport'[LastDate]))"
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 4",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "COUNTROWS(SUMMARIZE(",
              "filter('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[LastDate]=1 &&",
              "'pbi AdjustProductionQtyReport'[RayvarzId]=EARLIER('pbi AdjustProductionQtyReport'[RayvarzId])",
              "&&'pbi AdjustProductionQtyReport'[MachineId]=EARLIER('pbi AdjustProductionQtyReport'[MachineId])),'pbi AdjustProductionQtyReport'[RayvarzId]))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_AdjustProductionQtyReport = Source{[Schema=\"pbi\",Item=\"AdjustProductionQtyReport\"]}[Data]",
                "in",
                "    pbi_AdjustProductionQtyReport"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "IssueBoxForcast",
            "expression": [
              "",
              "var tbl = SUMMARIZE(FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[Date]='pbi AdjustProductionQtyReport'[LastDate]), ",
              "'pbi AdjustProductionQtyReport'[RayvarzId],'pbi AdjustProductionQtyReport'[MachineId],'pbi AdjustProductionQtyReport'[Month],",
              "'pbi AdjustProductionQtyReport'[ForeCast],'pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth])",
              "",
              "var x = SUMX(tbl,'pbi AdjustProductionQtyReport'[ForeCast])",
              "",
              "return ",
              "x"
            ]
          },
          {
            "name": "IssueBoxWeeklyLast",
            "expression": [
              "",
              "var tbl = SUMMARIZE('pbi AdjustProductionQtyReport', ",
              "'pbi AdjustProductionQtyReport'[RayvarzId],'pbi AdjustProductionQtyReport'[MachineId],'pbi AdjustProductionQtyReport'[Month]",
              ",'pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth])",
              "",
              "var x = SUMX(tbl,'pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth])",
              "",
              "return ",
              "x",
              ""
            ]
          }
        ]
      },
      {
        "name": "CalculatedTable 8",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Box",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Box]",
            "formatString": "#,0.00"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Type",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Type]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[MachineDscEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[ProcessNameFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProccessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[ProccessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IssueName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi AdjustProductionQtyReport[IssueName]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 8",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "union(",
                "SUMMARIZE(FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[ForeCast]<>0 && ",
                "'pbi AdjustProductionQtyReport'[LastDate]=1),",
                "     'pbi AdjustProductionQtyReport'[RayvarzId],'pbi AdjustProductionQtyReport'[ProductNameEn],",
                "'pbi AdjustProductionQtyReport'[MachineId],'pbi AdjustProductionQtyReport'[MachineDscEn],",
                "'pbi AdjustProductionQtyReport'[ProcessNameFa],'pbi AdjustProductionQtyReport'[ProccessId],'pbi AdjustProductionQtyReport'[Month],'pbi AdjustProductionQtyReport'[IssueName],",
                "\"Box\",max('pbi AdjustProductionQtyReport'[ForeCast]),\"Type\",\"Forcast\") ,",
                "",
                "SUMMARIZE(FILTER('pbi AdjustProductionQtyReport','pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth]<>0 ),",
                "     'pbi AdjustProductionQtyReport'[RayvarzId],'pbi AdjustProductionQtyReport'[ProductNameEn],'pbi AdjustProductionQtyReport'[MachineId],'pbi AdjustProductionQtyReport'[MachineDscEn],",
                "'pbi AdjustProductionQtyReport'[ProcessNameFa],'pbi AdjustProductionQtyReport'[ProccessId],'pbi AdjustProductionQtyReport'[Month],'pbi AdjustProductionQtyReport'[IssueName],",
                " \"Box\", max('pbi AdjustProductionQtyReport'[WeeklyPlanningUntilEndOfTheMonth]),\"Type\",\"Weekly\")",
                "",
                ")"
              ]
            }
          }
        ]
      },
      {
        "name": "IE ProductionIssue",
        "columns": [
          {
            "name": "Code",
            "dataType": "double",
            "sourceColumn": "Code"
          },
          {
            "name": "Products",
            "dataType": "string",
            "sourceColumn": "Products"
          },
          {
            "name": " ForcastBox",
            "dataType": "double",
            "sourceColumn": " ForcastBox"
          },
          {
            "name": "ActualBox",
            "dataType": "double",
            "sourceColumn": "ActualBox"
          },
          {
            "name": "Reason",
            "dataType": "string",
            "sourceColumn": "Reason"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month",
            "formatString": "0"
          },
          {
            "name": "Remark",
            "dataType": "string",
            "sourceColumn": "Remark"
          },
          {
            "name": "Dev",
            "dataType": "double",
            "sourceColumn": "Dev"
          },
          {
            "type": "calculated",
            "name": "WeeklyLastVersionBox",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(SUM(ProductWeeklyVsActual[box]),FILTER(ProductWeeklyVsActual,",
              "ProductWeeklyVsActual[RayvarzId]='IE ProductionIssue'[Code]",
              " && 'IE ProductionIssue'[Month]=ProductWeeklyVsActual[ShMon] ",
              "&& ProductWeeklyVsActual[PlanTypeId]=26 &&",
              "ProductWeeklyVsActual[VersionTypeId]=3 && ProductWeeklyVsActual[ProcessID] in {17,20,21,23}))"
            ],
            "formatString": "#,0.00"
          },
          {
            "type": "calculated",
            "name": "DevForcastvsLastVersion",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'IE ProductionIssue'[BoxWeeklyLast]-'IE ProductionIssue'[ ForcastBox]",
            "formatString": "0.00"
          },
          {
            "type": "calculated",
            "name": "TotalForcastPerMonthPerProduct",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('IE ProductionIssue'[ ForcastBox]),filter('IE ProductionIssue',",
              "'IE ProductionIssue'[Month]=EARLIER('IE ProductionIssue'[Month]) &&",
              " ",
              "  'IE ProductionIssue'[Code]=EARLIER('IE ProductionIssue'[Code])))"
            ]
          },
          {
            "type": "calculated",
            "name": "ReasonWeight",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE('IE ProductionIssue'[ ForcastBox],'IE ProductionIssue'[TotalForcastPerMonthPerProduct])",
            "formatString": "0.0000"
          },
          {
            "type": "calculated",
            "name": "BoxWeeklyLast",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('IE ProductionIssue'[ReasonWeight]=BLANK(),'IE ProductionIssue'[WeeklyLastVersionBox],",
              "'IE ProductionIssue'[ReasonWeight]*'IE ProductionIssue'[WeeklyLastVersionBox])"
            ],
            "formatString": "#,0.0000"
          },
          {
            "type": "calculated",
            "name": "RawMaterial",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var tbl = SUMMARIZE(filter('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[CategoryName]=\"API\")",
              "                       ,'qv BomDetailsAllVersion'[RayvarzId],'qv BomDetailsAllVersion'[MaterialName])",
              "",
              "return ",
              "if('IE ProductionIssue'[Reason]=\"RM Issue\",",
              " CONCATENATEX(FILTER(tbl,[RayvarzId]='IE ProductionIssue'[Code] ) ,'qv BomDetailsAllVersion'[MaterialName],\"-\")",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "FinalProduct",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],'IE ProductionIssue'[Code])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/pbidb;iedb\",",
                "    IE_ProductionIssue = Source{[Schema=\"IE\",Item=\"ProductionIssue\"]}[Data]",
                "in",
                "    IE_ProductionIssue"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "BoxLoss",
            "expression": [
              " ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]),",
              " FILTER('IE ProductionIssue','IE ProductionIssue'[DevForcastvsLastVersion]<0)))"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "BoxAdd",
            "expression": [
              " ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]), ",
              "FILTER('IE ProductionIssue','IE ProductionIssue'[DevForcastvsLastVersion]>=0)))"
            ],
            "formatString": "#,0.00"
          },
          {
            "name": "BoxLossPercent",
            "expression": [
              " ",
              "var boxlossperissue = ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]),",
              " FILTER('IE ProductionIssue','IE ProductionIssue'[DevForcastvsLastVersion]<0)))",
              "",
              "",
              "var totalboxloss = ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]),",
              " FILTER(ALLEXCEPT('IE ProductionIssue','IE ProductionIssue'[Month]),'IE ProductionIssue'[DevForcastvsLastVersion]<0)))",
              "",
              "return ",
              "DIVIDE(boxlossperissue,totalboxloss)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxAddPercent",
            "expression": [
              " ",
              "var boxlossperissue = ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]),",
              " FILTER('IE ProductionIssue','IE ProductionIssue'[DevForcastvsLastVersion]>=0)))",
              "",
              "",
              "var totalboxloss = ABS( CALCULATE(sum('IE ProductionIssue'[DevForcastvsLastVersion]),",
              " FILTER(ALLEXCEPT('IE ProductionIssue','IE ProductionIssue'[Month]),",
              "'IE ProductionIssue'[DevForcastvsLastVersion]>=0)))",
              "",
              "return ",
              "DIVIDE(boxlossperissue,totalboxloss)"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "BoxLossAF",
            "expression": " CALCULATE(sum('IE ProductionIssue'[Dev]), FILTER('IE ProductionIssue','IE ProductionIssue'[Dev]<0))/1000000",
            "formatString": "#,0.00"
          },
          {
            "name": "BoxAddAF",
            "expression": " CALCULATE(sum('IE ProductionIssue'[Dev]), FILTER('IE ProductionIssue','IE ProductionIssue'[Dev]>0))/1000000",
            "formatString": "#,0.00"
          },
          {
            "name": "DevTest",
            "expression": " sum('IE ProductionIssue'[Dev])/1000000"
          }
        ]
      },
      {
        "name": "MonthBudget",
        "columns": [
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "TargetTypeId",
            "dataType": "int64",
            "sourceColumn": "TargetTypeId"
          },
          {
            "name": "RevName",
            "dataType": "string",
            "sourceColumn": "RevName"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjBU0lEysQASQYZKsTpAASN0AWN0AROQgCVIwAgiYIouYIYuYA4SABsdZAwRscAQsUQXMTQAiYDMcoLwDdH4Rkj8WAA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Month = _t, TargetTypeId = _t, RevName = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Month\", Int64.Type}, {\"TargetTypeId\", Int64.Type}, {\"RevName\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 9",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MiladiYear",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MiladiYear]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevName]"
          },
          {
            "type": "calculated",
            "name": "MonthRank",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "RANKX('CalculatedTable 9','CalculatedTable 9'[Month],,ASC,Dense)"
          },
          {
            "type": "calculatedTableColumn",
            "name": "TargetTypeId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "qv MPS[TargetTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Amount",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Amount]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IsActualCode",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[IsActualCode]"
          },
          {
            "type": "calculated",
            "name": "RevType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('CalculatedTable 9'[TargetTypeId]=\"100\",\"Actual\",if('CalculatedTable 9'[TargetTypeId]=\"47\",\"Forcast\",",
              "if('CalculatedTable 9'[TargetTypeId]=\"402\",\"R3\",if('CalculatedTable 9'[TargetTypeId]=\"46\",\"Budget\",",
              " if('CalculatedTable 9'[TargetTypeId]=\"48\",\"R1\",if('CalculatedTable 9'[TargetTypeId]=\"49\",\"R2\"",
              "",
              "))))))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDescFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineDescFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessNameFa]"
          },
          {
            "type": "calculated",
            "name": "ProcessCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('CalculatedTable 9'[ProcessID] in {17,20,21,23,42} ,\"Packaging\" ,",
              " if('CalculatedTable 9'[ProcessID] in {14,15,16},\"Solid\" ,",
              " if('CalculatedTable 9'[ProcessID] in {10,11,13,38,22} , \"Manufacture\" ,",
              "'CalculatedTable 9'[ProcessNameFa])))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "TypeDesc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[TypeIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "CoatedType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[TypeCoatingIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "ManufacturingType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "IF('CalculatedTable 9'[TypeDesc]=\"Tablet\",\"Tablet-\" &'CalculatedTable 9'[CoatedType],'CalculatedTable 9'[TypeDesc])"
          },
          {
            "type": "calculated",
            "name": "UsageType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[UsageTypeIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "Tier",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[StrategicVariation],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "Franchise",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[FranchiseIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "LicenseHolder",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[LisenceHolderIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "SizePartType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[SizepartTypeIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "PackingType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              " IF('CalculatedTable 9'[UsageType]=\"Wallet\" ||",
              "  'CalculatedTable 9'[UsageType]=\"Blister\",",
              "  'CalculatedTable 9'[UsageType]&\"-\"&",
              "  'CalculatedTable 9'[SizePartType],",
              " 'CalculatedTable 9'[UsageType])"
            ]
          },
          {
            "type": "calculated",
            "name": "BrandName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[BrandName],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "Target",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'CalculatedTable 9'[TargetTypeId]"
          },
          {
            "type": "calculated",
            "name": "FAPrice",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('CalculatedTable 9'[TargetTypeId]<>\"100\",",
              "",
              "CALCULATE(max('pbi ProductionMAT'[FaPrice]), FILTER('pbi ProductionMAT','pbi ProductionMAT'[RayvarzId]='CalculatedTable 9'[RayvarzId] && ",
              "'pbi ProductionMAT'[Month]='CalculatedTable 9'[Month] && 'pbi ProductionMAT'[RevisionId]='CalculatedTable 9'[RevId] ))",
              ",",
              "CALCULATE(max('pbi ProductionMAT'[FaPrice]), FILTER('pbi ProductionMAT','pbi ProductionMAT'[RayvarzId]='CalculatedTable 9'[RayvarzId] && ",
              "'pbi ProductionMAT'[Month]='CalculatedTable 9'[Month] ))",
              "",
              ")"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "qv MPS[RevId]"
          },
          {
            "type": "calculated",
            "name": "Value",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "'CalculatedTable 9'[Amount]*'CalculatedTable 9'[FAPrice]"
          },
          {
            "type": "calculated",
            "name": "FinalProductName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductEnAbr],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "CenterType",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('Dimqv ProductExcel'[ProductionCenterId],'Dimqv ProductExcel'[RayvarzNumber],'CalculatedTable 9'[RayvarzId])",
              "-- 93 abidi 70",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Calculated Column 2",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              " 1",
              "",
              "/*",
              "var x =SUMMARIZE(FILTER('CalculatedTable 9',  'CalculatedTable 9'[RayvarzId]=EARLIER('CalculatedTable 9'[RayvarzId]) && ",
              "   'CalculatedTable 9'[CenterType]= \"Abidi  70\" && 'CalculatedTable 9'[ProcessCategory]=\"Packaging\"),'CalculatedTable 9'[ProcessId])",
              "",
              " return",
              " ",
              "if(17 in x && 20 in x , CALCULATE(max('CalculatedTable 9'[Amount]),",
              "FILTER('CalculatedTable 9','CalculatedTable 9'[RayvarzId]=EARLIER('CalculatedTable 9'[RayvarzId]) )),",
              "",
              "   if(17 in x && 38 in x && 13 in x,\"DG\",",
              "     if( 38 in x && 13 in x,\"DG+\",",
              "       if( 14 in x && 13 in x || 13 in x && 15 in x ,\"DC\",",
              "         if( 23 in x,\"Syrup\",",
              "           if( 14 || 15  in x  && COUNTROWS(x)=1  ,\"DC+\"",
              " ))))))",
              "*/"
            ]
          },
          {
            "type": "calculated",
            "name": "NewAmount",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "if('CalculatedTable 9'[CenterType]=93  && 'CalculatedTable 9'[ProcessId]=17 , 0, 'CalculatedTable 9'[Amount])"
          },
          {
            "type": "calculated",
            "name": "LossVersionsPerMonth",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())",
              "var VCurrentmONTH = VALUE(LEFT(max(DimAllBomVersion[ShamsiCurrentMonth]),6))",
              "",
              "",
              "--VALUE(mid(max(DimAllBomVersion[CalLastRefreshTime]),7,5))",
              "",
              "",
              "var tblTotalRev = VALUES('CalculatedTable 9'[TargetTypeId])",
              "",
              "var tblCurrentRev = summarize(filter('CalculatedTable 9','CalculatedTable 9'[Month]=EARLIER('CalculatedTable 9'[Month]))",
              "                     ,'CalculatedTable 9'[TargetTypeId])",
              "",
              "",
              "",
              "var tblActualRev = summarize(filter('CalculatedTable 9','CalculatedTable 9'[Month]=EARLIER('CalculatedTable 9'[Month])",
              "                                          && 'CalculatedTable 9'[TargetTypeId]=\"100\"),'CalculatedTable 9'[TargetTypeId])",
              "",
              "",
              "var x  = INTERSECT(tblCurrentRev,tblActualRev)",
              "",
              "",
              "",
              " return ",
              "IF('CalculatedTable 9'[Month]>=VCurrentmONTH && 'CalculatedTable 9'[TargetTypeId]=\"47\" ,\"47\"&\"-\"&\"100\",",
              "IF('CalculatedTable 9'[Month]>=VCurrentmONTH && 'CalculatedTable 9'[TargetTypeId]=\"100\" ,BLANK(),",
              "",
              "",
              "if('CalculatedTable 9'[MiladiYear]>=VCurrentYear  ,",
              "",
              "",
              "if('CalculatedTable 9'[TargetTypeId]=\"47\" && COUNTROWS(INTERSECT(tblCurrentRev,tblActualRev))=0 ,",
              "   'CalculatedTable 9'[TargetTypeId] & \"-\" & \"100\", -- forcast haii k actual nadarand va bayad dar mat actual namayesh dade shavand",
              "",
              "if(ISBLANK(",
              "if('CalculatedTable 9'[TargetTypeId]=\"100\",",
              "CONCATENATEX(EXCEPT(tblTotalRev,tblCurrentRev),'CalculatedTable 9'[TargetTypeId],\"-\")",
              ",'CalculatedTable 9'[TargetTypeId]",
              ")),\"100\" ,if('CalculatedTable 9'[TargetTypeId]=\"100\",",
              "CONCATENATEX(EXCEPT(tblTotalRev,tblCurrentRev),'CalculatedTable 9'[TargetTypeId],\"-\")&\"-\"&\"100\"",
              ",'CalculatedTable 9'[TargetTypeId]",
              "))",
              "),",
              "",
              "",
              "if('CalculatedTable 9'[TargetTypeId]=\"100\",",
              "\"402\"&\"-\"&\"48\"&\"-\"&\"49\"&\"-\"&\"46\"&\"-\"&\"47\"&\"-\"&\"100\",BLANK()",
              " )",
              "",
              ")))",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "CorrectVersion",
            "dataType": "boolean",
            "isDataTypeInferred": true,
            "expression": "or(FIND(\"Low\" ,'CalculatedTable 9'[RevName],1,0),FIND(\"Medium\" ,'CalculatedTable 9'[RevName],1,0))",
            "formatString": "\"TRUE\";\"TRUE\";\"FALSE\""
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[BomVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Site",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Site]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 9",
            "source": {
              "type": "calculated",
              "expression": [
                "UNION(",
                "SUMMARIZE(FILTER('qv MPS','qv MPS'[IsLastF]=TRUE() &&  'qv MPS'[IsActiveCode]=1),'qv MPS'[RayvarzId],'qv MPS'[ProcessId],'qv MPS'[ProcessNameFa],",
                "'qv MPS'[MachineId],'qv MPS'[MachineDescFa],'qv MPS'[ProductNameEn],",
                "'qv MPS'[Month],'qv MPS'[MiladiYear],'qv MPS'[BomVersion],'qv MPS'[Site],'qv MPS'[IsActualCode],'qv MPS'[TargetTypeId],'qv MPS'[RevName],'qv MPS'[RevId],\"Amount\",sum('qv MPS'[Amount]))",
                ",",
                "SUMMARIZE(FILTER('qv PerformanceReport','qv PerformanceReport'[PlanTypeId]=26 && 'qv PerformanceReport'[ExceptionBatch]<>0),",
                "'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ProcessId],'qv PerformanceReport'[ProcessNameFa],'qv PerformanceReport'[MachineId],",
                "'qv PerformanceReport'[MachineDscFa],'qv PerformanceReport'[ProductNameEn],'qv PerformanceReport'[ShMon],",
                "'qv PerformanceReport'[MiladiYear],'qv PerformanceReport'[BomVersion],\"Site\",\"Abidi\",\"IsActualCode\",1,",
                "\"TargetTypeId\",\"100\",\"RevName\",\"Actual\",\"RevId\",\"1010\",\"Amount\",sum('qv PerformanceReport'[TotalProductionBox]))",
                ",",
                "",
                "SUMMARIZE(FILTER(CMOStore,CMOStore[SiteType]=\"CMOFG\"),CMOStore[CodeKala],CMOStore[ProcessId],CMOStore[ProcessName],CMOStore[MachineId],CMOStore[MachineDesc],",
                "CMOStore[OnvanKala],CMOStore[CMOMonth],CMOStore[ShiladiYear],CMOStore[BomVersion],\"Site\",\"CMO\",\"IsActualCode\",1,\"TargetTypeId\",\"100\",\"RevName\",\"Actual\",\"RevId\",\"1010\",\"Amount\",sum(CMOStore[KhalesTolid])",
                ")",
                "",
                " ) "
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "MatActual",
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())  ",
              "/*",
              "var vtbl  = SUMMARIZE(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"isactual\", FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "*/",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"isactual\", FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "",
              "",
              "return ",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && ",
              "[MonthRank]<=min('CalculatedTable 9'[MonthRank]) &&",
              "   [isactual] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              ")",
              "",
              "",
              "--[MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "------)",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              ""
            ]
          },
          {
            "name": "MatForcast",
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"HaveForcast\", FIND(\"47\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "return ",
              "if(max('CalculatedTable 9'[MiladiYear])<VCurrentYear, [MatActual],",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && [MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank]) &&",
              "    [HaveForcast] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              "",
              ")",
              "",
              "/* main",
              "var VCurrentYear =YEAR(today())",
              "",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"47\"),'IE Pr_VersionLoss'[RevisionCode])",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveForcast\", FIND(\"47\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveForcast]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount]),",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveForcast]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value])",
              "",
              " )",
              "*/",
              "",
              "",
              "",
              "/*",
              "var vselect= SELECTEDVALUE(ReportType[Type])",
              "return",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "CALCULATE(sum('CalculatedTable 9'[Amount]),",
              "FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),",
              "'CalculatedTable 9'[MonthRank]<=max('CalculatedTable 9'[MonthRank])",
              " && 'CalculatedTable 9'[MonthRank]>max('CalculatedTable 9'[MonthRank])-12",
              " && 'CalculatedTable 9'[TargetTypeId]=\"47\" ))",
              "",
              "",
              ",",
              "CALCULATE(sum('CalculatedTable 9'[value]),",
              "FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),",
              "'CalculatedTable 9'[MonthRank]<=max('CalculatedTable 9'[MonthRank])",
              " && 'CalculatedTable 9'[MonthRank]>max('CalculatedTable 9'[MonthRank])-12",
              " && 'CalculatedTable 9'[TargetTypeId]=\"47\" ))",
              ")",
              "",
              "*/",
              "",
              "",
              ""
            ]
          },
          {
            "name": "MatForcasttest",
            "expression": [
              "",
              "var slctdmonth=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "var maxmonthactual = CALCULATE(max('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[RevName]=\"Actual\" ))",
              "var Actualmatmaxmonth = CALCULATE([MatForcast],FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[monthrank]=maxmonthactual))",
              " ",
              "return ",
              "if(slctdmonth>maxmonthactual,",
              "CALCULATE(sum('CalculatedTable 9'[Amount]),FILTER(allselected('CalculatedTable 9'),",
              "'CalculatedTable 9'[MonthRank]<=slctdmonth",
              " && 'CalculatedTable 9'[MonthRank]>slctdmonth- maxmonthactual",
              " && 'CalculatedTable 9'[TargetTypeId]=\"47\" )),[MatForcast] )",
              "",
              "",
              "",
              "--+Actualmatmaxmonth",
              "",
              "",
              "",
              "",
              "",
              " ",
              ""
            ]
          },
          {
            "name": "MatR3",
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"HaveR3\", FIND(\"402\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "return ",
              "if(max('CalculatedTable 9'[MiladiYear])<VCurrentYear,",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && [MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank]) &&",
              "    [HaveR3] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              ")",
              "",
              "",
              "",
              "/*main",
              "var VCurrentYear =YEAR(today())",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"402\"),'IE Pr_VersionLoss'[RevisionCode])",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveR3\", FIND(\"402\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR3]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount])",
              "),",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR3]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value])",
              ")",
              ")",
              "",
              "*/",
              "",
              "",
              "",
              "",
              "",
              "/*",
              "var maxmonthactual = CALCULATE(min('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[TargetTypeId]=\"402\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\"),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcast = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"402\" && 'CalculatedTable 9'[MonthRank]>maxmonthactual),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblForcast)",
              "",
              "",
              "var slctdmonth=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "",
              "var Actualmatmaxmonth = CALCULATE([MatForcast],FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[monthrank]=maxmonthactual))",
              " ",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])",
              ",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Value])",
              ")",
              "*/",
              " ",
              "",
              ""
            ]
          },
          {
            "name": "MatR2",
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"HaveR2\", FIND(\"49\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "return ",
              "if(max('CalculatedTable 9'[MiladiYear])<VCurrentYear,",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && [MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank]) &&",
              "    [HaveR2] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              "--)",
              "",
              "",
              "/* main",
              "var VCurrentYear =YEAR(today())",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"49\"),'IE Pr_VersionLoss'[RevisionCode])",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveR2\", FIND(\"49\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR2]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount])",
              "),",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR2]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value])",
              ")",
              "",
              ")",
              "",
              "*/",
              "",
              "",
              "",
              "",
              "/*",
              "var maxmonthactual = CALCULATE(min('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[TargetTypeId]=\"49\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\"),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcast = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"49\" && 'CalculatedTable 9'[MonthRank]>maxmonthactual),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblForcast)",
              "",
              "",
              "var slctdmonth=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "",
              "var Actualmatmaxmonth = CALCULATE([MatForcast],FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[monthrank]=maxmonthactual))",
              " ",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])",
              ",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Value])",
              ")",
              "*/",
              "",
              " ",
              " )"
            ]
          },
          {
            "name": "MatR1",
            "expression": [
              "",
              "",
              "var VCurrentYear =YEAR(today())",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"HaveR1\", FIND(\"48\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "return ",
              "--if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && [MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank]) &&",
              "    [HaveR1] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              "--)",
              "",
              "/* main",
              "var VCurrentYear =YEAR(today())",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"48\"),'IE Pr_VersionLoss'[RevisionCode])",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveR1\", FIND(\"48\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR1]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount]))",
              ",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveR1]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value]))",
              "",
              ")",
              "*/",
              "",
              "/*",
              "",
              "",
              "var maxmonthactual = CALCULATE(min('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[TargetTypeId]=\"48\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\"),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcast = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"48\" && 'CalculatedTable 9'[MonthRank]>maxmonthactual),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblForcast)",
              "",
              "",
              "var slctdmonth=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "",
              "var Actualmatmaxmonth = CALCULATE([MatForcast],FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[monthrank]=maxmonthactual))",
              " ",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])",
              ",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Value])",
              ")",
              "",
              " */"
            ]
          },
          {
            "name": "MatBudget",
            "expression": [
              "",
              "",
              "var VCurrentYear =YEAR(today())",
              "var vtbl  = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[ProcessNameFa],'CalculatedTable 9'[MachineDescFa],",
              "'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],",
              "'CalculatedTable 9'[Tier],'CalculatedTable 9'[BrandName],'CalculatedTable 9'[FinalProductName],'CalculatedTable 9'[Site]),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[CorrectVersion],\"vv\",[ValueOrVolumePerRev],",
              " \"HaveBudget\", FIND(\"46\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "",
              "return ",
              "--if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              "CALCULATE(sumx(FILTER(vtbl,",
              "'CalculatedTable 9'[MonthRank] >SELECTEDVALUE('CalculatedTable 9'[MonthRank])-12 && [MonthRank]<=SELECTEDVALUE('CalculatedTable 9'[MonthRank]) &&",
              "   [HaveBudget] <>0 && 'CalculatedTable 9'[CorrectVersion]=FALSE()),[vv]))",
              "--)",
              "",
              "",
              "",
              "",
              "/*main",
              "var VCurrentYear =YEAR(today())",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveBudget\", FIND(\"46\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveBudget]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount])),",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveBudget]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value]))",
              "",
              ")",
              "*/",
              "",
              "/*",
              "",
              "",
              "var vselect= SELECTEDVALUE(ReportType[Type])",
              "return",
              "if(vselect=\"Volume\",",
              "",
              "CALCULATE(sum('CalculatedTable 9'[NewAmount]),",
              "FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),",
              "'CalculatedTable 9'[MonthRank]<=max('CalculatedTable 9'[MonthRank])",
              " && 'CalculatedTable 9'[MonthRank]>max('CalculatedTable 9'[MonthRank])-12",
              " && 'CalculatedTable 9'[TargetTypeId]=\"46\" ))",
              "",
              "",
              ",",
              "CALCULATE(sum('CalculatedTable 9'[value]),",
              "FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),",
              "'CalculatedTable 9'[MonthRank]<=max('CalculatedTable 9'[MonthRank])",
              " && 'CalculatedTable 9'[MonthRank]>max('CalculatedTable 9'[MonthRank])-12",
              " && 'CalculatedTable 9'[TargetTypeId]=\"46\" ))",
              ")",
              "*/",
              " "
            ]
          },
          {
            "name": "ValueOrVolune",
            "expression": [
              "",
              "",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "CALCULATE(sum('CalculatedTable 9'[Amount]),FILTER('CalculatedTable 9','CalculatedTable 9'[CorrectVersion]=FALSE()))",
              ",",
              "CALCULATE(sum('CalculatedTable 9'[Value]),FILTER('CalculatedTable 9','CalculatedTable 9'[CorrectVersion]=FALSE()))",
              ")",
              "",
              "--  CALCULATE(sum('CalculatedTable 9'[Amount]),FILTER('CalculatedTable 9',",
              "--  'CalculatedTable 9'[LossVersionsPerMonth]=SELECTEDVALUE('IE Pr_VersionLoss'[RevisionCode])))",
              "--CALCULATE(,FILTER('CalculatedTable 9','CalculatedTable 9'[IsActualCode]<>0))",
              ""
            ]
          },
          {
            "name": "Measure 1",
            "expression": [
              "",
              "var currentmonth= max(DimAllBomVersion[ShamsiCurrentMonth])",
              "",
              "var maxmonthBudget = ",
              "CALCULATE(max('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[RevName]=\"Budget\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\" && 'CalculatedTable 9'[MonthRank]<=maxmonthBudget ),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblBudget = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"46\" && 'CalculatedTable 9'[MonthRank]=maxmonthBudget),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcastcurrentmonth = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"47\" && 'CalculatedTable 9'[Month]=currentmonth ),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank]",
              ",\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblBudget)",
              "",
              "return ",
              "",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])"
            ]
          },
          {
            "name": "ValueOrVolumePerRev",
            "expression": [
              "",
              "",
              "var VCurrentYear =YEAR(today())",
              "",
              " var tbl1 = SUMMARIZE('CalculatedTable 9'",
              "            ,'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[processid],'CalculatedTable 9'[CenterType],'CalculatedTable 9'[Month],",
              "             'CalculatedTable 9'[processcategory],'CalculatedTable 9'[TargetTypeId],'CalculatedTable 9'[CorrectVersion],'CalculatedTable 9'[LossVersionsPerMonth],'CalculatedTable 9'[Site],",
              "             'CalculatedTable 9'[RevType],\"box\",sum('CalculatedTable 9'[Amount]) ,",
              "             \"value\",sum('CalculatedTable 9'[Value]),\"isactual\",FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))     --,'CalculatedTable 9'[versiontype]",
              "",
              "",
              "var tbl2= GROUPBY(filter(tbl1,[processcategory]=\"Packaging\"),'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[ProcessID])",
              "var tbl5= GROUPBY(filter(tbl1,[processcategory]<>\"Packaging\"),'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[ProcessID])",
              "",
              "var tbl3= SELECTCOLUMNS(GROUPBY(tbl2,'CalculatedTable 9'[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),'CalculatedTable 9'[ProcessID]))",
              "                ,\"rayvarz\",'CalculatedTable 9'[RayvarzId],\"countprocess\",[countprocess])",
              " ",
              "",
              "var tbl7= SELECTCOLUMNS(SUMMARIZE(tbl5,'CalculatedTable 9'[rayvarzid],\"countprocess\",1 )  ",
              "                 ,\"rayvarz\",'CalculatedTable 9'[RayvarzId],\"countprocess\",[countprocess])",
              "",
              "var tbl6  = union(tbl3,tbl7)",
              "",
              "var vjoin =FILTER(CROSSJOIN(tbl1,tbl6),'CalculatedTable 9'[RayvarzId]=[rayvarz])",
              "--manual packaging id =20 -- blister id = 17 ",
              "var tbl9 = SUMMARIZE(vjoin,'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[processid],'CalculatedTable 9'[CenterType],",
              "               'CalculatedTable 9'[processcategory],[CorrectVersion],[isactual],'CalculatedTable 9'[Site],[countprocess],[box],[value]) --'CalculatedTable 9'[versiontype],",
              "",
              "",
              "var tbl4 = UNION(filter(tbl9,'CalculatedTable 9'[processid]=20 &&  'CalculatedTable 9'[CenterType]=93 && 'CalculatedTable 9'[Site]=\"Abidi\") ,",
              " filter(tbl9, 'CalculatedTable 9'[CenterType]<>93 && 'CalculatedTable 9'[Site]=\"Abidi\" ),",
              " filter(tbl9, 'CalculatedTable 9'[Site]=\"CMO\"))",
              "",
              "",
              "return ",
              "",
              "",
              " if(SELECTEDVALUE(ReportType[Type])=\"Volume\" ",
              ",",
              "if(max('CalculatedTable 9'[MiladiYear])>=VCurrentYear,",
              "",
              "sumx(FILTER(tbl4,[CorrectVersion]=FALSE()),[box])",
              "",
              "--calculate(sumx(tbl4,[box]),filter('CalculatedTable 9','CalculatedTable 9'[CorrectVersion]=FALSE()))",
              ",",
              "sumx(FILTER(tbl4,[isactual]<>0),[box])",
              "",
              "-- FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0)<>0)",
              "",
              "),",
              "if(SELECTEDVALUE(ReportType[Type])=\"Value\" ,",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])>=VCurrentYear,",
              "",
              "sumx(FILTER(tbl4,[CorrectVersion]=FALSE()),[value]),",
              "sumx(FILTER(tbl4,[isactual]<>0),[value])",
              "",
              ")",
              "))",
              "",
              "",
              "",
              "",
              "",
              "--FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0)<>0",
              "",
              "",
              "/*",
              "var maxyear=CALCULATE(max('CalculatedTable 9'[MiladiYear]),ALLSELECTED('CalculatedTable 9'[MiladiYear],'CalculatedTable 9'[Month]))",
              "",
              "var minmonthmaxyear = CALCULATE(min('CalculatedTable 9'[Month]) , ",
              " FILTER(all('CalculatedTable 9'),'CalculatedTable 9'[MiladiYear]=maxyear))",
              "",
              "var vmonth = SELECTEDVALUE('CalculatedTable 9'[Month])",
              "var vversion = SELECTEDVALUE('CalculatedTable 9'[TargetTypeId])",
              "",
              "return ",
              "",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\"  && vmonth>=minmonthmaxyear,",
              "",
              "calculate(sum('CalculatedTable 9'[Amount]),filter('CalculatedTable 9','CalculatedTable 9'[Month]>=minmonthmaxyear && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE()))   ---R1",
              "",
              "",
              ",",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\" && vmonth<minmonthmaxyear ,",
              "",
              "calculate(sum('CalculatedTable 9'[Amount]),filter('CalculatedTable 9','CalculatedTable 9'[Month]<=minmonthmaxyear &&",
              "            FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0)<>0",
              "",
              ")) --Actual",
              "",
              "))",
              " ",
              "",
              "",
              "",
              "",
              "",
              "--CALCULATE(,FILTER('CalculatedTable 9','CalculatedTable 9'[IsActualCode]<>0))",
              "--,",
              "--sum('CalculatedTable 9'[Value])",
              "--)))",
              "",
              "*/"
            ]
          },
          {
            "name": "MatActualNew",
            "expression": [
              "",
              "var VCurrentYear =YEAR(today())",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"402\"),'IE Pr_VersionLoss'[RevisionCode])",
              "",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveActual\", FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveActual]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Amount])",
              "),",
              "",
              "if(max('CalculatedTable 9'[MiladiYear])<=VCurrentYear,",
              "",
              " SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveActual]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value])",
              ")",
              ")",
              "",
              "",
              "",
              "",
              "",
              "",
              "",
              "/*",
              "var maxmonthactual = CALCULATE(min('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[TargetTypeId]=\"402\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\"),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcast = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"402\" && 'CalculatedTable 9'[MonthRank]>maxmonthactual),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblForcast)",
              "",
              "",
              "var slctdmonth=SELECTEDVALUE('CalculatedTable 9'[MonthRank])",
              "",
              "var Actualmatmaxmonth = CALCULATE([MatForcast],FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[monthrank]=maxmonthactual))",
              " ",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])",
              ",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Value])",
              ")",
              "*/",
              " ",
              "",
              ""
            ]
          },
          {
            "name": "MatActual------",
            "expression": [
              "",
              "",
              "var VCurrentYear = YEAR(today())",
              "",
              "  var tbl1 = SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              " 'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              " 'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "  'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "   ) , ",
              "",
              "    'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank] ,'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[processid],'CalculatedTable 9'[CenterType],",
              "     'CalculatedTable 9'[TargetTypeId],'CalculatedTable 9'[CorrectVersion],'CalculatedTable 9'[LossVersionsPerMonth],",
              "      'CalculatedTable 9'[RevType],\"box\",sum('CalculatedTable 9'[Amount]) ,",
              "      \"value\",sum('CalculatedTable 9'[Value]),\"HaveActual\",FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))     --,'CalculatedTable 9'[versiontype]",
              "",
              "",
              "var tbl2= GROUPBY(filter(tbl1,[processcategory]=\"Packaging\"),'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[ProcessID])",
              "var tbl5= GROUPBY(filter(tbl1,[processcategory]<>\"Packaging\"),'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[ProcessID])",
              "",
              "var tbl3= SELECTCOLUMNS(GROUPBY(tbl2,'CalculatedTable 9'[rayvarzid],\"countprocess\",countx(CURRENTGROUP(),'CalculatedTable 9'[ProcessID]))",
              "                ,\"rayvarz\",'CalculatedTable 9'[RayvarzId],\"countprocess\",[countprocess])",
              " ",
              "",
              "var tbl7= SELECTCOLUMNS(SUMMARIZE(tbl5,'CalculatedTable 9'[rayvarzid],\"countprocess\",1 )  ",
              "                 ,\"rayvarz\",'CalculatedTable 9'[RayvarzId],\"countprocess\",[countprocess])",
              "",
              "var tbl6  = union(tbl3,tbl7)",
              "",
              "var vjoin =FILTER(CROSSJOIN(tbl1,tbl6),'CalculatedTable 9'[RayvarzId]=[rayvarz])",
              "--manual packaging id =20 -- blister id = 17 ",
              "var tbl9 = SUMMARIZE(vjoin,'CalculatedTable 9'[rayvarzid],'CalculatedTable 9'[processid],'CalculatedTable 9'[CenterType],",
              "               'CalculatedTable 9'[processcategory],[CorrectVersion],[MonthRank],[HaveActual],[countprocess],[box],[value]) --'CalculatedTable 9'[versiontype],",
              "",
              "",
              "var tbl4 = UNION(filter(tbl9,'CalculatedTable 9'[processid]=20 &&  'CalculatedTable 9'[CenterType]=93) ,",
              " filter(tbl9, 'CalculatedTable 9'[CenterType]<>93  ))",
              "",
              "",
              "",
              "return ",
              " if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "",
              " SUMX(FILTER(tbl4,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveActual]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[box])",
              ",",
              "",
              " SUMX(FILTER(tbl4,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank]) && [HaveActual]<>0 && ",
              " 'CalculatedTable 9'[CorrectVersion]=FALSE() ) ,[Value])",
              "",
              ")",
              "",
              "",
              "",
              "",
              "--var versioncode =  SUMMARIZE(filter('IE Pr_VersionLoss','IE Pr_VersionLoss'[RevisionID]=\"100\"),'IE Pr_VersionLoss'[RevisionCode])",
              "/*",
              "var tbltotal = ADDCOLUMNS(SUMMARIZE(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              " ) ,",
              " 'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],'CalculatedTable 9'[CorrectVersion],",
              " 'CalculatedTable 9'[LossVersionsPerMonth],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              " ,\"HaveActual\", FIND(\"100\",'CalculatedTable 9'[LossVersionsPerMonth],1,0))",
              "*/",
              "",
              "",
              "",
              "/*",
              "var currentmonth= max(DimAllBomVersion[ShamsiCurrentMonth])",
              "",
              "var maxmonthactual = ",
              "CALCULATE(max('CalculatedTable 9'[monthrank]),FILTER(ALLSELECTED('CalculatedTable 9'),'CalculatedTable 9'[RevName]=\"Actual\" ))",
              "",
              "var tblActual = SUMMARIZE(FILTER(",
              "ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[RevName]=\"Actual\"),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcast = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"402\" && 'CalculatedTable 9'[MonthRank]>maxmonthactual),",
              "'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank],\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tblForcastcurrentmonth = SUMMARIZE(FILTER(ALLEXCEPT('CalculatedTable 9','CalculatedTable 9'[ProcessNameFa],",
              "'CalculatedTable 9'[MachineDescFa],'CalculatedTable 9'[FinalProductName],",
              "'CalculatedTable 9'[ProcessCategory],'CalculatedTable 9'[LicenseHolder],'CalculatedTable 9'[Franchise],'CalculatedTable 9'[Tier],",
              "'CalculatedTable 9'[BrandName],'CalculatedTable 9'[ManufacturingType],'CalculatedTable 9'[PackingType]",
              "),'CalculatedTable 9'[TargetTypeId]=\"47\" && 'CalculatedTable 9'[month]=currentmonth ),'CalculatedTable 9'[Month],'CalculatedTable 9'[MonthRank]",
              ",\"Amount\",sum('CalculatedTable 9'[Amount]),\"Value\",sum('CalculatedTable 9'[Value]))",
              "",
              "var tbltotal=union(tblActual,tblForcast,tblForcastcurrentmonth)",
              "",
              " ",
              "return ",
              "if(SELECTEDVALUE(ReportType[Type])=\"Volume\",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Amount])",
              ",",
              "SUMX(FILTER(tbltotal,[MonthRank]>max([MonthRank])-12 && [MonthRank]<=max([MonthRank])) ,[Value])",
              ")",
              "",
              "*/"
            ]
          }
        ]
      },
      {
        "name": "pbi ProductionMAT",
        "columns": [
          {
            "name": "RevisionId",
            "dataType": "int64",
            "sourceColumn": "RevisionId"
          },
          {
            "name": "RevisionName",
            "dataType": "string",
            "sourceColumn": "RevisionName"
          },
          {
            "name": "ReportModeId",
            "dataType": "int64",
            "sourceColumn": "ReportModeId"
          },
          {
            "name": "ReportMode",
            "dataType": "string",
            "sourceColumn": "ReportMode"
          },
          {
            "name": "Year",
            "dataType": "int64",
            "sourceColumn": "Year"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "name": "FiscalYear",
            "dataType": "int64",
            "sourceColumn": "FiscalYear"
          },
          {
            "name": "Qty",
            "dataType": "double",
            "sourceColumn": "Qty"
          },
          {
            "name": "Value",
            "dataType": "double",
            "sourceColumn": "Value"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "SKUNameEn",
            "dataType": "string",
            "sourceColumn": "SKUNameEn"
          },
          {
            "name": "SKUNameFa",
            "dataType": "string",
            "sourceColumn": "SKUNameFa"
          },
          {
            "name": "SKUFaAbr",
            "dataType": "string",
            "sourceColumn": "SKUFaAbr"
          },
          {
            "name": "SKUEnAbr",
            "dataType": "string",
            "sourceColumn": "SKUEnAbr"
          },
          {
            "name": "SKUABDEnAbr",
            "dataType": "string",
            "sourceColumn": "SKUABDEnAbr"
          },
          {
            "name": "PGeneralName",
            "dataType": "string",
            "sourceColumn": "PGeneralName"
          },
          {
            "name": "PGeneralNameFa",
            "dataType": "string",
            "sourceColumn": "PGeneralNameFa"
          },
          {
            "name": "ProductID",
            "dataType": "int64",
            "sourceColumn": "ProductID"
          },
          {
            "name": "ProductName",
            "dataType": "string",
            "sourceColumn": "ProductName"
          },
          {
            "name": "BrandId",
            "dataType": "int64",
            "sourceColumn": "BrandId"
          },
          {
            "name": "BrandName",
            "dataType": "string",
            "sourceColumn": "BrandName"
          },
          {
            "name": "FranchiseId",
            "dataType": "int64",
            "sourceColumn": "FranchiseId"
          },
          {
            "name": "FranchiseName",
            "dataType": "string",
            "sourceColumn": "FranchiseName"
          },
          {
            "name": "FranchiseAbr",
            "dataType": "string",
            "sourceColumn": "FranchiseAbr"
          },
          {
            "name": "Category",
            "dataType": "string",
            "sourceColumn": "Category"
          },
          {
            "name": "Type",
            "dataType": "string",
            "sourceColumn": "Type"
          },
          {
            "name": "Usage",
            "dataType": "string",
            "sourceColumn": "Usage"
          },
          {
            "name": "LisenceHolderId",
            "dataType": "int64",
            "sourceColumn": "LisenceHolderId"
          },
          {
            "name": "LisenceHolder",
            "dataType": "string",
            "sourceColumn": "LisenceHolder"
          },
          {
            "name": "ProductLevelQty",
            "dataType": "double",
            "sourceColumn": "ProductLevelQty"
          },
          {
            "name": "BrandLevelQty",
            "dataType": "double",
            "sourceColumn": "BrandLevelQty"
          },
          {
            "name": "ProductLevelValue",
            "dataType": "double",
            "sourceColumn": "ProductLevelValue"
          },
          {
            "name": "BrandLevelvalue",
            "dataType": "double",
            "sourceColumn": "BrandLevelvalue"
          },
          {
            "name": "IsLastF",
            "dataType": "int64",
            "sourceColumn": "IsLastF"
          },
          {
            "name": "Parent",
            "dataType": "int64",
            "sourceColumn": "Parent"
          },
          {
            "name": "SaleProdId",
            "dataType": "int64",
            "sourceColumn": "SaleProdId"
          },
          {
            "name": "SaleProd",
            "dataType": "string",
            "sourceColumn": "SaleProd"
          },
          {
            "name": "SKUToBrandRatio",
            "dataType": "double",
            "sourceColumn": "SKUToBrandRatio"
          },
          {
            "name": "SKUToProductRatio",
            "dataType": "double",
            "sourceColumn": "SKUToProductRatio"
          },
          {
            "name": "ielastdayinmonth",
            "dataType": "dateTime",
            "sourceColumn": "ielastdayinmonth"
          },
          {
            "name": "GrossQuantity",
            "dataType": "double",
            "sourceColumn": "GrossQuantity"
          },
          {
            "name": "NetQuantity",
            "dataType": "int64",
            "sourceColumn": "NetQuantity"
          },
          {
            "name": "GrossValue",
            "dataType": "double",
            "sourceColumn": "GrossValue"
          },
          {
            "name": "NetValue",
            "dataType": "int64",
            "sourceColumn": "NetValue"
          },
          {
            "name": "TargetDtlId",
            "dataType": "int64",
            "sourceColumn": "TargetDtlId"
          },
          {
            "name": "ChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "ChangeDate"
          },
          {
            "name": "PersonFullName",
            "dataType": "string",
            "sourceColumn": "PersonFullName"
          },
          {
            "name": "PersonCode",
            "dataType": "int64",
            "sourceColumn": "PersonCode"
          },
          {
            "name": "FaPrice",
            "dataType": "double",
            "sourceColumn": "FaPrice"
          },
          {
            "name": "IsActual",
            "dataType": "boolean",
            "sourceColumn": "IsActual"
          },
          {
            "type": "calculated",
            "name": "ISActualCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if('pbi ProductionMAT'[IsActual]=TRUE(),1,0)"
          },
          {
            "name": "IsActive_Budget",
            "dataType": "boolean",
            "sourceColumn": "IsActive_Budget"
          },
          {
            "name": "IdenId",
            "dataType": "int64",
            "sourceColumn": "IdenId"
          },
          {
            "type": "calculated",
            "name": "IsActiveCode",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if('pbi ProductionMAT'[IsActive_Budget]=TRUE(),1,0)"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_ProductionMAT = Source{[Schema=\"pbi\",Item=\"ProductionMAT\"]}[Data],",
                "    #\"Filtered Rows\" = Table.SelectRows(pbi_ProductionMAT, each ([IsLastF] = 1))",
                "in",
                "    #\"Filtered Rows\""
              ]
            }
          }
        ]
      },
      {
        "name": "ReportType",
        "columns": [
          {
            "name": "Type",
            "dataType": "string",
            "sourceColumn": "Type"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCkvMKU1VitUBsvJzSnOBzFgA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Type = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Type\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "qv BasicHrInfo",
        "columns": [
          {
            "name": "BasicHrInfoId",
            "dataType": "int64",
            "sourceColumn": "BasicHrInfoId"
          },
          {
            "name": "AbilityCertificateRange",
            "dataType": "string",
            "sourceColumn": "AbilityCertificateRange"
          },
          {
            "name": "Description",
            "dataType": "string",
            "sourceColumn": "Description"
          },
          {
            "name": "PersonId",
            "dataType": "int64",
            "sourceColumn": "PersonId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "TargetHdrId",
            "dataType": "int64",
            "sourceColumn": "TargetHdrId"
          },
          {
            "name": "MachineDscEn",
            "dataType": "string",
            "sourceColumn": "MachineDscEn"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "IsFullWorking",
            "dataType": "boolean",
            "sourceColumn": "IsFullWorking"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "ProcessNameEn",
            "dataType": "string",
            "sourceColumn": "ProcessNameEn"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "RevName",
            "dataType": "string",
            "sourceColumn": "RevName"
          },
          {
            "name": "ProcessAbr",
            "dataType": "string",
            "sourceColumn": "ProcessAbr"
          },
          {
            "name": "CompanyId",
            "dataType": "int64",
            "sourceColumn": "CompanyId"
          },
          {
            "name": "CompanyName",
            "dataType": "string",
            "sourceColumn": "CompanyName"
          },
          {
            "name": "SiteId",
            "dataType": "int64",
            "sourceColumn": "SiteId"
          },
          {
            "name": "SiteName",
            "dataType": "string",
            "sourceColumn": "SiteName"
          },
          {
            "name": "SubDepartmentId",
            "dataType": "int64",
            "sourceColumn": "SubDepartmentId"
          },
          {
            "name": "SubDepartmentName",
            "dataType": "string",
            "sourceColumn": "SubDepartmentName"
          },
          {
            "name": "DepartmentId",
            "dataType": "int64",
            "sourceColumn": "DepartmentId"
          },
          {
            "name": "DepartmentName",
            "dataType": "string",
            "sourceColumn": "DepartmentName"
          },
          {
            "name": "StatusId",
            "dataType": "int64",
            "sourceColumn": "StatusId"
          },
          {
            "name": "StatusName",
            "dataType": "string",
            "sourceColumn": "StatusName"
          },
          {
            "name": "PersonelCode",
            "dataType": "int64",
            "sourceColumn": "PersonelCode"
          },
          {
            "name": "FirstName",
            "dataType": "string",
            "sourceColumn": "FirstName"
          },
          {
            "name": "LastName",
            "dataType": "string",
            "sourceColumn": "LastName"
          },
          {
            "name": "FullName",
            "dataType": "string",
            "sourceColumn": "FullName"
          },
          {
            "name": "PositionNameFa",
            "dataType": "string",
            "sourceColumn": "PositionNameFa"
          },
          {
            "name": "PositionNameEn",
            "dataType": "string",
            "sourceColumn": "PositionNameEn"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_BasicHrInfo = Source{[Schema=\"qv\",Item=\"BasicHrInfo\"]}[Data]",
                "in",
                "    qv_BasicHrInfo"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi HR_ForWeeklyPlan",
        "columns": [
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "ShiftID",
            "dataType": "int64",
            "sourceColumn": "ShiftID"
          },
          {
            "name": "StandardMachineShift",
            "dataType": "double",
            "sourceColumn": "StandardMachineShift"
          },
          {
            "name": "BudgetMachineShift",
            "dataType": "double",
            "sourceColumn": "BudgetMachineShift"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_HR_ForWeeklyPlan = Source{[Schema=\"pbi\",Item=\"HR_ForWeeklyPlan\"]}[Data]",
                "in",
                "    pbi_HR_ForWeeklyPlan"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi HrOverTimeActualF",
        "columns": [
          {
            "name": "NormStatndardDSumNormDurationByShift",
            "dataType": "double",
            "sourceColumn": "NormStatndardDSumNormDurationByShift"
          },
          {
            "name": "NormBudjetDSumNormDurationByShift",
            "dataType": "double",
            "sourceColumn": "NormBudjetDSumNormDurationByShift"
          },
          {
            "name": "NormZaribOverStandardDNormZaribOverDurationByShift",
            "dataType": "double",
            "sourceColumn": "NormZaribOverStandardDNormZaribOverDurationByShift"
          },
          {
            "name": "NormZaribOverBudjetDNormZaribOverDurationByShift",
            "dataType": "double",
            "sourceColumn": "NormZaribOverBudjetDNormZaribOverDurationByShift"
          },
          {
            "name": "OverZaribOverStandardDOverZaribOverDurationByShift",
            "dataType": "double",
            "sourceColumn": "OverZaribOverStandardDOverZaribOverDurationByShift"
          },
          {
            "name": "OverZaribOverBudjetDOverZaribOverDurationByShift",
            "dataType": "double",
            "sourceColumn": "OverZaribOverBudjetDOverZaribOverDurationByShift"
          },
          {
            "name": "NightStandardDSumNightlyDurationByShift",
            "dataType": "double",
            "sourceColumn": "NightStandardDSumNightlyDurationByShift"
          },
          {
            "name": "NigthBudjetDSumNightlyDurationByShift",
            "dataType": "double",
            "sourceColumn": "NigthBudjetDSumNightlyDurationByShift"
          },
          {
            "name": "SumDurationOperator",
            "dataType": "int64",
            "sourceColumn": "SumDurationOperator"
          },
          {
            "name": "CountNormStatndardDSumNormDuration",
            "dataType": "double",
            "sourceColumn": "CountNormStatndardDSumNormDuration"
          },
          {
            "name": "CountNormBudjetDSumNormDuration",
            "dataType": "double",
            "sourceColumn": "CountNormBudjetDSumNormDuration"
          },
          {
            "name": "CountNormZaribOverStandardDNormZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "CountNormZaribOverStandardDNormZaribOverDuration"
          },
          {
            "name": "CountNormZaribOverBudjetDNormZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "CountNormZaribOverBudjetDNormZaribOverDuration"
          },
          {
            "name": "CountOverZaribOverStandardDOverZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "CountOverZaribOverStandardDOverZaribOverDuration"
          },
          {
            "name": "CountOverZaribOverBudjetDOverZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "CountOverZaribOverBudjetDOverZaribOverDuration"
          },
          {
            "name": "CountNightStandardDSumNightlyDuration",
            "dataType": "double",
            "sourceColumn": "CountNightStandardDSumNightlyDuration"
          },
          {
            "name": "CountNigthBudjetDSumNightlyDuration",
            "dataType": "double",
            "sourceColumn": "CountNigthBudjetDSumNightlyDuration"
          },
          {
            "name": "SumNormDuration",
            "dataType": "int64",
            "sourceColumn": "SumNormDuration"
          },
          {
            "name": "NormZaribOverDuration",
            "dataType": "int64",
            "sourceColumn": "NormZaribOverDuration"
          },
          {
            "name": "OverZaribOverDuration",
            "dataType": "int64",
            "sourceColumn": "OverZaribOverDuration"
          },
          {
            "name": "SumNightlyDuration",
            "dataType": "int64",
            "sourceColumn": "SumNightlyDuration"
          },
          {
            "name": "DateID",
            "dataType": "int64",
            "sourceColumn": "DateID"
          },
          {
            "name": "ChangeMachineID",
            "dataType": "int64",
            "sourceColumn": "ChangeMachineID"
          },
          {
            "name": "shiftID",
            "dataType": "int64",
            "sourceColumn": "shiftID"
          },
          {
            "name": "WeeklyPlanID",
            "dataType": "int64",
            "sourceColumn": "WeeklyPlanID"
          },
          {
            "name": "DailyProductionHdrID",
            "dataType": "int64",
            "sourceColumn": "DailyProductionHdrID"
          },
          {
            "name": "PersonID",
            "dataType": "int64",
            "sourceColumn": "PersonID"
          },
          {
            "name": "version",
            "dataType": "int64",
            "sourceColumn": "version"
          },
          {
            "name": "MinuteId",
            "dataType": "int64",
            "sourceColumn": "MinuteId"
          },
          {
            "name": "MinuteIdF",
            "dataType": "int64",
            "sourceColumn": "MinuteIdF"
          },
          {
            "name": "StartMinuteId",
            "dataType": "int64",
            "sourceColumn": "StartMinuteId"
          },
          {
            "name": "FinishMinuteId",
            "dataType": "int64",
            "sourceColumn": "FinishMinuteId"
          },
          {
            "name": "StartTime",
            "dataType": "dateTime",
            "sourceColumn": "StartTime"
          },
          {
            "name": "FinishTime",
            "dataType": "dateTime",
            "sourceColumn": "FinishTime"
          },
          {
            "name": "ShYear",
            "dataType": "int64",
            "sourceColumn": "ShYear"
          },
          {
            "name": "StartID",
            "dataType": "int64",
            "sourceColumn": "StartID"
          },
          {
            "name": "FinishID",
            "dataType": "int64",
            "sourceColumn": "FinishID"
          },
          {
            "name": "OverTimeMin",
            "dataType": "int64",
            "sourceColumn": "OverTimeMin"
          },
          {
            "name": "StartIDN",
            "dataType": "int64",
            "sourceColumn": "StartIDN"
          },
          {
            "name": "FinishIDN",
            "dataType": "int64",
            "sourceColumn": "FinishIDN"
          },
          {
            "name": "NightlyMin",
            "dataType": "int64",
            "sourceColumn": "NightlyMin"
          },
          {
            "name": "TimeActualOpe",
            "dataType": "int64",
            "sourceColumn": "TimeActualOpe"
          },
          {
            "name": "ConfigName",
            "dataType": "string",
            "sourceColumn": "ConfigName"
          },
          {
            "name": "RayvarzID",
            "dataType": "int64",
            "sourceColumn": "RayvarzID"
          },
          {
            "name": "ProductNameFa",
            "dataType": "string",
            "sourceColumn": "ProductNameFa"
          },
          {
            "name": "MachineID",
            "dataType": "int64",
            "sourceColumn": "MachineID"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "ProcessID",
            "dataType": "int64",
            "sourceColumn": "ProcessID"
          },
          {
            "name": "M_rayID",
            "dataType": "string",
            "sourceColumn": "M_rayID"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "IncludeOverTime",
            "dataType": "int64",
            "sourceColumn": "IncludeOverTime"
          },
          {
            "name": "IncludeNightlyTime",
            "dataType": "int64",
            "sourceColumn": "IncludeNightlyTime"
          },
          {
            "name": "OverTimeACtualOpe",
            "dataType": "int64",
            "sourceColumn": "OverTimeACtualOpe"
          },
          {
            "name": "NightlyTimeActualOpe",
            "dataType": "int64",
            "sourceColumn": "NightlyTimeActualOpe"
          },
          {
            "name": "FirstName",
            "dataType": "string",
            "sourceColumn": "FirstName"
          },
          {
            "name": "LastName",
            "dataType": "string",
            "sourceColumn": "LastName"
          },
          {
            "name": "PersonelCode",
            "dataType": "int64",
            "sourceColumn": "PersonelCode"
          },
          {
            "name": "NationalCode",
            "dataType": "string",
            "sourceColumn": "NationalCode"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "SubBacthNo",
            "dataType": "int64",
            "sourceColumn": "SubBacthNo"
          },
          {
            "name": "NormalTimeActual",
            "dataType": "int64",
            "sourceColumn": "NormalTimeActual"
          },
          {
            "name": "PlanTypeID",
            "dataType": "int64",
            "sourceColumn": "PlanTypeID"
          },
          {
            "name": "ShQuarter",
            "dataType": "int64",
            "sourceColumn": "ShQuarter"
          },
          {
            "name": "ShQuarterDesc",
            "dataType": "string",
            "sourceColumn": "ShQuarterDesc"
          },
          {
            "name": "ShMonth",
            "dataType": "int64",
            "sourceColumn": "ShMonth"
          },
          {
            "name": "ShWeek",
            "dataType": "int64",
            "sourceColumn": "ShWeek"
          },
          {
            "name": "ShMonthDesc",
            "dataType": "string",
            "sourceColumn": "ShMonthDesc"
          },
          {
            "name": "DescWeek",
            "dataType": "string",
            "sourceColumn": "DescWeek"
          },
          {
            "name": "AbidiHolidays",
            "dataType": "int64",
            "sourceColumn": "AbidiHolidays"
          },
          {
            "name": "TypeOfHolidays",
            "dataType": "int64",
            "sourceColumn": "TypeOfHolidays"
          },
          {
            "name": "CountUser",
            "dataType": "double",
            "sourceColumn": "CountUser"
          },
          {
            "name": "Duration",
            "dataType": "int64",
            "sourceColumn": "Duration"
          },
          {
            "name": "StOpeCount",
            "dataType": "double",
            "sourceColumn": "StOpeCount"
          },
          {
            "name": "BudOpeCount",
            "dataType": "double",
            "sourceColumn": "BudOpeCount"
          },
          {
            "name": "LoadingTime",
            "dataType": "int64",
            "sourceColumn": "LoadingTime"
          },
          {
            "name": "BudOpeCountLoadingTime",
            "dataType": "double",
            "sourceColumn": "BudOpeCountLoadingTime"
          },
          {
            "name": "StOpeCountLoadingTime",
            "dataType": "double",
            "sourceColumn": "StOpeCountLoadingTime"
          },
          {
            "name": "NormStatndard",
            "dataType": "double",
            "sourceColumn": "NormStatndard"
          },
          {
            "name": "NormBudjet",
            "dataType": "double",
            "sourceColumn": "NormBudjet"
          },
          {
            "name": "NormZaribOverStandard",
            "dataType": "double",
            "sourceColumn": "NormZaribOverStandard"
          },
          {
            "name": "NormZaribOverBudjet",
            "dataType": "double",
            "sourceColumn": "NormZaribOverBudjet"
          },
          {
            "name": "OverZaribOverStandard",
            "dataType": "double",
            "sourceColumn": "OverZaribOverStandard"
          },
          {
            "name": "OverZaribOverBudjet",
            "dataType": "double",
            "sourceColumn": "OverZaribOverBudjet"
          },
          {
            "name": "NightStandard",
            "dataType": "double",
            "sourceColumn": "NightStandard"
          },
          {
            "name": "NigthBudjet",
            "dataType": "double",
            "sourceColumn": "NigthBudjet"
          },
          {
            "name": "NormZarib",
            "dataType": "int64",
            "sourceColumn": "NormZarib"
          },
          {
            "name": "OverZarib",
            "dataType": "int64",
            "sourceColumn": "OverZarib"
          },
          {
            "name": "MSiftID",
            "dataType": "int64",
            "sourceColumn": "MSiftID"
          },
          {
            "name": "MshiftName",
            "dataType": "string",
            "sourceColumn": "MshiftName"
          },
          {
            "name": "NormTimeMin",
            "dataType": "int64",
            "sourceColumn": "NormTimeMin"
          },
          {
            "name": "NormStatndardDSumNormDuration",
            "dataType": "double",
            "sourceColumn": "NormStatndardDSumNormDuration"
          },
          {
            "name": "NormBudjetDSumNormDuration",
            "dataType": "double",
            "sourceColumn": "NormBudjetDSumNormDuration"
          },
          {
            "name": "NormZaribOverStandardDNormZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "NormZaribOverStandardDNormZaribOverDuration"
          },
          {
            "name": "NormZaribOverBudjetDNormZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "NormZaribOverBudjetDNormZaribOverDuration"
          },
          {
            "name": "OverZaribOverStandardDOverZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "OverZaribOverStandardDOverZaribOverDuration"
          },
          {
            "name": "OverZaribOverBudjetDOverZaribOverDuration",
            "dataType": "double",
            "sourceColumn": "OverZaribOverBudjetDOverZaribOverDuration"
          },
          {
            "name": "NightStandardDSumNightlyDuration",
            "dataType": "double",
            "sourceColumn": "NightStandardDSumNightlyDuration"
          },
          {
            "name": "NigthBudjetDSumNightlyDuration",
            "dataType": "double",
            "sourceColumn": "NigthBudjetDSumNightlyDuration"
          },
          {
            "name": "NormZaribOverTimeACtualOpe",
            "dataType": "int64",
            "sourceColumn": "NormZaribOverTimeACtualOpe"
          },
          {
            "name": "OverZaribOverTimeACtualOpe",
            "dataType": "int64",
            "sourceColumn": "OverZaribOverTimeACtualOpe"
          },
          {
            "name": "NormalTimeActualHr",
            "dataType": "int64",
            "sourceColumn": "NormalTimeActualHr"
          },
          {
            "name": "NightlyTimeActualOpeHr",
            "dataType": "int64",
            "sourceColumn": "NightlyTimeActualOpeHr"
          },
          {
            "name": "NormZaribOverTimeACtualOpeHr",
            "dataType": "int64",
            "sourceColumn": "NormZaribOverTimeACtualOpeHr"
          },
          {
            "name": "OverZaribOverTimeACtualOpeHr",
            "dataType": "int64",
            "sourceColumn": "OverZaribOverTimeACtualOpeHr"
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE('Dimqv Machine'[SiteName],'Dimqv Machine'[MachineId],'pbi HrOverTimeActualF'[MachineId])"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_HrOverTimeActualF = Source{[Schema=\"pbi\",Item=\"HrOverTimeActualF\"]}[Data]",
                "in",
                "    pbi_HrOverTimeActualF"
              ]
            }
          }
        ]
      },
      {
        "name": "DayName",
        "columns": [
          {
            "name": "DayName",
            "dataType": "string",
            "sourceColumn": "DayName",
            "sortByColumn": "DayOrder"
          },
          {
            "name": "DayOrder",
            "dataType": "int64",
            "sourceColumn": "DayOrder"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCk4sKS1KSaxU0lEyVIrVAQqU5kG4RmCubz6UawzmhpSmFkP4JmB+eGpKHkzEFKIio7QIKmAGFnAryoRwzZViYwE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [DayName = _t, DayOrder = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"DayName\", type text}, {\"DayOrder\", Int64.Type}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "MonthTypeReport",
        "columns": [
          {
            "name": "DateType",
            "dataType": "string",
            "sourceColumn": "DateType",
            "sortByColumn": "ID"
          },
          {
            "name": "ID",
            "dataType": "int64",
            "sourceColumn": "ID"
          },
          {
            "name": "Abbre",
            "dataType": "string",
            "sourceColumn": "Abbre"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8s3PK8lQCMlXcEksSVXSUTIEYrCYUqwOkqx7PlDcCIgjUxOLwFIh+SWJOQoQpTpKxkAMFnZJzMypBHJMwAKxAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [DateType = _t, ID = _t, Abbre = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"DateType\", type text}, {\"ID\", Int64.Type}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "pbi IsFinshBatchLastOP",
        "columns": [
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "type": "calculated",
            "name": "IsFinish",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "Done",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "IF (",
              "     ( 'pbi IsFinshBatchLastOP'[process20] = 20",
              "        && 'pbi IsFinshBatchLastOP'[ProcessId] = 20 )",
              "        || (",
              "            'pbi IsFinshBatchLastOP'[process20] = BLANK ()",
              "                && 'pbi IsFinshBatchLastOP'[ProcessId] = 17",
              "        )",
              "        || (",
              "            'pbi IsFinshBatchLastOP'[process20] = BLANK ()",
              "                && 'pbi IsFinshBatchLastOP'[ProcessId] = 21",
              "        )",
              "        || (",
              "            'pbi IsFinshBatchLastOP'[process20] = BLANK ()",
              "                && 'pbi IsFinshBatchLastOP'[ProcessId] = 23",
              "        ),",
              "    1,0",
              ")"
            ]
          },
          {
            "type": "calculated",
            "name": "Process20",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "IF(LOOKUPVALUE('Dimqv ProductExcel'[ProductionCenterId],'Dimqv ProductExcel'[RayvarzNumber],'pbi IsFinshBatchLastOP'[RayvarzId])=93,20)"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_IsFinshBatchLastOP = Source{[Schema=\"pbi\",Item=\"IsFinshBatchLastOP\"]}[Data]",
                "in",
                "    pbi_IsFinshBatchLastOP"
              ]
            }
          }
        ]
      },
      {
        "name": "DimShiladiYearMonth",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "DateId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi BaseDate[DateId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi BaseDate[ShiladiYear]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShiladiWeek",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi BaseDate[ShiladiWeek]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi BaseDate[ShMon]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "IeMonthDesc",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi BaseDate[IeMonthDesc]",
            "sortByColumn": "MiladiMonthOrder"
          },
          {
            "type": "calculated",
            "name": "MiladiMonthOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmonth = right(DimShiladiYearMonth[ShMon],2)",
              "  return ",
              "  if(vmonth=\"10\",1 , if(vmonth=\"11\",2,if(vmonth=\"12\",3,IF(vmonth=\"01\",4,IF(vmonth=\"02\",5,IF(vmonth=\"03\",6,",
              "  IF(vmonth=\"04\",7,IF(vmonth=\"05\",8,IF(vmonth=\"06\",9,IF(vmonth=\"07\",10,IF(vmonth=\"08\",11,IF(vmonth=\"09\",12))))))))))))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "DimShiladiYearMonth[ShiladiYear]&\"-\"&DimShiladiYearMonth[ShiladiWeek]&\"-\"&DimShiladiYearMonth[DateId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE('pbi BaseDate' , 'pbi BaseDate'[DateId],'pbi BaseDate'[ShiladiYear],'pbi BaseDate'[ShiladiWeek],",
                "'pbi BaseDate'[ShMon],'pbi BaseDate'[IeMonthDesc])",
                "",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "DimMachine",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv Machine[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv Machine[MachineDscEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "Dimqv Machine[ProcessId]"
          },
          {
            "type": "calculated",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],DimMachine[ProcessId])",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if(DimMachine[ProcessID] in {17,20,21,23,42} ,\"Packaging\" ,",
              " if(DimMachine[ProcessID] in {14,15,16},\"Solid\" ,",
              " if(DimMachine[ProcessID] in {10,11,13,38,22} , \"Manufacture\" ,",
              "  DimMachine[ProcessNameEn])))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "SiteName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv Machine[SiteName]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE(FILTER('Dimqv Machine',",
                " not 'Dimqv Machine'[ProcessId] in {0,-1,1,24,18,9,8,12,19,25,40,43,44} &&  ",
                "not 'Dimqv Machine'[MachineId] ",
                "in {-1,0,215,233,296,371,430,431,447,459,466,30,273,372,373,374,375,376,377,",
                "209,458,462,469,269,207,213,228,460,264,211,234,428,434,468,43,268,20,212,470,262",
                ",216,378,263,33,34,35,36,60,267,370,168,214,231,368,464,61,265,367,",
                "369,272,274,275,379,380,381,382,383,384,385,386,465,1,122,210,251,432,461,467}",
                "),--,",
                "",
                "'Dimqv Machine'[MachineId],'Dimqv Machine'[MachineDscEn],'Dimqv Machine'[ProcessId],'Dimqv Machine'[SiteName])",
                "",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "ViewScoreCard",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[ShMon]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "VersionType",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[VersionType]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "box",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[box]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "VersionTypeId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[VersionTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[ProcessID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "CenterType",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[CenterType]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessCategory",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "ProductWeeklyVsActual[ProcessCategory]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": [
                "",
                "union(",
                " SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId] in {4,5} &&",
                "       RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"07\" , \"08\" ,\"09\"} && ProductWeeklyVsActual[Typeprog]=\"R3\" && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\"  ),",
                "  ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[VersionTypeId],ProductWeeklyVsActual[VersionType],ProductWeeklyVsActual[Typeprog],",
                " ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[ProcessID],ProductWeeklyVsActual[ProcessCategory],ProductWeeklyVsActual[CenterType],\"box\",sum(ProductWeeklyVsActual[box]) )",
                ",",
                "",
                " SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId] in {4,5} &&",
                "       RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"10\",\"11\",\"12\"} && ProductWeeklyVsActual[Typeprog]=\"Budget\"  && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\" ),",
                " ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[VersionTypeId],ProductWeeklyVsActual[VersionType],ProductWeeklyVsActual[Typeprog],",
                "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[ProcessID],ProductWeeklyVsActual[ProcessCategory],ProductWeeklyVsActual[CenterType],\"box\",sum(ProductWeeklyVsActual[box]) )",
                ",",
                "",
                " SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId] in {4,5} &&",
                "       RIGHT('ProductWeeklyVsActual'[ShMon],2) in{\"04\",\"05\",\"06\"} && ProductWeeklyVsActual[Typeprog]=\"R2\"  && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\" ),",
                " ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[VersionTypeId],ProductWeeklyVsActual[VersionType],ProductWeeklyVsActual[Typeprog],",
                "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[ProcessID],ProductWeeklyVsActual[ProcessCategory],ProductWeeklyVsActual[CenterType],\"box\",sum(ProductWeeklyVsActual[box]) )",
                ",",
                "",
                " SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId] in {4,5} &&",
                "       RIGHT('ProductWeeklyVsActual'[ShMon],2) in {\"01\",\"02\",\"03\"} && ProductWeeklyVsActual[Typeprog]=\"R1\"  && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\" ),",
                " ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[VersionTypeId],ProductWeeklyVsActual[VersionType],ProductWeeklyVsActual[Typeprog],",
                "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[ProcessID],ProductWeeklyVsActual[ProcessCategory],ProductWeeklyVsActual[CenterType],\"box\",sum(ProductWeeklyVsActual[box]) ) ",
                ",",
                "",
                "SUMMARIZE(filter(ProductWeeklyVsActual,ProductWeeklyVsActual[VersionTypeId] =1  && ProductWeeklyVsActual[PlanTypeId]=26  && ProductWeeklyVsActual[ProcessCategory]=\"Packaging\"),",
                " ProductWeeklyVsActual[ShMon],ProductWeeklyVsActual[VersionTypeId],ProductWeeklyVsActual[VersionType],ProductWeeklyVsActual[Typeprog],",
                "ProductWeeklyVsActual[RayvarzId],ProductWeeklyVsActual[ProcessID],ProductWeeklyVsActual[ProcessCategory],ProductWeeklyVsActual[CenterType],\"box\",sum(ProductWeeklyVsActual[box]) ",
                ")",
                " )",
                ""
              ]
            }
          }
        ]
      },
      {
        "name": "DimPRLossVersion",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RevisionCode",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "IE Pr_VersionLoss[RevisionCode]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": "VALUES('IE Pr_VersionLoss'[RevisionCode])"
            }
          }
        ]
      },
      {
        "name": "IE Pr_VersionLoss",
        "columns": [
          {
            "name": "RevisionCode",
            "dataType": "string",
            "sourceColumn": "RevisionCode"
          },
          {
            "name": "RevisionID",
            "dataType": "string",
            "sourceColumn": "RevisionID"
          },
          {
            "type": "calculated",
            "name": "VersionName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('IE Pr_VersionLoss'[RevisionID]=\"100\",\"Actual\",if('IE Pr_VersionLoss'[RevisionID]=\"47\",\"Forcast\",",
              "if('IE Pr_VersionLoss'[RevisionID]=\"402\",\"R3\",if('IE Pr_VersionLoss'[RevisionID]=\"46\",\"Budget\",",
              " if('IE Pr_VersionLoss'[RevisionID]=\"48\",\"R1\",if('IE Pr_VersionLoss'[RevisionID]=\"49\",\"R2\"",
              "",
              "))))))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/pbidb;iedb\",",
                "    IE_Pr_VersionLoss = Source{[Schema=\"IE\",Item=\"Pr_VersionLoss\"]}[Data]",
                "in",
                "    IE_Pr_VersionLoss"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi Price",
        "columns": [
          {
            "name": "PriceId",
            "dataType": "int64",
            "sourceColumn": "PriceId"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "FaPrice",
            "dataType": "double",
            "sourceColumn": "FaPrice"
          },
          {
            "name": "DiPrice",
            "dataType": "double",
            "sourceColumn": "DiPrice"
          },
          {
            "name": "PhPrice",
            "dataType": "double",
            "sourceColumn": "PhPrice"
          },
          {
            "name": "isActive",
            "dataType": "boolean",
            "sourceColumn": "isActive"
          },
          {
            "name": "isActual",
            "dataType": "boolean",
            "sourceColumn": "isActual"
          },
          {
            "name": "sDate",
            "dataType": "dateTime",
            "sourceColumn": "sDate"
          },
          {
            "name": "fDate",
            "dataType": "dateTime",
            "sourceColumn": "fDate"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "type": "calculated",
            "name": "ShamsiSDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[DateId],'pbi BaseDate'[DateG],",
              "'pbi Price'[sDate])"
            ]
          },
          {
            "type": "calculated",
            "name": "ShamsiFDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[DateId],'pbi BaseDate'[DateG],",
              "'pbi Price'[fDate])"
            ]
          },
          {
            "type": "calculated",
            "name": "FinalFDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "if('pbi Price'[ShamsiSDate]<> BLANK() && 'pbi Price'[ShamsiFDate]=BLANK(), ",
              "LOOKUPVALUE('pbi BaseDate'[DateId],'pbi BaseDate'[DateG],TODAY()),",
              "'pbi Price'[ShamsiFDate])"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    pbi_Price = Source{[Schema=\"pbi\",Item=\"Price\"]}[Data]",
                "in",
                "    pbi_Price"
              ]
            }
          }
        ]
      },
      {
        "name": "PlannedSTPTarget",
        "columns": [
          {
            "name": "ProcessID",
            "dataType": "int64",
            "sourceColumn": "ProcessID"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "MachineID",
            "dataType": "int64",
            "sourceColumn": "MachineID"
          },
          {
            "name": "M_rayId",
            "dataType": "string",
            "sourceColumn": "M_rayId"
          },
          {
            "name": "MachineDscFa",
            "dataType": "string",
            "sourceColumn": "MachineDscFa"
          },
          {
            "name": "FinishDate",
            "dataType": "int64",
            "sourceColumn": "FinishDate"
          },
          {
            "name": "shiftId",
            "dataType": "int64",
            "sourceColumn": "shiftId"
          },
          {
            "name": "StoppageTypeId",
            "dataType": "int64",
            "sourceColumn": "StoppageTypeId"
          },
          {
            "name": "SumDuration",
            "dataType": "int64",
            "sourceColumn": "SumDuration"
          },
          {
            "name": "DurationStopOverlay",
            "dataType": "int64",
            "sourceColumn": "DurationStopOverlay"
          },
          {
            "name": "Level4Desc",
            "dataType": "string",
            "sourceColumn": "Level4Desc"
          },
          {
            "name": "ResponsibleType",
            "dataType": "string",
            "sourceColumn": "ResponsibleType"
          },
          {
            "name": "ResponsibleLvl1",
            "dataType": "string",
            "sourceColumn": "ResponsibleLvl1"
          },
          {
            "name": "ResponsibleLvl2",
            "dataType": "string",
            "sourceColumn": "ResponsibleLvl2"
          },
          {
            "name": "shiftName",
            "dataType": "string",
            "sourceColumn": "shiftName"
          },
          {
            "name": "DiffTime",
            "dataType": "int64",
            "sourceColumn": "DiffTime"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;amardb\",",
                "    qv_TargetActualFinal = Source{[Schema=\"qv\",Item=\"TargetActualFinal\"]}[Data]",
                "in",
                "    qv_TargetActualFinal"
              ]
            }
          }
        ]
      },
      {
        "name": "AcceptableType",
        "columns": [
          {
            "name": "ID",
            "dataType": "int64",
            "sourceColumn": "ID"
          },
          {
            "name": "AcceptableType",
            "dataType": "string",
            "sourceColumn": "AcceptableType"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUXLJL88LycxNVYrViVYyAgoE5CTm5aWmBIcEgIWMgUKOZYmZOYlJmTmZJZVgQROgYFBpXl5mXrpSbCwA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [ID = _t, AcceptableType = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"ID\", Int64.Type}, {\"AcceptableType\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 1",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "WeeklyplanSmlP",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[WeeklyplanSmlP]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "StartTime",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[StartTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FinishTime",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[FinishTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BacthNo",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[BacthNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Shift",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[Shift]"
          },
          {
            "type": "calculated",
            "name": "Calculated Column 6",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(count('qv PerformanceReport'[WeeklyPlanId]),",
              "FILTER('qv PerformanceReport','qv PerformanceReport'[WeeklyPlanId]='CalculatedTable 1'[WeeklyplanSmlP] ",
              "&& 'qv PerformanceReport'[RayvarzId]='CalculatedTable 1'[RayvarzId] ",
              "&& 'qv PerformanceReport'[batchno]='CalculatedTable 1'[BacthNo] &&  'qv PerformanceReport'[shiftId]='CalculatedTable 1'[Shift]",
              "&& 'CalculatedTable 1'[DateID]='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[TotalProductionBox]<>0  ))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "DateID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[DateID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[MachineDscFa]"
          },
          {
            "type": "calculated",
            "name": "ActualStartTime",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv PerformanceReport'[ActualStartTime]),",
              "FILTER('qv PerformanceReport','qv PerformanceReport'[WeeklyPlanId]='CalculatedTable 1'[WeeklyplanSmlP] ",
              "&& 'qv PerformanceReport'[RayvarzId]='CalculatedTable 1'[RayvarzId] ",
              "&& 'qv PerformanceReport'[batchno]='CalculatedTable 1'[BacthNo] &&  'qv PerformanceReport'[shiftId]='CalculatedTable 1'[Shift]",
              "&& 'CalculatedTable 1'[DateID]='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[TotalProductionBox]<>0 ",
              "&& 'CalculatedTable 1'[Calculated Column 6]=1 ))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualFinishTime",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX('qv PerformanceReport'[ActualFinishTime]),",
              "FILTER('qv PerformanceReport','qv PerformanceReport'[WeeklyPlanId]='CalculatedTable 1'[WeeklyplanSmlP] ",
              "&& 'qv PerformanceReport'[RayvarzId]='CalculatedTable 1'[RayvarzId] ",
              "&& 'qv PerformanceReport'[batchno]='CalculatedTable 1'[BacthNo] &&  'qv PerformanceReport'[shiftId]='CalculatedTable 1'[Shift]",
              "&& 'CalculatedTable 1'[DateID]='qv PerformanceReport'[FinishDate] && 'qv PerformanceReport'[TotalProductionBox]<>0 ",
              "&& 'CalculatedTable 1'[Calculated Column 6]=1 ))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MiladiDate",
            "dataType": "dateTime",
            "isDataTypeInferred": true,
            "expression": "DATEVALUE(LOOKUPVALUE('pbi BaseDate'[DateG],'pbi BaseDate'[DateId],'CalculatedTable 1'[DateID]))"
          },
          {
            "type": "calculated",
            "name": "PlanSTime",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "'CalculatedTable 1'[MiladiDate] & \" \" & TIMEVALUE(left('CalculatedTable 1'[StartTime],8))",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "PlanFTime",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "'CalculatedTable 1'[MiladiDate] & \" \" & TIMEVALUE(left('CalculatedTable 1'[FinishTime],8))",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "ActualSTime",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "'CalculatedTable 1'[MiladiDate] & \" \" & TIMEVALUE(RIGHT('CalculatedTable 1'[ActualStartTime],10))",
            "formatString": "General Date"
          },
          {
            "type": "calculated",
            "name": "ActualFTime",
            "dataType": "dateTime",
            "isDataTypeInferred": false,
            "expression": "'CalculatedTable 1'[MiladiDate] & \" \" & TIMEVALUE(RIGHT('CalculatedTable 1'[ActualFinishTime],10))",
            "formatString": "General Date"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv CompareDailyPlanHistory[ProcessId]"
          },
          {
            "type": "calculated",
            "name": "SortID",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "'CalculatedTable 1'[ProcessId] & \"/\" & 'CalculatedTable 1'[MachineId] & \"/\" & 'CalculatedTable 1'[RayvarzId] & \"/\"  & 'CalculatedTable 1'[BacthNo] "
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 1",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE(FILTER('qv CompareDailyPlanHistory', 'qv CompareDailyPlanHistory'[VersionTypeNumber]=1 && 'qv CompareDailyPlanHistory'[PlanTypeId]=26),",
                "    'qv CompareDailyPlanHistory'[WeeklyplanSmlP],'qv CompareDailyPlanHistory'[RayvarzId],'qv CompareDailyPlanHistory'[DateID],'qv CompareDailyPlanHistory'[ProcessId],",
                "'qv CompareDailyPlanHistory'[BacthNo],'qv CompareDailyPlanHistory'[MachineId],'qv CompareDailyPlanHistory'[Shift],'qv CompareDailyPlanHistory'[MachineDscFa],",
                "'qv CompareDailyPlanHistory'[StartTime],'qv CompareDailyPlanHistory'[FinishTime])"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi LaboratorySampleTests",
        "columns": [
          {
            "name": "TestId",
            "dataType": "int64",
            "sourceColumn": "TestId"
          },
          {
            "name": "TestName",
            "dataType": "string",
            "sourceColumn": "TestName"
          },
          {
            "name": "SubTestId",
            "dataType": "string",
            "sourceColumn": "SubTestId"
          },
          {
            "name": "SubTestName",
            "dataType": "string",
            "sourceColumn": "SubTestName"
          },
          {
            "name": "ProductLabHdrId",
            "dataType": "int64",
            "sourceColumn": "ProductLabHdrId"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "RayvarzId",
            "dataType": "int64",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ItemTypeId",
            "dataType": "int64",
            "sourceColumn": "ItemTypeId"
          },
          {
            "name": "ProductNameEn",
            "dataType": "string",
            "sourceColumn": "ProductNameEn"
          },
          {
            "name": "SupplierId",
            "dataType": "int64",
            "sourceColumn": "SupplierId"
          },
          {
            "name": "SupplierName",
            "dataType": "string",
            "sourceColumn": "SupplierName"
          },
          {
            "name": "IsMainTest",
            "dataType": "boolean",
            "sourceColumn": "IsMainTest"
          },
          {
            "name": "TestFrequency",
            "dataType": "int64",
            "sourceColumn": "TestFrequency"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;ABDDashboardDW\",",
                "    pbi_LaboratorySampleTests = Source{[Schema=\"pbi\",Item=\"LaboratorySampleTests\"]}[Data]",
                "in",
                "    pbi_LaboratorySampleTests"
              ]
            }
          }
        ]
      },
      {
        "name": "CutOffRange",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "Value",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Value]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 11",
            "source": {
              "type": "calculated",
              "expression": "   ({0,10, 20, 30, 40, 50, 60, 70, 80, 90, 100})"
            }
          }
        ]
      },
      {
        "name": "IE WIP_BI_Materail",
        "columns": [
          {
            "name": "Material_Out",
            "dataType": "double",
            "sourceColumn": "Material_Out"
          },
          {
            "name": "Material_Remain",
            "dataType": "double",
            "sourceColumn": "Material_Remain"
          },
          {
            "name": "WIPBOM_ArchiveDateTime",
            "dataType": "dateTime",
            "sourceColumn": "WIPBOM_ArchiveDateTime"
          },
          {
            "name": "WIPBOM_BatchNo",
            "dataType": "string",
            "sourceColumn": "WIPBOM_BatchNo"
          },
          {
            "name": "WIPBOM_BOM_NextProcess",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_BOM_NextProcess"
          },
          {
            "name": "WIPBOM_BomVersion",
            "dataType": "string",
            "sourceColumn": "WIPBOM_BomVersion"
          },
          {
            "name": "WIPBOM_LastDate",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_LastDate"
          },
          {
            "name": "WIPBOM_materialid",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_materialid"
          },
          {
            "name": "WIPBOM_materialname",
            "dataType": "string",
            "sourceColumn": "WIPBOM_materialname"
          },
          {
            "name": "WIPBOM_ProcessId",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_ProcessId"
          },
          {
            "name": "WIPBOM_processnamefa",
            "dataType": "string",
            "sourceColumn": "WIPBOM_processnamefa"
          },
          {
            "name": "WIPBOM_RayvarzId",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_RayvarzId"
          },
          {
            "name": "WIPBOM_SemiRayvarzId",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_SemiRayvarzId"
          },
          {
            "name": "Material_Out_AllProcess",
            "dataType": "double",
            "sourceColumn": "Material_Out_AllProcess"
          },
          {
            "name": "Material_Receive",
            "dataType": "double",
            "sourceColumn": "Material_Receive"
          },
          {
            "type": "calculated",
            "name": "TotalRecieve",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('IE WIP_BI_Materail'[Material_Receive]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[WIPBOM_RayvarzId]=EARLIER('IE WIP_BI_Materail'[WIPBOM_RayvarzId])",
              " && 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[WIPBOM_machineid]=EARLIER('IE WIP_BI_Materail'[WIPBOM_machineid]) ",
              " && 'IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime]=EARLIER('IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime])",
              " &&'IE WIP_BI_Materail'[WIPBOM_LastDate]=0))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalOut",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('IE WIP_BI_Materail'[Material_Out_AllProcess]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[WIPBOM_RayvarzId]=EARLIER('IE WIP_BI_Materail'[WIPBOM_RayvarzId])",
              " && 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[WIPBOM_machineid]=EARLIER('IE WIP_BI_Materail'[WIPBOM_machineid]) ",
              " && 'IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime]=EARLIER('IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime])",
              " &&'IE WIP_BI_Materail'[WIPBOM_LastDate]=0))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "TotalRemain",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(sum('IE WIP_BI_Materail'[Material_Remain]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[WIPBOM_RayvarzId]=EARLIER('IE WIP_BI_Materail'[WIPBOM_RayvarzId])",
              " && 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[WIPBOM_machineid]=EARLIER('IE WIP_BI_Materail'[WIPBOM_machineid]) ",
              " && 'IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime]=EARLIER('IE WIP_BI_Materail'[WIPBOM_ArchiveDateTime])",
              " &&'IE WIP_BI_Materail'[WIPBOM_LastDate]=0))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MaterialCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv BomDetailsAllVersion'[CategoryName]),FILTER('qv BomDetailsAllVersion','qv BomDetailsAllVersion'[MaterialID]=",
              "                                                                         'IE WIP_BI_Materail'[WIPBOM_materialid]))"
            ]
          },
          {
            "type": "calculated",
            "name": "FinishDate",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "CALCULATE(MIN('qv PerformanceReport'[FinishDate]),FILTER('qv PerformanceReport','qv PerformanceReport'[RayvarzId]='IE WIP_BI_Materail'[WIPBOM_RayvarzId] && 'qv PerformanceReport'[BatchNo]='IE WIP_BI_Materail'[WIPBOM_BatchNo] ))"
          },
          {
            "type": "calculated",
            "name": "IsFinishOp",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi IsFinshBatchLastOP'[IsFinish],'pbi IsFinshBatchLastOP'[RayvarzId],'IE WIP_BI_Materail'[WIPBOM_RayvarzId],'pbi IsFinshBatchLastOP'[BatchNo],'IE WIP_BI_Materail'[WIPBOM_BatchNo],'pbi IsFinshBatchLastOP'[ProcessId],'IE WIP_BI_Materail'[WIPBOM_ProcessId])"
          },
          {
            "type": "calculated",
            "name": "RayvarzIdText",
            "dataType": "string",
            "isDataTypeInferred": false,
            "expression": "'IE WIP_BI_Materail'[WIPBOM_RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "WastageTotalProcess",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(MAX(VwWastage_Rate[Wastage]),FILTER(VwWastage_Rate,'IE WIP_BI_Materail'[RayvarzIdText]=VwWastage_Rate[product] && ",
              "VwWastage_Rate[BatchNo]='IE WIP_BI_Materail'[WIPBOM_BatchNo]))/100"
            ],
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "type": "calculated",
            "name": "productname",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductName],'Dimqv ProductExcel'[RayvarzNumber],'IE WIP_BI_Materail'[WIPBOM_RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "Month",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "left('IE WIP_BI_Materail'[FinishDate],6)"
          },
          {
            "type": "calculated",
            "name": "ProductType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              " var x =SUMMARIZE(FILTER('IE WIP_BI_Materail',",
              "  'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])),'IE WIP_BI_Materail'[WIPBOM_ProcessId])",
              "",
              "-- && 'IE WIP_BI_Materail'[WIPBOM_BomVersion]= EARLIER('IE WIP_BI_Materail'[WIPBOM_BomVersion])",
              "",
              " return",
              " ",
              "if(10 in x && 11 in x && 13 in x, \"WG\",",
              "  if(10 in x && 38 in x && 13 in x,\"DG\",",
              "    if( 38 in x && 13 in x,\"DG+\",",
              "      if( 14 in x && 13 in x || 13 in x && 15 in x ,\"DC\",",
              "        if( 23 in x,\"Syrup\",",
              "          if( 14 || 15  in x  && COUNTROWS(x)=1  ,\"DC+\"",
              "))))))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewRecieve",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "-- granulation recieve ------",
              "var vgrecieve= CALCULATE(max('IE WIP_BI_Materail'[Material_Receive]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])",
              "&& 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[ProductType] in {\"WG\",\"DG\"} && 'IE WIP_BI_Materail'[WIPBOM_ProcessId]=10",
              "&& 'IE WIP_BI_Materail'[FinishDate]=EARLIER('IE WIP_BI_Materail'[FinishDate]) && ",
              "'IE WIP_BI_Materail'[WIPBOM_materialname]=EARLIER('IE WIP_BI_Materail'[WIPBOM_materialname] )))",
              "",
              "",
              "--sakht sharbat------------------",
              "var vsrecieve= CALCULATE(max('IE WIP_BI_Materail'[Material_Receive]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])",
              "&& 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo]) && 'IE WIP_BI_Materail'[WIPBOM_ProcessId]=22",
              "&& 'IE WIP_BI_Materail'[FinishDate]=EARLIER('IE WIP_BI_Materail'[FinishDate]) && ",
              "'IE WIP_BI_Materail'[WIPBOM_materialname]=EARLIER('IE WIP_BI_Materail'[WIPBOM_materialname] )))",
              "",
              "",
              "return ",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=11 && 'IE WIP_BI_Materail'[ProductType]=\"WG\" ,vgrecieve,",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=23 , vsrecieve,",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=38 && 'IE WIP_BI_Materail'[ProductType]=\"DG\" ,vgrecieve ,",
              "'IE WIP_BI_Materail'[Material_Receive] )))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewOut",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "-- dry out  ------",
              "var vdout= CALCULATE(max('IE WIP_BI_Materail'[Material_Out_AllProcess]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])",
              "&& 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[ProductType]=\"WG\" && 'IE WIP_BI_Materail'[WIPBOM_ProcessId]=11",
              "&& 'IE WIP_BI_Materail'[FinishDate]=EARLIER('IE WIP_BI_Materail'[FinishDate]) && ",
              "'IE WIP_BI_Materail'[WIPBOM_materialname]=EARLIER('IE WIP_BI_Materail'[WIPBOM_materialname] )))",
              "",
              "-- syrup filling out  ------",
              "var vsout= CALCULATE(max('IE WIP_BI_Materail'[Material_Out_AllProcess]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])",
              "&& 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo]) && 'IE WIP_BI_Materail'[WIPBOM_ProcessId]=23",
              "&& 'IE WIP_BI_Materail'[FinishDate]=EARLIER('IE WIP_BI_Materail'[FinishDate]) && ",
              "'IE WIP_BI_Materail'[WIPBOM_materialname]=EARLIER('IE WIP_BI_Materail'[WIPBOM_materialname] )))",
              "",
              "-----roller out --------",
              "var vRout= CALCULATE(max('IE WIP_BI_Materail'[Material_Out_AllProcess]),FILTER('IE WIP_BI_Materail',",
              "'IE WIP_BI_Materail'[RayvarzIdText]=EARLIER('IE WIP_BI_Materail'[RayvarzIdText])",
              "&& 'IE WIP_BI_Materail'[WIPBOM_BatchNo]=EARLIER('IE WIP_BI_Materail'[WIPBOM_BatchNo])",
              " && 'IE WIP_BI_Materail'[ProductType]=\"DG\" && 'IE WIP_BI_Materail'[WIPBOM_ProcessId]=38",
              "&& 'IE WIP_BI_Materail'[FinishDate]=EARLIER('IE WIP_BI_Materail'[FinishDate]) && ",
              "'IE WIP_BI_Materail'[WIPBOM_materialname]=EARLIER('IE WIP_BI_Materail'[WIPBOM_materialname] )))",
              "",
              "",
              "return ",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=10 && 'IE WIP_BI_Materail'[ProductType]=\"WG\" ,vdout,",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=10 && 'IE WIP_BI_Materail'[ProductType]=\"DG\" ,vRout,",
              "if('IE WIP_BI_Materail'[WIPBOM_ProcessId]=22 ,vsout,'IE WIP_BI_Materail'[Material_Out_AllProcess] )))",
              ""
            ]
          },
          {
            "name": "WIPBOM_machineid",
            "dataType": "int64",
            "sourceColumn": "WIPBOM_machineid"
          },
          {
            "name": "WIPBOM_machinename",
            "dataType": "string",
            "sourceColumn": "WIPBOM_machinename"
          },
          {
            "name": "WIPBOM_machinedscfa",
            "dataType": "string",
            "sourceColumn": "WIPBOM_machinedscfa"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/pbidb;iedb\",",
                "    IE_WIP_BI_Materail = Source{[Schema=\"IE\",Item=\"WIP_BI_Materail\"]}[Data]",
                "in",
                "    IE_WIP_BI_Materail"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "Sum of TotalOut",
            "expression": "SUM([TotalOut])"
          }
        ]
      },
      {
        "name": "CMOStore",
        "columns": [
          {
            "name": "StoreNo",
            "dataType": "string",
            "sourceColumn": "StoreNo",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "StoreDsc",
            "dataType": "string",
            "sourceColumn": "StoreDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DocType",
            "dataType": "int64",
            "sourceColumn": "DocType",
            "sourceProviderType": "UnsignedTinyInt"
          },
          {
            "name": "CodeKala",
            "dataType": "int64",
            "sourceColumn": "CodeKala",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "OnvanKala",
            "dataType": "string",
            "sourceColumn": "OnvanKala",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "OnvanKalaLtn",
            "dataType": "string",
            "sourceColumn": "OnvanKalaLtn",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Serial",
            "dataType": "string",
            "sourceColumn": "Serial",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ShomareSefaresh",
            "dataType": "int64",
            "sourceColumn": "ShomareSefaresh",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "TarikhSanad",
            "dataType": "int64",
            "sourceColumn": "TarikhSanad",
            "sourceProviderType": "Integer"
          },
          {
            "name": "VahedMeghdar",
            "dataType": "string",
            "sourceColumn": "VahedMeghdar",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "VahedMeghdarDsc",
            "dataType": "string",
            "sourceColumn": "VahedMeghdarDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TedadDarJabe",
            "dataType": "int64",
            "sourceColumn": "TedadDarJabe",
            "sourceProviderType": "SmallInt"
          },
          {
            "name": "ImpType",
            "dataType": "int64",
            "sourceColumn": "ImpType",
            "sourceProviderType": "Integer"
          },
          {
            "name": "PartGrp",
            "dataType": "string",
            "sourceColumn": "PartGrp",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "DocMonth",
            "dataType": "string",
            "sourceColumn": "DocMonth",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "Center",
            "dataType": "int64",
            "sourceColumn": "Center",
            "sourceProviderType": "Integer"
          },
          {
            "name": "CenterName",
            "dataType": "string",
            "sourceColumn": "CenterName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "KhalesTolid",
            "dataType": "double",
            "sourceColumn": "KhalesTolid",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "KhalesMablaghTolid",
            "dataType": "double",
            "sourceColumn": "KhalesMablaghTolid",
            "sourceProviderType": "Decimal"
          },
          {
            "name": "NoeMasraf",
            "dataType": "int64",
            "sourceColumn": "NoeMasraf",
            "sourceProviderType": "Integer"
          },
          {
            "name": "NoeMasrafDsc",
            "dataType": "string",
            "sourceColumn": "NoeMasrafDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "NoeResid",
            "dataType": "int64",
            "sourceColumn": "NoeResid",
            "sourceProviderType": "Integer"
          },
          {
            "name": "NoeResidDsc",
            "dataType": "string",
            "sourceColumn": "NoeResidDsc",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "TarikhEngheza",
            "dataType": "int64",
            "sourceColumn": "TarikhEngheza",
            "sourceProviderType": "Integer"
          },
          {
            "name": "ShomareSanad",
            "dataType": "int64",
            "sourceColumn": "ShomareSanad",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SharhRadifSanad",
            "dataType": "string",
            "sourceColumn": "SharhRadifSanad",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Month",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              " LEFT(CMOStore[TarikhSanad],6)",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],CMOStore[TarikhSanad])"
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],CMOStore[TarikhSanad],",
              "'pbi BaseDate'[ShiladiYear],CMOStore[ShiladiYear])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "MachineId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "MachineDesc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(CMOStore[StoreNo]=\"18\" || CMOStore[StoreNo]=\"59\" || CMOStore[StoreNo]=\"57\",\"CMOFG\",\"CoatingFG\")"
          },
          {
            "type": "calculated",
            "name": "TypeProg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"برنامه تولید\""
          },
          {
            "type": "calculated",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "ProcessId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "if(CMOStore[MachineDesc]=\"CMOFG\",20,16)"
          },
          {
            "type": "calculated",
            "name": "BomVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "ProcessName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"CMO\""
          },
          {
            "type": "calculated",
            "name": "ShiftId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "ShiftName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"روز بلند*\""
          },
          {
            "type": "calculated",
            "name": "SiteType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " if(CMOStore[StoreNo] = \"18\" || CMOStore[StoreNo] = \"59\" || CMOStore[StoreNo]=\"57\", \"CMOFG\" , \"CMOSFG\")"
          },
          {
            "type": "calculated",
            "name": "CMOMonth",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " if(CMOStore[Month]=139910,9910,if(CMOStore[Month]=139911,9911,if(CMOStore[Month]=139912,9912,CMOStore[Month])))"
          },
          {
            "type": "calculated",
            "name": "NewRayarzId",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": [
              "if(",
              "LEFT(CMOStore[CodeKala],3) = \"570\" , SUBSTITUTE(CMOStore[CodeKala],\"570\",\"700\") ,",
              " if(LEFT(CMOStore[CodeKala],3) = \"560\" , SUBSTITUTE(CMOStore[CodeKala],\"560\",\"700\"),",
              "BLANK())",
              ")",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewSerial",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": " LEFT(CMOStore[Serial],7)"
          },
          {
            "type": "calculated",
            "name": "BOMVersionKilo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "var vbom = CALCULATE(MAX('qv PerformanceReport'[BomVersion]),FILTER('qv PerformanceReport',",
              "'qv PerformanceReport'[RayvarzId]=CMOStore[NewRayarzId] && CMOStore[NewSerial]='qv PerformanceReport'[BatchNo]))",
              "",
              "return ",
              " if (CMOStore[NewRayarzId] <> CMOStore[CodeKala] , vbom,BLANK())"
            ]
          },
          {
            "type": "calculated",
            "name": "BatchBoxNet",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if (CMOStore[NewRayarzId] <> CMOStore[CodeKala] , ",
              "",
              "CALCULATE(max('qv BomDetailsAllVersion'[BatchBoxNet]), FILTER('qv BomDetailsAllVersion',CMOStore[NewRayarzId]='qv BomDetailsAllVersion'[RayvarzId] && ",
              "CMOStore[BOMVersionKilo]='qv BomDetailsAllVersion'[Version] )))"
            ]
          },
          {
            "type": "calculated",
            "name": "BatchKiloNet",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if (CMOStore[NewRayarzId] <> CMOStore[CodeKala] , ",
              "",
              "CALCULATE(max('qv BomDetailsAllVersion'[BatchKiloNet]), FILTER('qv BomDetailsAllVersion',CMOStore[NewRayarzId]='qv BomDetailsAllVersion'[RayvarzId] && ",
              "CMOStore[BOMVersionKilo]='qv BomDetailsAllVersion'[Version] )))",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "NewKhalesTolid",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "if (CMOStore[BOMVersionKilo]=BLANK() , CMOStore[KhalesTolid],",
              "",
              "CMOStore[KhalesTolid] * CMOStore[BatchBoxNet] /CMOStore[BatchKiloNet]   )"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select * \t from  etl.[ABDDashboardDW].[pbi].[ProductProducedAmount_RayvarzRep84] ",
                "where (storeno=59 and codekala in (7003331,7009150,7009165,7009160,7009175,7009180,7009170,7009101,7009103))",
                " or   noeresid = 72 or (storeno=57 and codekala in (9000012))"
              ],
              "dataSource": "SqlServer etl ABDDashboardDW"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * \t from  etl.[ABDDashboardDW].[pbi].[ProductProducedAmount_RayvarzRep84] ",
                  "where (storeno=59 and codekala in (7003331,7009150,7009165,7009160,7009175,7009180,7009170,7009101,7009103))",
                  " or   noeresid = 72 or (storeno=57 and codekala in (9000012))</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select * \t from  etl.[ABDDashboardDW].[pbi].[ProductProducedAmount_RayvarzRep84] ",
              "where (storeno=59 and codekala in (7003331,7009150,7009165,7009160,7009175,7009180,7009170,7009101,7009103))",
              " or   noeresid = 72 or (storeno=57 and codekala in (9000012))"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select * \t from  etl.[ABDDashboardDW].[pbi].[ProductProducedAmount_RayvarzRep84] ",
              "where (storeno=59 and codekala in (7003331,7009150,7009165,7009160,7009175,7009180,7009170,7009101,7009103))",
              " or   noeresid = 72 or (storeno=57 and codekala in (9000012))</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "CalculatedTable 11",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "machineid",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[machineid]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDescFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[MachineDescFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "finishdate",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[finishdate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "aaaa",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[aaaa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[ProcessID]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 11",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE(CMOStore,",
                "  \"machineid\",0,\"MachineDescFa\",\"0\",\"finishdate\", max(CMOStore[TarikhSanad]),",
                "\"Typeprog\",0,\"aaaa\",0,\"RayvarzId\", max(CMOStore[CodeKala]),\"ProcessID\",0",
                "",
                " )",
                "",
                "/*",
                "\"ProductNameEn\",max(CMOStore[OnvanKala]),\"BomVersion\",0,\"month\",max(CMOStore[Month]),\"BatchNo\",max(CMOStore[Serial]),",
                "\"YearWeekNumber\",0,\"processname\",max(CMOStore[NoeResidDsc]),\"ShiftId\",\"\",\"ShiftName\",\"\", \"ShiladiYear\",0,\"Remark\",\"\",\"L&uL\",0,\"Atime\",0,\"Ptime\",0,\"QTime\",0,\"Version\",0,",
                "\"VersionType\",\"Budget\",\"StopDuration\",0,\"Duration\",0,\"Box\",max(CMOStore[KhalesTolid]),\"Plannedstp-Rest\",0,\"unplannedstp-DownTime\",0,\"plannedstp<>Rest\",0,\"standardSpeed\",0,",
                "\"CustomizeSpeed\",0,\"AVGSpeed\",0",
                "*/"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi PMSchedule",
        "columns": [
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "Duration",
            "dataType": "int64",
            "sourceColumn": "Duration"
          },
          {
            "name": "PMStepId",
            "dataType": "int64",
            "sourceColumn": "PMStepId"
          },
          {
            "name": "PMStartHours",
            "dataType": "int64",
            "sourceColumn": "PMStartHours"
          },
          {
            "name": "PMEndHours",
            "dataType": "int64",
            "sourceColumn": "PMEndHours"
          },
          {
            "name": "PMType",
            "dataType": "int64",
            "sourceColumn": "PMType"
          },
          {
            "name": "PMTypeDesc",
            "dataType": "string",
            "sourceColumn": "PMTypeDesc"
          },
          {
            "type": "calculated",
            "name": "MachineNameEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(DimMachine[MachineDscEn],DimMachine[MachineId],'pbi PMSchedule'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "TypeProg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"PM\""
          },
          {
            "type": "calculated",
            "name": "planTypeId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1010"
          },
          {
            "type": "calculated",
            "name": "ProcessID",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[ProcessId], 'Dimqv Machine'[MachineId],'pbi PMSchedule'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],'pbi PMSchedule'[ProcessID])"
          },
          {
            "type": "calculated",
            "name": "BomVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "7070"
          },
          {
            "type": "calculated",
            "name": "BatchNo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "2000"
          },
          {
            "type": "calculated",
            "name": "RayvarzId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "ProductName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Test\""
          },
          {
            "type": "calculated",
            "name": "ShilftId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "2"
          },
          {
            "type": "calculated",
            "name": "ShiftName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"روز بلند*\""
          },
          {
            "type": "calculated",
            "name": "Shmonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE(left('pbi PMSchedule'[DateId],6))"
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'pbi PMSchedule'[DateId])"
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],'pbi PMSchedule'[DateId],",
              "'pbi BaseDate'[ShiladiYear],'pbi PMSchedule'[ShiladiYear])",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "Duration(h)",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE('pbi PMSchedule'[Duration],60)"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;ABDDashboardDW\",",
                "    pbi_PMSchedule = Source{[Schema=\"pbi\",Item=\"PMSchedule\"]}[Data]",
                "in",
                "    pbi_PMSchedule"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi ChangeControlReport",
        "columns": [
          {
            "name": "ChangeId",
            "dataType": "int64",
            "sourceColumn": "ChangeId"
          },
          {
            "name": "ChangeNo",
            "dataType": "string",
            "sourceColumn": "ChangeNo"
          },
          {
            "name": "ReceiptDate",
            "dataType": "dateTime",
            "sourceColumn": "ReceiptDate"
          },
          {
            "name": "ChangeDescription",
            "dataType": "string",
            "sourceColumn": "ChangeDescription"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId"
          },
          {
            "name": "IsAbidi",
            "dataType": "int64",
            "sourceColumn": "IsAbidi"
          },
          {
            "name": "SuggestChangeDate",
            "dataType": "dateTime",
            "sourceColumn": "SuggestChangeDate"
          },
          {
            "name": "ChangeReason",
            "dataType": "string",
            "sourceColumn": "ChangeReason"
          },
          {
            "name": "FullName_Manager",
            "dataType": "string",
            "sourceColumn": "FullName_Manager"
          },
          {
            "name": "ManagerPosition",
            "dataType": "string",
            "sourceColumn": "ManagerPosition"
          },
          {
            "name": "FullName_Requester",
            "dataType": "string",
            "sourceColumn": "FullName_Requester"
          },
          {
            "name": "RequesterPosition",
            "dataType": "string",
            "sourceColumn": "RequesterPosition"
          },
          {
            "name": "QualityRisk",
            "dataType": "string",
            "sourceColumn": "QualityRisk"
          },
          {
            "name": "HSERisk",
            "dataType": "string",
            "sourceColumn": "HSERisk"
          },
          {
            "name": "ChangeCategory",
            "dataType": "string",
            "sourceColumn": "ChangeCategory"
          },
          {
            "name": "ChangeType",
            "dataType": "string",
            "sourceColumn": "ChangeType"
          },
          {
            "name": "AnnouncementName",
            "dataType": "string",
            "sourceColumn": "AnnouncementName"
          },
          {
            "name": "MOM_Title",
            "dataType": "string",
            "sourceColumn": "MOM_Title"
          },
          {
            "name": "CAPA",
            "dataType": "string",
            "sourceColumn": "CAPA"
          },
          {
            "name": "ResponsibleDepartment",
            "dataType": "string",
            "sourceColumn": "ResponsibleDepartment"
          },
          {
            "name": "ChangeCommitteeAssesmentName",
            "dataType": "string",
            "sourceColumn": "ChangeCommitteeAssesmentName"
          },
          {
            "name": "ResultCommitteeName",
            "dataType": "string",
            "sourceColumn": "ResultCommitteeName"
          },
          {
            "name": "RayvarzId",
            "dataType": "string",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductName",
            "dataType": "string",
            "sourceColumn": "ProductName"
          },
          {
            "name": "Date_Diff",
            "dataType": "int64",
            "sourceColumn": "Date_Diff"
          },
          {
            "name": "RecommendedCondition",
            "dataType": "string",
            "sourceColumn": "RecommendedCondition"
          },
          {
            "name": "CurrentCondition",
            "dataType": "string",
            "sourceColumn": "CurrentCondition"
          },
          {
            "name": "IsOverLoad_DateDiff",
            "dataType": "string",
            "sourceColumn": "IsOverLoad_DateDiff"
          },
          {
            "name": "ReportDateFa",
            "dataType": "string",
            "sourceColumn": "ReportDateFa"
          },
          {
            "name": "ReportDateEn",
            "dataType": "string",
            "sourceColumn": "ReportDateEn"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_ChangeControlReport = Source{[Schema=\"pbi\",Item=\"ChangeControlReport\"]}[Data]",
                "in",
                "    pbi_ChangeControlReport"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi ChangeControlReportLog",
        "columns": [
          {
            "name": "PersonId",
            "dataType": "int64",
            "sourceColumn": "PersonId"
          },
          {
            "name": "PrimaryKeyId",
            "dataType": "int64",
            "sourceColumn": "PrimaryKeyId"
          },
          {
            "name": "CreateDate",
            "dataType": "dateTime",
            "sourceColumn": "CreateDate"
          },
          {
            "name": "Comment",
            "dataType": "string",
            "sourceColumn": "Comment"
          },
          {
            "name": "Dscp",
            "dataType": "string",
            "sourceColumn": "Dscp"
          },
          {
            "name": "FullName",
            "dataType": "string",
            "sourceColumn": "FullName"
          },
          {
            "name": "PositionId",
            "dataType": "int64",
            "sourceColumn": "PositionId"
          },
          {
            "name": "PositionNameFa",
            "dataType": "string",
            "sourceColumn": "PositionNameFa"
          },
          {
            "name": "PersonPositionId",
            "dataType": "int64",
            "sourceColumn": "PersonPositionId"
          },
          {
            "name": "ChangeNo",
            "dataType": "string",
            "sourceColumn": "ChangeNo"
          },
          {
            "name": "ReportDateFa",
            "dataType": "string",
            "sourceColumn": "ReportDateFa"
          },
          {
            "name": "ReportDateEn",
            "dataType": "string",
            "sourceColumn": "ReportDateEn"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_ChangeControlReportLog = Source{[Schema=\"pbi\",Item=\"ChangeControlReportLog\"]}[Data]",
                "in",
                "    pbi_ChangeControlReportLog"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi ChangeControlReportAttach",
        "columns": [
          {
            "name": "ChangeId",
            "dataType": "int64",
            "sourceColumn": "ChangeId"
          },
          {
            "name": "ChangeName",
            "dataType": "string",
            "sourceColumn": "ChangeName"
          },
          {
            "name": "PersonId",
            "dataType": "int64",
            "sourceColumn": "PersonId"
          },
          {
            "name": "ChangeDtlFileUploadId",
            "dataType": "int64",
            "sourceColumn": "ChangeDtlFileUploadId"
          },
          {
            "name": "ChangeDtlId",
            "dataType": "int64",
            "sourceColumn": "ChangeDtlId"
          },
          {
            "name": "FileName",
            "dataType": "string",
            "sourceColumn": "FileName"
          },
          {
            "name": "ActionType",
            "dataType": "int64",
            "sourceColumn": "ActionType"
          },
          {
            "name": "ChangeNo",
            "dataType": "string",
            "sourceColumn": "ChangeNo"
          },
          {
            "name": "ReportDateFa",
            "dataType": "string",
            "sourceColumn": "ReportDateFa"
          },
          {
            "name": "ReportDateEn",
            "dataType": "string",
            "sourceColumn": "ReportDateEn"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_ChangeControlReportAttach = Source{[Schema=\"pbi\",Item=\"ChangeControlReportAttach\"]}[Data]",
                "in",
                "    pbi_ChangeControlReportAttach"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi ChangeControlReportResult",
        "columns": [
          {
            "name": "WorkFlowLogId",
            "dataType": "int64",
            "sourceColumn": "WorkFlowLogId"
          },
          {
            "name": "ChangeName",
            "dataType": "string",
            "sourceColumn": "ChangeName"
          },
          {
            "name": "ChangeNo",
            "dataType": "string",
            "sourceColumn": "ChangeNo"
          },
          {
            "name": "ChangeId",
            "dataType": "int64",
            "sourceColumn": "ChangeId"
          },
          {
            "name": "InitialResult",
            "dataType": "string",
            "sourceColumn": "InitialResult"
          },
          {
            "name": "FinalResult",
            "dataType": "string",
            "sourceColumn": "FinalResult"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_ChangeControlReportResult = Source{[Schema=\"pbi\",Item=\"ChangeControlReportResult\"]}[Data]",
                "in",
                "    pbi_ChangeControlReportResult"
              ]
            }
          }
        ]
      },
      {
        "name": "wastage_2022",
        "columns": [
          {
            "name": "RayvarzId",
            "dataType": "string",
            "sourceColumn": "RayvarzId"
          },
          {
            "name": "ProductName",
            "dataType": "string",
            "sourceColumn": "ProductName"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "MachineName",
            "dataType": "string",
            "sourceColumn": "MachineName"
          },
          {
            "name": "Sort",
            "dataType": "double",
            "sourceColumn": "Sort"
          },
          {
            "name": "ProcessInput2",
            "dataType": "double",
            "sourceColumn": "ProcessInput2"
          },
          {
            "name": "ProcessOutKilo2",
            "dataType": "double",
            "sourceColumn": "ProcessOutKilo2"
          },
          {
            "name": "Wastage By Process%",
            "dataType": "double",
            "sourceColumn": "Wastage By Process%",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Wastage By Batch",
            "dataType": "double",
            "sourceColumn": "Wastage By Batch",
            "formatString": "0.00%;-0.00%;0.00%"
          },
          {
            "name": "Month",
            "dataType": "int64",
            "sourceColumn": "Month"
          },
          {
            "type": "calculated",
            "name": "RayvarzBatch",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "wastage_2022[RayvarzId]&\"-\"&wastage_2022[BatchNo]"
          },
          {
            "type": "calculated",
            "name": "TotalBatchTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "CALCULATE(max('qv PerformanceReport'[NetTimePerBatch(h)]),filter('qv PerformanceReport',",
              "'qv PerformanceReport'[RayvarzId]=VALUE(wastage_2022[RayvarzId]) && 'qv PerformanceReport'[BatchNo]=wastage_2022[BatchNo] ",
              "&& 'qv PerformanceReport'[ProcessID]=wastage_2022[ProcessId]))"
            ]
          },
          {
            "type": "calculated",
            "name": "ProcessId",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "LOOKUPVALUE('dim Process'[ProcessId],'dim Process'[ProcessName],wastage_2022[ProcessNameFa])"
          },
          {
            "type": "calculated",
            "name": "Input*Wastage",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "wastage_2022[ProcessInput2]*wastage_2022[Wastage By Process%]"
          },
          {
            "type": "calculated",
            "name": "Input*wastage*batchtime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "wastage_2022[TotalBatchTime]*wastage_2022[Input*Wastage]",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "WastageTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE(wastage_2022[ProcessInput2],wastage_2022[Input*wastage*batchtime])"
          },
          {
            "type": "calculated",
            "name": "RayvarzIdNum",
            "dataType": "int64",
            "isDataTypeInferred": false,
            "expression": "wastage_2022[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": " LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[ShMon],wastage_2022[Month])"
          },
          {
            "name": "ActualQty",
            "dataType": "double",
            "sourceColumn": "ActualQty"
          },
          {
            "name": "OrderQty",
            "dataType": "double",
            "sourceColumn": "OrderQty"
          },
          {
            "name": "OrderMultRatio",
            "dataType": "double",
            "sourceColumn": "OrderMultRatio"
          },
          {
            "name": "YieldPerBatch",
            "dataType": "double",
            "sourceColumn": "YieldPerBatch"
          },
          {
            "name": "YieldPerProduct",
            "dataType": "double",
            "sourceColumn": "YieldPerProduct"
          },
          {
            "name": "Ratio",
            "dataType": "double",
            "sourceColumn": "Ratio"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/pbidb;iedb\",",
                "    dbo_wastage_2022 = Source{[Schema=\"dbo\",Item=\"wastage_2022\"]}[Data]",
                "in",
                "    dbo_wastage_2022"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "wastageByBatch",
            "expression": "max(wastage_2022[Wastage By Batch])/100",
            "formatString": "0.00%;-0.00%;0.00%"
          }
        ]
      },
      {
        "name": "LandingIssue",
        "columns": [
          {
            "name": "LandingProductionId",
            "dataType": "int64",
            "sourceColumn": "LandingProductionId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "RayID",
            "dataType": "int64",
            "sourceColumn": "RayID",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "month",
            "dataType": "int64",
            "sourceColumn": "month",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Process",
            "dataType": "string",
            "sourceColumn": "Process",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "ForeCast",
            "dataType": "double",
            "sourceColumn": "ForeCast",
            "sourceProviderType": "Single"
          },
          {
            "name": "FirstPlan",
            "dataType": "int64",
            "sourceColumn": "FirstPlan",
            "sourceProviderType": "Integer"
          },
          {
            "name": "LastPlan",
            "dataType": "int64",
            "sourceColumn": "LastPlan",
            "sourceProviderType": "Integer"
          },
          {
            "name": "MTD",
            "dataType": "int64",
            "sourceColumn": "MTD",
            "sourceProviderType": "Integer"
          },
          {
            "name": "date",
            "dataType": "dateTime",
            "sourceColumn": "date",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "ProductId",
            "dataType": "int64",
            "sourceColumn": "ProductId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "ProcessId",
            "dataType": "int64",
            "sourceColumn": "ProcessId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "WhichIssue",
            "dataType": "string",
            "sourceColumn": "WhichIssue",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "IssueTypeName",
            "dataType": "string",
            "sourceColumn": "IssueTypeName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "LandingIssuePercent",
            "dataType": "double",
            "sourceColumn": "LandingIssuePercent",
            "sourceProviderType": "Double"
          },
          {
            "name": "Budget",
            "dataType": "int64",
            "sourceColumn": "Budget"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  LandingProductionId,RayID,month,Process,Budget,ForeCast,FirstPlan,LastPlan,MTD,date,aa.ProductId,aa.ProcessId  ",
                " ,LI.WhichIssue,IssueTypeName,LandingIssuePercent",
                " from qv.vwLandingProduction aa inner join  ",
                " (select Month as mn,RayID as ray,ProcessId as pid,max(date) as ddate from qv.vwLandingProduction group by Month,RayID,ProcessId ) bb",
                " on aa.date=bb.ddate and  aa.RayID=bb.ray and aa.ProcessId=bb.pid",
                " ",
                " ",
                "  inner join qv.vwLandingProductionIssue LI",
                "  ON aa.ProductId=LI.ProductId AND aa.ProcessId = LI.ProccessId AND aa.Month=LI.ShMon"
              ],
              "dataSource": "SqlServer etl AMARDB"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  LandingProductionId,RayID,month,Process,Budget,ForeCast,FirstPlan,LastPlan,MTD,date,aa.ProductId,aa.ProcessId  ",
                  " ,LI.WhichIssue,IssueTypeName,LandingIssuePercent",
                  " from qv.vwLandingProduction aa inner join  ",
                  " (select Month as mn,RayID as ray,ProcessId as pid,max(date) as ddate from qv.vwLandingProduction group by Month,RayID,ProcessId ) bb",
                  " on aa.date=bb.ddate and  aa.RayID=bb.ray and aa.ProcessId=bb.pid",
                  " ",
                  " ",
                  "  inner join qv.vwLandingProductionIssue LI",
                  "  ON aa.ProductId=LI.ProductId AND aa.ProcessId = LI.ProccessId AND aa.Month=LI.ShMon</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "Measure 3",
            "expression": [
              "",
              "",
              "if(SELECTEDVALUE(TblIssueVersion[WhichIssue])=\"BudgetToForeCast\" , CALCULATE(max(LandingIssue[ForeCast]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"BudgetToForeCast\")) -CALCULATE(max(LandingIssue[Budget]) ,FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"BudgetToForeCast\")) , ",
              "",
              "if(SELECTEDVALUE(TblIssueVersion[WhichIssue])=\"LastPlanToActual\" , CALCULATE(max(LandingIssue[MTD]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"LastPlanToActual\"))-CALCULATE(max(LandingIssue[LastPlan]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"LastPlanToActual\")),",
              "",
              "if(SELECTEDVALUE(TblIssueVersion[WhichIssue])=\"FirstPlanToLastPlan\" ,CALCULATE(max(LandingIssue[LastPlan]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"FirstPlanToLastPlan\"))-CALCULATE(max(LandingIssue[FirstPlan]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"FirstPlanToLastPlan\")),",
              "",
              "",
              "if(SELECTEDVALUE(TblIssueVersion[WhichIssue])=\"ForeCastToFirstPlan\" , CALCULATE(max(LandingIssue[FirstPlan]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"ForeCastToFirstPlan\"))-CALCULATE(max(LandingIssue[ForeCast]),FILTER(LandingIssue ,",
              " LandingIssue[WhichIssue]=\"ForeCastToFirstPlan\"))",
              "",
              "))))"
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  LandingProductionId,RayID,month,Process,Budget,ForeCast,FirstPlan,LastPlan,MTD,date,aa.ProductId,aa.ProcessId  ",
              " ,LI.WhichIssue,IssueTypeName,LandingIssuePercent",
              " from qv.vwLandingProduction aa inner join  ",
              " (select Month as mn,RayID as ray,ProcessId as pid,max(date) as ddate from qv.vwLandingProduction group by Month,RayID,ProcessId ) bb",
              " on aa.date=bb.ddate and  aa.RayID=bb.ray and aa.ProcessId=bb.pid",
              " ",
              " ",
              "  inner join qv.vwLandingProductionIssue LI",
              "  ON aa.ProductId=LI.ProductId AND aa.ProcessId = LI.ProccessId AND aa.Month=LI.ShMon"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  LandingProductionId,RayID,month,Process,Budget,ForeCast,FirstPlan,LastPlan,MTD,date,aa.ProductId,aa.ProcessId  ",
              " ,LI.WhichIssue,IssueTypeName,LandingIssuePercent",
              " from qv.vwLandingProduction aa inner join  ",
              " (select Month as mn,RayID as ray,ProcessId as pid,max(date) as ddate from qv.vwLandingProduction group by Month,RayID,ProcessId ) bb",
              " on aa.date=bb.ddate and  aa.RayID=bb.ray and aa.ProcessId=bb.pid",
              " ",
              " ",
              "  inner join qv.vwLandingProductionIssue LI",
              "  ON aa.ProductId=LI.ProductId AND aa.ProcessId = LI.ProccessId AND aa.Month=LI.ShMon</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "TblIssueVersion",
        "columns": [
          {
            "name": "WhichIssue",
            "dataType": "string",
            "sourceColumn": "WhichIssue"
          },
          {
            "name": "Version",
            "dataType": "string",
            "sourceColumn": "Version"
          },
          {
            "name": "VersionID",
            "dataType": "int64",
            "sourceColumn": "VersionID"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WcipNSU8tCcl3yy9KdU4sLlHSgQoBGaZKsTpYVQCZyRCWCViJW2ZRcUlATmJeSL5PIoQFUgUSVYByjPAoBDFh6ozB6mCSIfmOySWliTnEKoIzDCHWQZ0MdDzMYmyux64KzfWxAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [WhichIssue = _t, Version = _t, VersionID = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"WhichIssue\", type text}, {\"Version\", type text}, {\"VersionID\", Int64.Type}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "CalculatedTable 12",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ProcessId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DimMachine[ProcessId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DimMachine[ProcessNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessCategory",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "DimMachine[ProcessCategory]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 12",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(DimMachine,DimMachine[ProcessId],DimMachine[ProcessNameEn],DimMachine[ProcessCategory])"
            }
          }
        ]
      },
      {
        "name": "MPS_ForecastTime",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "MachineId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[MachineDscEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Month",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[Month]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevName",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevName]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineTime(h)",
            "dataType": "double",
            "isNameInferred": false,
            "isDataTypeInferred": true,
            "sourceColumn": "[MachineTime]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RevId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RevId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 13",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE(filter('qv MPS','qv MPS'[TargetTypeId]=47 && 'qv MPS'[IsLastF]=TRUE())",
                ",'qv MPS'[RevId],'qv MPS'[MachineId],'qv MPS'[MachineDscEn],'qv MPS'[Month],'qv MPS'[RevName],\"MachineTime\",sum('qv MPS'[TotalTimeWholeBatch(h)]))"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi PM_ElapsedTime",
        "columns": [
          {
            "name": "MachineID",
            "dataType": "int64",
            "sourceColumn": "MachineID"
          },
          {
            "name": "MachineName",
            "dataType": "string",
            "sourceColumn": "MachineName"
          },
          {
            "name": "LastPMStep",
            "dataType": "int64",
            "sourceColumn": "LastPMStep"
          },
          {
            "name": "LastPMDesc",
            "dataType": "string",
            "sourceColumn": "LastPMDesc"
          },
          {
            "name": "LastDateEN",
            "dataType": "dateTime",
            "sourceColumn": "LastDateEN"
          },
          {
            "name": "LastDateFA",
            "dataType": "string",
            "sourceColumn": "LastDateFA"
          },
          {
            "name": "WorkTime",
            "dataType": "int64",
            "sourceColumn": "WorkTime"
          },
          {
            "name": "StarNo",
            "dataType": "int64",
            "sourceColumn": "StarNo"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;ABDDashboardDW\",",
                "    pbi_PM_ElapsedTime = Source{[Schema=\"pbi\",Item=\"PM_ElapsedTime\"]}[Data]",
                "in",
                "    pbi_PM_ElapsedTime"
              ]
            }
          }
        ]
      },
      {
        "name": "LabTestType",
        "columns": [
          {
            "name": "TestType",
            "dataType": "string",
            "sourceColumn": "TestType"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCijKTylNLlGK1YlW8k0sSS3KTMxRio0FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [TestType = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"TestType\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "Key",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "MachineID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineDscFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FinishDate",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[FinishDate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[PlanTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BomVersion]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShMon",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShMon]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessNameFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ShiladiYear]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Remark",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[Remark]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "box",
            "dataType": "double",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[box]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "VersionType",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[VersionType]"
          },
          {
            "type": "calculated",
            "name": "ProcessCategory",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "if('Key'[ProcessID] in {17,20,21,23,42} ,\"Packaging\" ,",
              " if('Key'[ProcessID] in {14,15,16},\"Solid\" ,",
              " if('Key'[ProcessID] in {10,11,13,38,22} , \"Manufacture\" ,",
              " 'Key'[ProcessNameFa])))"
            ]
          },
          {
            "type": "calculated",
            "name": "MiladiMonth",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[IeMonthDesc],'pbi BaseDate'[ShiladiYear],",
              "'Key'[ShiladiYear],'pbi BaseDate'[ShMon],'Key'[ShMon])"
            ],
            "sortByColumn": "MiladiMonthOrder"
          },
          {
            "type": "calculated",
            "name": "MiladiMonthOrder",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmonth = right('Key'[ShMon],2)",
              "",
              "return ",
              "",
              "if('Key'[ShiladiYear] <> BLANK() ,",
              "",
              "  if(vmonth=\"10\",1 , if(vmonth=\"11\",2,if(vmonth=\"12\",3,IF(vmonth=\"01\",4,IF(vmonth=\"02\",5,IF(vmonth=\"03\",6,",
              "  IF(vmonth=\"04\",7,IF(vmonth=\"05\",8,IF(vmonth=\"06\",9,IF(vmonth=\"07\",10,IF(vmonth=\"08\",11,IF(vmonth=\"09\",12))))))))))))",
              ")",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "LisenceHolderIdDesc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[LisenceHolderIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'Key'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "MarketingAuthIdDesc",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[MarketingAuthIdDesc],'Dimqv ProductExcel'[RayvarzNumber],'Key'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "ProductionType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[ProductionType],'Dimqv ProductExcel'[RayvarzNumber],'Key'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "StrategicVariation",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[StrategicVariation],'Dimqv ProductExcel'[RayvarzNumber],'Key'[RayvarzId])"
          },
          {
            "type": "calculated",
            "name": "BrandName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv ProductExcel'[BrandName],'Dimqv ProductExcel'[RayvarzNumber],'Key'[RayvarzId])"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": [
                " union(",
                "SUMMARIZE(FILTER('qv PerformanceReport','qv PerformanceReport'[PlanTypeId]=26 && 'qv PerformanceReport'[ProcessID] in {17,20,21,23,42}),      -- in {26,27,28} FILTER('qv PerformanceReport','qv PerformanceReport'[PlanTypeId]=26)",
                "'qv PerformanceReport'[MachineID],'qv PerformanceReport'[MachineDscFa],'qv PerformanceReport'[FinishDate],",
                "'qv PerformanceReport'[Typeprog],'qv PerformanceReport'[PlanTypeId],'qv PerformanceReport'[RayvarzId],'qv PerformanceReport'[ProcessID],'qv PerformanceReport'[ProductNameEn],'qv PerformanceReport'[BomVersion],",
                "'qv PerformanceReport'[ShMon],'qv PerformanceReport'[ProcessNameFa],'qv PerformanceReport'[ShiladiYear],",
                "\"Remark\",max('qv PerformanceReport'[Remarknew]),\"VersionType\",\"Actual\",\"box\",sum('qv PerformanceReport'[TotalProductionBox])",
                " ),",
                "",
                " SUMMARIZE(filter('qv MPS','qv MPS'[TargetTypeId]=47 && 'qv MPS'[ProcessId] in  {17,20,21,23,42}  && 'qv MPS'[IsLastF]= TRUE() && 'qv MPS'[IsActiveBudget]=TRUE() ) ,",
                "'qv MPS'[MachineID],'qv MPS'[MachineDescFa],'qv MPS'[BatchCount],'qv MPS'[TargetType],'qv MPS'[TargetTypeId],",
                "'qv MPS'[RayvarzId],'qv MPS'[ProcessId],'qv MPS'[ProductNameEn], 'qv MPS'[BomVersion],'qv MPS'[month],",
                "'qv MPS'[ProcessNameFa],'qv MPS'[ShiladiYear] ,\"Remark\",\"\",\"VersionType\",\"Forcast\",\"Box\",max('qv MPS'[BatchCountBatchBox])",
                " ),",
                "",
                "SUMMARIZE(filter('qv MPS', 'qv MPS'[TargetTypeId]<>47 && 'qv MPS'[ProcessId] in  {17,20,21,23,42} && 'qv MPS'[IsLastF]= TRUE &&  'qv MPS'[IsActiveBudget]=TRUE ),",
                "'qv MPS'[MachineID],'qv MPS'[MachineDescFa],'qv MPS'[BatchCount],'qv MPS'[TargetType],'qv MPS'[TargetTypeId],",
                "'qv MPS'[RayvarzId],'qv MPS'[ProcessId],'qv MPS'[ProductNameEn], 'qv MPS'[BomVersion],'qv MPS'[month],",
                "'qv MPS'[ProcessNameFa],'qv MPS'[ShiladiYear],\"Remark\",\"\",\"VersionType\",\"Forcast\",\"Box\",sum('qv MPS'[Amount]))",
                "",
                ",",
                "",
                "SUMMARIZE(CMOStore,CMOStore[MachineId],CMOStore[MachineDesc],CMOStore[TarikhSanad],    --= if(CMOStore[StoreNo] = \"18\" || CMOStore[StoreNo] = \"59\"",
                "CMOStore[TypeProg],CMOStore[PlanTypeId],CMOStore[CodeKala],CMOStore[ProcessId],CMOStore[OnvanKala],",
                "CMOStore[BomVersion],CMOStore[CMOMonth],[ProcessName],CMOStore[ShiladiYear],",
                "\"Remark\",max(CMOStore[SharhRadifSanad]),\"VersionType\",\"CMO\",\"Box\",sum(CMOStore[NewKhalesTolid])",
                ")",
                "",
                ")"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "KeyBudget",
            "expression": "CALCULATE(sum('Key'[box]),FILTER('Key','Key'[PlanTypeId]=46))"
          },
          {
            "name": "KeyR1",
            "expression": "CALCULATE(sum('Key'[box]),FILTER('Key','Key'[PlanTypeId]=48))"
          },
          {
            "name": "KeyR2",
            "expression": "CALCULATE(sum('Key'[box]),FILTER('Key','Key'[PlanTypeId]=49))"
          },
          {
            "name": "KeyR3",
            "expression": "CALCULATE(sum('Key'[box]),FILTER('Key','Key'[PlanTypeId]=402))"
          },
          {
            "name": "KeyF",
            "expression": "CALCULATE(sum('Key'[box]),FILTER('Key','Key'[PlanTypeId]=47))"
          }
        ]
      },
      {
        "name": "LabType",
        "columns": [
          {
            "name": "RepType",
            "dataType": "string",
            "sourceColumn": "RepType",
            "sortByColumn": "Order"
          },
          {
            "name": "Order",
            "dataType": "string",
            "sourceColumn": "Order"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCijKTylNLlHSUVKK1YlWckosSc5A4YSkFsNlA3IS84BsIzDHMbmkNDEHyDUGc33yE1My89KBfEOl2FgA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [RepType = _t, Order = _t]),",
                "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"RepType\", type text}})",
                "in",
                "    #\"Changed Type\""
              ]
            }
          }
        ]
      },
      {
        "name": "LabPlanAndActual",
        "columns": [
          {
            "name": "InstrumentLogBookHdrId",
            "dataType": "int64",
            "sourceColumn": "InstrumentLogBookHdrId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "MachineName",
            "dataType": "string",
            "sourceColumn": "MachineName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AnalystName",
            "dataType": "string",
            "sourceColumn": "AnalystName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "AnalyzeName",
            "dataType": "string",
            "sourceColumn": "AnalyzeName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SampleTypeId",
            "dataType": "int64",
            "sourceColumn": "SampleTypeId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "SampleType",
            "dataType": "string",
            "sourceColumn": "SampleType",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "SampleCode",
            "dataType": "int64",
            "sourceColumn": "SampleCode",
            "sourceProviderType": "BigInt"
          },
          {
            "name": "SampleName",
            "dataType": "string",
            "sourceColumn": "SampleName",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "BatchNo",
            "dataType": "string",
            "sourceColumn": "BatchNo",
            "sourceProviderType": "VarChar"
          },
          {
            "name": "MachineStartDateTime",
            "dataType": "dateTime",
            "sourceColumn": "MachineStartDateTime",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "MachineEndDateTime",
            "dataType": "dateTime",
            "sourceColumn": "MachineEndDateTime",
            "formatString": "General Date",
            "sourceProviderType": "Date"
          },
          {
            "name": "startdateid",
            "dataType": "int64",
            "sourceColumn": "startdateid",
            "sourceProviderType": "Integer"
          },
          {
            "name": "enddateid",
            "dataType": "int64",
            "sourceColumn": "enddateid",
            "sourceProviderType": "Integer"
          },
          {
            "name": "duration",
            "dataType": "int64",
            "sourceColumn": "duration",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Type",
            "dataType": "string",
            "sourceColumn": "Type",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "Key",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LabPlanAndActual[InstrumentLogBookHdrId]&\"-\"&LabPlanAndActual[Type]"
          },
          {
            "type": "calculated",
            "name": "TestType",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "if(left(LabPlanAndActual[SampleCode],3)=\"700\",\"Product\",\"Material\")"
          },
          {
            "type": "calculated",
            "name": "BatchTest",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LabPlanAndActual[SampleCode] & \"-\" & LabPlanAndActual[BatchNo] & \"-\" & LabPlanAndActual[AnalyzeName]"
          },
          {
            "type": "calculated",
            "name": "ActualStartDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmiladisdate = LEFT(FORMAT(LabPlanAndActual[MachineStartDateTime],\"yyyy/mm/dd\"),10)",
              "",
              " return ",
              "",
              " LOOKUPVALUE('pbi BaseDate'[DateId],'pbi BaseDate'[DateGText],vmiladisdate)",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ActualEndDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var vmiladisdate = LEFT(FORMAT(LabPlanAndActual[MachineEndDateTime],\"yyyy/mm/dd\"),10)",
              "",
              " return ",
              "",
              " LOOKUPVALUE('pbi BaseDate'[DateId],'pbi BaseDate'[DateGText],vmiladisdate)",
              "",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                "\t\t   iif(detectorstartdatetime<pumpstartdatetime,detectorstartdatetime,pumpstartdatetime) as MachineStartDateTime ,",
                "\t\t   iif(detectorEnddatetime<pumpEnddatetime,detectorEnddatetime,pumpEnddatetime) as MachineEndDateTime,",
                "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                "FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_HPLC]",
                "union all",
                "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                "\t\t   SystemStartDateTime ,systemenddatetime,",
                "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_GC",
                "",
                "union all",
                "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                "\t\t   SystemStartDateTime ,systemenddatetime,",
                "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_UV",
                "",
                "union ALL",
                "  ",
                "SELECT  ScheduleAnalyzeGroupId,InstrumentId,InstrumentName,AnalystName,AnalyzeName ,",
                "  LabCenterId,LabCenterName,SampleCode,SampleName,BatchNo,StartDateTime,EndDateTime,",
                "   startdateid, enddateid,duration, 'Plan' as Type",
                "FROM  [pbi].[LaboratoryPlan]"
              ],
              "dataSource": "SqlServer etl ABDDashboardDW"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                  "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                  "\t\t   iif(detectorstartdatetime<pumpstartdatetime,detectorstartdatetime,pumpstartdatetime) as MachineStartDateTime ,",
                  "\t\t   iif(detectorEnddatetime<pumpEnddatetime,detectorEnddatetime,pumpEnddatetime) as MachineEndDateTime,",
                  "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                  "FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_HPLC]",
                  "union all",
                  "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                  "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                  "\t\t   SystemStartDateTime ,systemenddatetime,",
                  "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                  "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_GC",
                  "",
                  "union all",
                  "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
                  "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
                  "\t\t   SystemStartDateTime ,systemenddatetime,",
                  "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
                  "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_UV",
                  "",
                  "union ALL",
                  "  ",
                  "SELECT  ScheduleAnalyzeGroupId,InstrumentId,InstrumentName,AnalystName,AnalyzeName ,",
                  "  LabCenterId,LabCenterName,SampleCode,SampleName,BatchNo,StartDateTime,EndDateTime,",
                  "   startdateid, enddateid,duration, 'Plan' as Type",
                  "FROM  [pbi].[LaboratoryPlan]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "measures": [
          {
            "name": "DoneProduct",
            "expression": [
              "",
              " CALCULATE(DISTINCTCOUNT(LabPlanAndActual[SampleName]),FILTER(LabPlanAndActual,LabPlanAndActual[EndDateId]<=max( LabPlanAndActualDaily[DateId])))",
              "",
              ""
            ]
          },
          {
            "name": "InProgressProduct",
            "expression": [
              "",
              " CALCULATE(DISTINCTCOUNT(LabPlanAndActual[SampleName]),FILTER(LabPlanAndActual,LabPlanAndActual[EndDateId]>max( LabPlanAndActualDaily[DateId])))",
              "",
              ""
            ]
          },
          {
            "name": "DoneBatch",
            "expression": [
              "",
              " CALCULATE(DISTINCTCOUNT(LabPlanAndActual[BatchNo]),FILTER(LabPlanAndActual,LabPlanAndActual[EndDateId]<=max( LabPlanAndActualDaily[DateId])))",
              "",
              ""
            ]
          },
          {
            "name": "InProgressBatch",
            "expression": [
              "",
              " CALCULATE(DISTINCTCOUNT(LabPlanAndActual[BatchNo]),FILTER(LabPlanAndActual,LabPlanAndActual[EndDateId]>max( LabPlanAndActualDaily[DateId])))",
              "",
              ""
            ]
          },
          {
            "name": "LabDuration",
            "expression": [
              "",
              "",
              "if(SELECTEDVALUE(LabType[RepType])=\"Actual\" , CALCULATE(sum(LabPlanAndActualDaily[DailyDauration]),FILTER(LabPlanAndActual,LabPlanAndActual[Type]=\"Actual\")) ,",
              "if(SELECTEDVALUE(LabType[RepType])=\"Plan\",CALCULATE(sum(LabPlanAndActualDaily[DailyDauration]),FILTER(LabPlanAndActual,LabPlanAndActual[Type]=\"Plan\")) ,",
              "if(SELECTEDVALUE(LabType[RepType])=\"Loading\",CALCULATE(DISTINCTCOUNT(LabPlanAndActualDaily[DateId])*24*60,",
              "  CROSSFILTER (LabPlanAndActualDaily[FKey], 'LabPlanAndActual'[Key], NONE ))",
              "",
              ")))",
              "",
              "--ALLEXCEPT(LabPlanAndActualDaily,LabPlanAndActualDaily[ShiladiYear],LabPlanAndActualDaily[ShiladiWeek]),all(LabPlanAndActual))",
              ""
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   iif(detectorstartdatetime<pumpstartdatetime,detectorstartdatetime,pumpstartdatetime) as MachineStartDateTime ,",
              "\t\t   iif(detectorEnddatetime<pumpEnddatetime,detectorEnddatetime,pumpEnddatetime) as MachineEndDateTime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_HPLC]",
              "union all",
              "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   SystemStartDateTime ,systemenddatetime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_GC",
              "",
              "union all",
              "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   SystemStartDateTime ,systemenddatetime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_UV",
              "",
              "union ALL",
              "  ",
              "SELECT  ScheduleAnalyzeGroupId,InstrumentId,InstrumentName,AnalystName,AnalyzeName ,",
              "  LabCenterId,LabCenterName,SampleCode,SampleName,BatchNo,StartDateTime,EndDateTime,",
              "   startdateid, enddateid,duration, 'Plan' as Type",
              "FROM  [pbi].[LaboratoryPlan]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   iif(detectorstartdatetime<pumpstartdatetime,detectorstartdatetime,pumpstartdatetime) as MachineStartDateTime ,",
              "\t\t   iif(detectorEnddatetime<pumpEnddatetime,detectorEnddatetime,pumpEnddatetime) as MachineEndDateTime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_HPLC]",
              "union all",
              "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   SystemStartDateTime ,systemenddatetime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_GC",
              "",
              "union all",
              "select  InstrumentLogBookHdrId,MachineId,MachineName,AnalystName,AnalyzeName,",
              "           SampleTypeId,SampleType,SampleCode,SampleName,BatchNo,",
              "\t\t   SystemStartDateTime ,systemenddatetime,",
              "\t\t   '' as startdateid,'' as enddateid, '' as duration, 'Actual' as Type",
              "from ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_UV",
              "",
              "union ALL",
              "  ",
              "SELECT  ScheduleAnalyzeGroupId,InstrumentId,InstrumentName,AnalystName,AnalyzeName ,",
              "  LabCenterId,LabCenterName,SampleCode,SampleName,BatchNo,StartDateTime,EndDateTime,",
              "   startdateid, enddateid,duration, 'Plan' as Type",
              "FROM  [pbi].[LaboratoryPlan]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "LabPlanAndActualDaily",
        "columns": [
          {
            "name": "InstrumentLogBookHdrId",
            "dataType": "int64",
            "sourceColumn": "InstrumentLogBookHdrId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId",
            "sourceProviderType": "Integer"
          },
          {
            "name": "DailyDauration",
            "dataType": "int64",
            "sourceColumn": "DailyDauration",
            "sourceProviderType": "Integer"
          },
          {
            "name": "Type",
            "dataType": "string",
            "sourceColumn": "Type",
            "sourceProviderType": "VarChar"
          },
          {
            "type": "calculated",
            "name": "FKey",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LabPlanAndActualDaily[InstrumentLogBookHdrId]&\"-\"&LabPlanAndActualDaily[Type]"
          },
          {
            "type": "calculated",
            "name": "MachineId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE(LabPlanAndActual[MachineId],LabPlanAndActual[Key],LabPlanAndActualDaily[FKey])",
              "",
              "",
              "--CALCULATE(max('pbi LaboratoryPlan'[InstrumentId]) , FILTER('pbi LaboratoryPlan','pbi LaboratoryPlan'[ScheduleAnalyzeGroupId]='pbi LaboratoryPlan_Daily'[ScheduleAnalyzeGroupId]))",
              "",
              ""
            ]
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'LabPlanAndActualDaily'[DateId])"
          },
          {
            "type": "calculated",
            "name": "ShiladiWeek",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],'LabPlanAndActualDaily'[DateId])"
          }
        ],
        "partitions": [
          {
            "name": "Query",
            "dataView": "full",
            "source": {
              "type": "query",
              "query": [
                "SELECT InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_HPLC]  --actual",
                "  union ALL",
                " SELECT  InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_GC]",
                "  union all",
                " SELECT   InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                " from  ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_DailyLoad_UV",
                "  union ALL",
                " SELECT ScheduleAnalyzeGroupId,DateId,DailyDauration,'Plan' as Type  ",
                " FROM [ABDDashboardDW].[pbi].[LaboratoryPlan_Daily]"
              ],
              "dataSource": "SqlServer etl AMARDB"
            },
            "annotations": [
              {
                "name": "QueryEditorSerialization",
                "value": [
                  "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                  " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_HPLC]  --actual",
                  "  union ALL",
                  " SELECT  InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                  " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_GC]",
                  "  union all",
                  " SELECT   InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
                  " from  ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_DailyLoad_UV",
                  "  union ALL",
                  " SELECT ScheduleAnalyzeGroupId,DateId,DailyDauration,'Plan' as Type  ",
                  " FROM [ABDDashboardDW].[pbi].[LaboratoryPlan_Daily]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
                ]
              }
            ]
          }
        ],
        "annotations": [
          {
            "name": "_TM_ExtProp_QueryDefinition",
            "value": [
              "SELECT InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_HPLC]  --actual",
              "  union ALL",
              " SELECT  InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_GC]",
              "  union all",
              " SELECT   InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " from  ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_DailyLoad_UV",
              "  union ALL",
              " SELECT ScheduleAnalyzeGroupId,DateId,DailyDauration,'Plan' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryPlan_Daily]"
            ]
          },
          {
            "name": "_TM_ExtProp_DbTableName",
            "value": "Query"
          },
          {
            "name": "QueryEditorSerialization",
            "value": [
              "<?xml version=\"1.0\" encoding=\"UTF-16\"?><Gemini xmlns=\"QueryEditorSerialization\"><AnnotationContent><![CDATA[<RSQueryCommandText>SELECT InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_HPLC]  --actual",
              "  union ALL",
              " SELECT  InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryInstrumentLogBook_DailyLoad_GC]",
              "  union all",
              " SELECT   InstrumentLogBookHdrId,DateId,DailyDauration,'Actual' as Type  ",
              " from  ETL.ABDDashboardDW.pbi.LaboratoryInstrumentLogBook_DailyLoad_UV",
              "  union ALL",
              " SELECT ScheduleAnalyzeGroupId,DateId,DailyDauration,'Plan' as Type  ",
              " FROM [ABDDashboardDW].[pbi].[LaboratoryPlan_Daily]</RSQueryCommandText><RSQueryCommandType>Text</RSQueryCommandType><RSQueryDesignState></RSQueryDesignState>]]></AnnotationContent></Gemini>"
            ]
          }
        ]
      },
      {
        "name": "pbi LaboratoryPlanLogbookCompare",
        "columns": [
          {
            "name": "LogMachineId",
            "dataType": "int64",
            "sourceColumn": "LogMachineId"
          },
          {
            "name": "LogSampleName",
            "dataType": "string",
            "sourceColumn": "LogSampleName"
          },
          {
            "name": "LogBatchNo",
            "dataType": "string",
            "sourceColumn": "LogBatchNo"
          },
          {
            "name": "LogAnalyze",
            "dataType": "string",
            "sourceColumn": "LogAnalyze"
          },
          {
            "name": "LogAnalyzePeriod",
            "dataType": "string",
            "sourceColumn": "LogAnalyzePeriod"
          },
          {
            "name": "LogStartDateId",
            "dataType": "int64",
            "sourceColumn": "LogStartDateId"
          },
          {
            "name": "LogEndDateId",
            "dataType": "int64",
            "sourceColumn": "LogEndDateId"
          },
          {
            "name": "LogStartDateTime",
            "dataType": "dateTime",
            "sourceColumn": "LogStartDateTime"
          },
          {
            "name": "LogEndDateTime",
            "dataType": "dateTime",
            "sourceColumn": "LogEndDateTime"
          },
          {
            "name": "LogDuration",
            "dataType": "int64",
            "sourceColumn": "LogDuration"
          },
          {
            "name": "LogBatchCount",
            "dataType": "int64",
            "sourceColumn": "LogBatchCount"
          },
          {
            "name": "PlanMachineId",
            "dataType": "int64",
            "sourceColumn": "PlanMachineId"
          },
          {
            "name": "PlanSampleName",
            "dataType": "string",
            "sourceColumn": "PlanSampleName"
          },
          {
            "name": "PlanBatchNo",
            "dataType": "string",
            "sourceColumn": "PlanBatchNo"
          },
          {
            "name": "PlanAnalyze",
            "dataType": "string",
            "sourceColumn": "PlanAnalyze"
          },
          {
            "name": "PlanAnalyzePeriod",
            "dataType": "string",
            "sourceColumn": "PlanAnalyzePeriod"
          },
          {
            "name": "PlanStartDateId",
            "dataType": "int64",
            "sourceColumn": "PlanStartDateId"
          },
          {
            "name": "PlanEndDateId",
            "dataType": "int64",
            "sourceColumn": "PlanEndDateId"
          },
          {
            "name": "PlanStartDateTime",
            "dataType": "dateTime",
            "sourceColumn": "PlanStartDateTime"
          },
          {
            "name": "PlanEndDateTime",
            "dataType": "dateTime",
            "sourceColumn": "PlanEndDateTime"
          },
          {
            "name": "PlanDuration",
            "dataType": "int64",
            "sourceColumn": "PlanDuration"
          },
          {
            "name": "PlanBatchCount",
            "dataType": "int64",
            "sourceColumn": "PlanBatchCount"
          },
          {
            "type": "calculated",
            "name": "PlanMachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(LabPlanAndActual[MachineName],LabPlanAndActual[MachineId],'pbi LaboratoryPlanLogbookCompare'[PlanMachineId])"
          },
          {
            "type": "calculated",
            "name": "LogMachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(LabPlanAndActual[MachineName],LabPlanAndActual[MachineId],'pbi LaboratoryPlanLogbookCompare'[LogMachineId])"
          },
          {
            "type": "calculated",
            "name": "StartDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "if('pbi LaboratoryPlanLogbookCompare'[PlanStartDateId]=BLANK(),'pbi LaboratoryPlanLogbookCompare'[LogStartDateId],",
              "if('pbi LaboratoryPlanLogbookCompare'[LogStartDateId] = BLANK() ,'pbi LaboratoryPlanLogbookCompare'[PlanStartDateId],",
              "if( 'pbi LaboratoryPlanLogbookCompare'[PlanStartDateId]<='pbi LaboratoryPlanLogbookCompare'[LogStartDateId] ,",
              " 'pbi LaboratoryPlanLogbookCompare'[PlanStartDateId] , 'pbi LaboratoryPlanLogbookCompare'[LogStartDateId] )))"
            ]
          },
          {
            "type": "calculated",
            "name": "EndDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('pbi LaboratoryPlanLogbookCompare'[PlanEndDateId]=BLANK(),'pbi LaboratoryPlanLogbookCompare'[LogEndDateId],",
              "if('pbi LaboratoryPlanLogbookCompare'[LogEndDateId] = BLANK() ,'pbi LaboratoryPlanLogbookCompare'[PlanEndDateId],",
              "if('pbi LaboratoryPlanLogbookCompare'[PlanEndDateId]>='pbi LaboratoryPlanLogbookCompare'[LogEndDateId] , ",
              "'pbi LaboratoryPlanLogbookCompare'[PlanEndDateId] , 'pbi LaboratoryPlanLogbookCompare'[LogEndDateId] )))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;ABDDashboardDW\",",
                "    pbi_LaboratoryPlanLogbookCompare = Source{[Schema=\"pbi\",Item=\"LaboratoryPlanLogbookCompare\"]}[Data]",
                "in",
                "    pbi_LaboratoryPlanLogbookCompare"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "InWeekLab",
            "expression": [
              "",
              " var vstart =  Min(LabPlanAndActualDaily[DateId])",
              " var vEnd = MAX(LabPlanAndActualDaily[DateId])",
              "",
              "return ",
              "",
              "if(  (max('pbi LaboratoryPlanLogbookCompare'[StartDateId])<=vstart &&  vEnd <= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]) && vstart >= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]))",
              "     ||",
              "     (max('pbi LaboratoryPlanLogbookCompare'[StartDateId])<vstart &&  vstart<= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]) && max('pbi LaboratoryPlanLogbookCompare'[EndDateId])<=vEnd )",
              "     ||",
              "     ( vstart<=max('pbi LaboratoryPlanLogbookCompare'[StartDateId]) && max('pbi LaboratoryPlanLogbookCompare'[StartDateId])<=vEnd &&  vEnd<= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]) )",
              "     ||",
              "",
              "  (vstart<=max('pbi LaboratoryPlanLogbookCompare'[StartDateId]) && max('pbi LaboratoryPlanLogbookCompare'[StartDateId])<=vEnd &&  vEnd>= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]) &&",
              "   vstart<= max('pbi LaboratoryPlanLogbookCompare'[EndDateId]))",
              "",
              ",1,0)"
            ]
          }
        ]
      },
      {
        "name": "CalculatedTable 10",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv MPS[RayvarzId]"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 10",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE('qv MPS','qv MPS'[RayvarzId])"
            }
          }
        ]
      },
      {
        "name": "pbi PMForecast",
        "columns": [
          {
            "name": "MachinePMForecastHdrId",
            "dataType": "int64",
            "sourceColumn": "MachinePMForecastHdrId"
          },
          {
            "name": "MachinePMForecastDtlId",
            "dataType": "int64",
            "sourceColumn": "MachinePMForecastDtlId"
          },
          {
            "name": "DateId",
            "dataType": "int64",
            "sourceColumn": "DateId"
          },
          {
            "name": "MachineId",
            "dataType": "int64",
            "sourceColumn": "MachineId"
          },
          {
            "name": "MachineName",
            "dataType": "string",
            "sourceColumn": "MachineName"
          },
          {
            "name": "WorkTime",
            "dataType": "int64",
            "sourceColumn": "WorkTime"
          },
          {
            "name": "Tolerance",
            "dataType": "int64",
            "sourceColumn": "Tolerance"
          },
          {
            "name": "LastPMStepId",
            "dataType": "int64",
            "sourceColumn": "LastPMStepId"
          },
          {
            "name": "LastPMDesc",
            "dataType": "string",
            "sourceColumn": "LastPMDesc"
          },
          {
            "name": "NewPMStepId",
            "dataType": "int64",
            "sourceColumn": "NewPMStepId"
          },
          {
            "name": "NewPMDesc",
            "dataType": "string",
            "sourceColumn": "NewPMDesc"
          },
          {
            "name": "Duration",
            "dataType": "int64",
            "sourceColumn": "Duration"
          },
          {
            "type": "calculated",
            "name": "TypeProg",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"PM\""
          },
          {
            "type": "calculated",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1010"
          },
          {
            "type": "calculated",
            "name": "ProcessId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('Dimqv Machine'[ProcessId], 'Dimqv Machine'[MachineId],'pbi PMForecast'[MachineId])"
          },
          {
            "type": "calculated",
            "name": "ProcessNameEn",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('qv Process'[ProcessNameEn],'qv Process'[ProcessId],'pbi PMForecast'[ProcessID])"
          },
          {
            "type": "calculated",
            "name": "BomVersion",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "7070"
          },
          {
            "type": "calculated",
            "name": "BatchNo",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "2000"
          },
          {
            "type": "calculated",
            "name": "RayvarzId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "1"
          },
          {
            "type": "calculated",
            "name": "ProductName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"Test\""
          },
          {
            "type": "calculated",
            "name": "ShilftId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "2"
          },
          {
            "type": "calculated",
            "name": "ShiftName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"روز بلند*\""
          },
          {
            "type": "calculated",
            "name": "ShMonth",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "VALUE(left('pbi PMForecast'[DateId],6))"
          },
          {
            "type": "calculated",
            "name": "ShiladiYear",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE('pbi BaseDate'[ShiladiYear],'pbi BaseDate'[DateId],'pbi PMForecast'[DateId])"
          },
          {
            "type": "calculated",
            "name": "YearWeekNumber",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "LOOKUPVALUE('pbi BaseDate'[ShiladiWeek],'pbi BaseDate'[DateId],'pbi PMForecast'[DateId],",
              "'pbi BaseDate'[ShiladiYear],'pbi PMForecast'[ShiladiYear])",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_PMForecast = Source{[Schema=\"pbi\",Item=\"PMForecast\"]}[Data]",
                "in",
                "    pbi_PMForecast"
              ]
            }
          }
        ]
      },
      {
        "name": "DimChangeNo",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "ChangeNo",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi ChangeControlReport[ChangeNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "pbi ChangeControlReport[RayvarzId]"
          },
          {
            "type": "calculated",
            "name": "Year",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "\"20\" & LEFT('DimChangeNo'[ChangeNo],2)"
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 13",
            "source": {
              "type": "calculated",
              "expression": "SUMMARIZE(filter('pbi ChangeControlReport','pbi ChangeControlReport'[ChangeNo]<>\"-\"),'pbi ChangeControlReport'[ChangeNo],'pbi ChangeControlReport'[RayvarzId])"
            }
          }
        ]
      },
      {
        "name": "DTTarget",
        "columns": [
          {
            "name": "Index",
            "dataType": "double",
            "sourceColumn": "Index"
          },
          {
            "name": "ProcessNameFa",
            "dataType": "string",
            "sourceColumn": "ProcessNameFa"
          },
          {
            "name": "AcceptableType",
            "dataType": "string",
            "sourceColumn": "AcceptableType"
          },
          {
            "name": "ResponsibleType",
            "dataType": "string",
            "sourceColumn": "ResponsibleType"
          },
          {
            "name": "ResponsibleLvl2",
            "dataType": "string",
            "sourceColumn": "ResponsibleLvl2"
          },
          {
            "name": "ProcessId",
            "dataType": "double",
            "sourceColumn": "ProcessId"
          },
          {
            "name": "RespId",
            "dataType": "double",
            "sourceColumn": "RespId"
          },
          {
            "name": "Target (Loading)",
            "dataType": "double",
            "sourceColumn": "Target (Loading)"
          },
          {
            "name": "Target (Running)",
            "dataType": "double",
            "sourceColumn": "Target (Running)"
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;ABDDashboardDW\",",
                "    qv_target1 = Source{[Schema=\"qv\",Item=\"target1\"]}[Data]",
                "in",
                "    qv_target1"
              ]
            }
          }
        ]
      },
      {
        "name": "pbi LaboratoryPlanLogbookCompareIncludeMachine",
        "columns": [
          {
            "name": "LogMachineId",
            "dataType": "int64",
            "sourceColumn": "LogMachineId"
          },
          {
            "name": "LogSampleName",
            "dataType": "string",
            "sourceColumn": "LogSampleName"
          },
          {
            "name": "LogBatchNo",
            "dataType": "string",
            "sourceColumn": "LogBatchNo"
          },
          {
            "name": "LogAnalyze",
            "dataType": "string",
            "sourceColumn": "LogAnalyze"
          },
          {
            "name": "LogAnalyzePeriod",
            "dataType": "string",
            "sourceColumn": "LogAnalyzePeriod"
          },
          {
            "name": "LogStartDateId",
            "dataType": "int64",
            "sourceColumn": "LogStartDateId"
          },
          {
            "name": "LogEndDateId",
            "dataType": "int64",
            "sourceColumn": "LogEndDateId"
          },
          {
            "name": "LogStartDateTime",
            "dataType": "dateTime",
            "sourceColumn": "LogStartDateTime"
          },
          {
            "name": "LogEndDateTime",
            "dataType": "dateTime",
            "sourceColumn": "LogEndDateTime"
          },
          {
            "name": "LogDuration",
            "dataType": "int64",
            "sourceColumn": "LogDuration"
          },
          {
            "name": "LogBatchCount",
            "dataType": "int64",
            "sourceColumn": "LogBatchCount"
          },
          {
            "name": "PlanMachineId",
            "dataType": "int64",
            "sourceColumn": "PlanMachineId"
          },
          {
            "name": "PlanSampleName",
            "dataType": "string",
            "sourceColumn": "PlanSampleName"
          },
          {
            "name": "PlanBatchNo",
            "dataType": "string",
            "sourceColumn": "PlanBatchNo"
          },
          {
            "name": "PlanAnalyze",
            "dataType": "string",
            "sourceColumn": "PlanAnalyze"
          },
          {
            "name": "PlanAnalyzePeriod",
            "dataType": "string",
            "sourceColumn": "PlanAnalyzePeriod"
          },
          {
            "name": "PlanStartDateId",
            "dataType": "int64",
            "sourceColumn": "PlanStartDateId"
          },
          {
            "name": "PlanEndDateId",
            "dataType": "int64",
            "sourceColumn": "PlanEndDateId"
          },
          {
            "name": "PlanStartDateTime",
            "dataType": "dateTime",
            "sourceColumn": "PlanStartDateTime"
          },
          {
            "name": "PlanEndDateTime",
            "dataType": "dateTime",
            "sourceColumn": "PlanEndDateTime"
          },
          {
            "name": "PlanDuration",
            "dataType": "int64",
            "sourceColumn": "PlanDuration"
          },
          {
            "name": "PlanBatchCount",
            "dataType": "int64",
            "sourceColumn": "PlanBatchCount"
          },
          {
            "type": "calculated",
            "name": "PlanMachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(LabPlanAndActual[MachineName],LabPlanAndActual[MachineId],'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanMachineId])"
          },
          {
            "type": "calculated",
            "name": "LogMachineName",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": "LOOKUPVALUE(LabPlanAndActual[MachineName],LabPlanAndActual[MachineId],'pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogMachineId])"
          },
          {
            "type": "calculated",
            "name": "StartDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "",
              "if('pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanStartDateId]=BLANK(),'pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogStartDateId],",
              "if('pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogStartDateId] = BLANK() ,'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanStartDateId],",
              "if( 'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanStartDateId]<='pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogStartDateId] ,",
              " 'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanStartDateId] , 'pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogStartDateId] )))"
            ]
          },
          {
            "type": "calculated",
            "name": "EndDateId",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "if('pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanEndDateId]=BLANK(),'pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogEndDateId],",
              "if('pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogEndDateId] = BLANK() ,'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanEndDateId],",
              "if('pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanEndDateId]>='pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogEndDateId] , ",
              "'pbi LaboratoryPlanLogbookCompareIncludeMachine'[PlanEndDateId] , 'pbi LaboratoryPlanLogbookCompareIncludeMachine'[LogEndDateId] )))"
            ]
          }
        ],
        "partitions": [
          {
            "name": "Partition",
            "dataView": "full",
            "source": {
              "type": "m",
              "expression": [
                "let",
                "    Source = #\"SQL/etl;pbi\",",
                "    pbi_LaboratoryPlanLogbookCompareIncludeMachine = Source{[Schema=\"pbi\",Item=\"LaboratoryPlanLogbookCompareIncludeMachine\"]}[Data]",
                "in",
                "    pbi_LaboratoryPlanLogbookCompareIncludeMachine"
              ]
            }
          }
        ],
        "measures": [
          {
            "name": "InWeekLabInc",
            "expression": [
              "",
              " var vstart =  Min(LabPlanAndActualDaily[DateId])",
              " var vEnd = MAX(LabPlanAndActualDaily[DateId])",
              "",
              "return ",
              "",
              "if(  (max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId])<=vstart &&  vEnd <= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]) && vstart >= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]))",
              "     ||",
              "     (max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId])<vstart &&  vstart<= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]) && max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId])<=vEnd )",
              "     ||",
              "     ( vstart<=max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId]) && max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId])<=vEnd &&  vEnd<= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]) )",
              "     ||",
              "",
              "  (vstart<=max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId]) && max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[StartDateId])<=vEnd &&  vEnd>= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]) &&",
              "   vstart<= max('pbi LaboratoryPlanLogbookCompareIncludeMachine'[EndDateId]))",
              "",
              ",1,0)"
            ]
          }
        ]
      },
      {
        "name": "CalculatedTable 13",
        "columns": [
          {
            "type": "calculatedTableColumn",
            "name": "RayvarzId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": false,
            "sourceColumn": "Dimqv ProductExcel[RayvarzId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProductNameEn",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "Dimqv ProductExcel[ProductNameEn]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "MachineDscFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[MachineDscFa]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BatchNo",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BatchNo]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "FinishDate",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[FinishDate]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "PlanTypeId",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[PlanTypeId]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "Typeprog",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[Typeprog]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "BomVersion",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[BomVersion]"
          },
          {
            "type": "calculated",
            "name": "StandardBatchKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              " CALCULATE(max('qv BomDetailsAllVersion'[BatchKiloNet]),",
              "FILTER('qv BomDetailsAllVersion',",
              "'qv BomDetailsAllVersion'[rayvarzid]='CalculatedTable 13'[RayvarzId] ",
              "&& 'CalculatedTable 13'[ProcessID]='qv BomDetailsAllVersion'[ProcessId]",
              " && 'CalculatedTable 13'[BomVersion]='qv BomDetailsAllVersion'[version])) ",
              ""
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessID",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessID]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "ProcessNameFa",
            "dataType": "string",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "qv PerformanceReport[ProcessNameFa]"
          },
          {
            "type": "calculated",
            "name": "WastageKilo",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var VInput = if('CalculatedTable 13'[PlanTypeId]=26 , ",
              "CALCULATE(max(wastage_2022[ProcessInput2]),FILTER(wastage_2022,wastage_2022[RayvarzIdNum]='CalculatedTable 13'[RayvarzId] ",
              "&& 'CalculatedTable 13'[BatchNo]=wastage_2022[BatchNo] && 'CalculatedTable 13'[ProcessID]=wastage_2022[ProcessId])))",
              "",
              "",
              "var vWastageByProcess  = if('CalculatedTable 13'[PlanTypeId]=26 , ",
              "CALCULATE(max(wastage_2022[Wastage By Process%]),FILTER(wastage_2022,wastage_2022[RayvarzIdNum]='CalculatedTable 13'[RayvarzId] ",
              "&& 'CalculatedTable 13'[BatchNo]=wastage_2022[BatchNo] && 'CalculatedTable 13'[ProcessID]=wastage_2022[ProcessId])))",
              "",
              "return ",
              "VInput*vWastageByProcess"
            ]
          },
          {
            "type": "calculated",
            "name": "WastageTime",
            "dataType": "double",
            "isDataTypeInferred": true,
            "expression": "DIVIDE('CalculatedTable 13'[WastageKilo]*'CalculatedTable 13'[DurationHdr],'CalculatedTable 13'[StandardBatchKilo])"
          },
          {
            "type": "calculated",
            "name": "NewBatchNo",
            "dataType": "string",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "var va = SUBSTITUTE('CalculatedTable 13'[BatchNo],\"A\",\"\")",
              "var vb =SUBSTITUTE('CalculatedTable 13'[BatchNo],\"B\",\"\")",
              "",
              "",
              "",
              "var AFind  = CONTAINSSTRING('CalculatedTable 13'[BatchNo], \"A\") ",
              "var BFind  =CONTAINSSTRING('CalculatedTable 13'[BatchNo], \"B\") ",
              "",
              "var ALoc = SEARCH(\"A\",'CalculatedTable 13'[BatchNo],1,BLANK())",
              "var BLoc = SEARCH(\"B\",'CalculatedTable 13'[BatchNo],1,BLANK())",
              "",
              "return ",
              "",
              " if(AFind =TRUE() && (ALoc=3 || ALoc=5) ,va,if(BFind=TRUE() && (BLoc=3 || BLoc=5) ,vb,'CalculatedTable 13'[BatchNo]))"
            ]
          },
          {
            "type": "calculatedTableColumn",
            "name": "DurationHdr",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[DurationHdr]"
          },
          {
            "type": "calculatedTableColumn",
            "name": "NetTime",
            "dataType": "int64",
            "isNameInferred": true,
            "isDataTypeInferred": true,
            "sourceColumn": "[NetTime]"
          },
          {
            "type": "calculated",
            "name": "ReworkTime",
            "dataType": "int64",
            "isDataTypeInferred": true,
            "expression": [
              "",
              "                                      --performancereport[TotalBatchTime]",
              "var vreworktime = CALCULATE(max ('CalculatedTable 13'[NetTime]) , FILTER('CalculatedTable 13','CalculatedTable 13'[RayvarzId]=EARLIER('CalculatedTable 13'[RayvarzId]) &&",
              "'CalculatedTable 13'[ProcessID]=EARLIER('CalculatedTable 13'[ProcessID]) && 'CalculatedTable 13'[NewBatchNo]=EARLIER('CalculatedTable 13'[NewBatchNo]) &&",
              "'CalculatedTable 13'[BatchNo]<>'CalculatedTable 13'[NewBatchNo] && 'CalculatedTable 13'[PlanTypeId]=26 ))",
              "",
              "",
              "return ",
              "if('CalculatedTable 13'[BatchNo]='CalculatedTable 13'[NewBatchNo] ,vreworktime)",
              ""
            ]
          }
        ],
        "partitions": [
          {
            "name": "CalculatedTable 13",
            "source": {
              "type": "calculated",
              "expression": [
                "SUMMARIZE('qv PerformanceReport','Dimqv ProductExcel'[RayvarzId],'Dimqv ProductExcel'[ProductNameEn],",
                "           'qv PerformanceReport'[MachineID],'qv PerformanceReport'[MachineDscFa],'qv PerformanceReport'[ProcessID],'qv PerformanceReport'[ProcessNameFa],",
                "           'qv PerformanceReport'[BatchNo],'qv PerformanceReport'[FinishDate],'qv PerformanceReport'[PlanTypeId],'qv PerformanceReport'[BomVersion],",
                "           'qv PerformanceReport'[Typeprog],\"DurationHdr\", sum('qv PerformanceReport'[DurationHdr]) ,  \"NetTime\" ,sum('qv PerformanceReport'[NetTime]) )"
              ]
            }
          }
        ]
      }
    ],
    "relationships": [
      {
        "name": "57ba9d64-5d93-46d1-a5c2-d22feade4de7",
        "fromTable": "qv MPS",
        "fromColumn": "RevId",
        "toTable": "qv VersionBudget",
        "toColumn": "RevisionId"
      },
      {
        "name": "f7ffd2d9-6def-43e2-a612-e14887e17d5e",
        "fromTable": "qv MPS",
        "fromColumn": "MachineId",
        "toTable": "Dimqv Machine",
        "toColumn": "MachineId"
      },
      {
        "name": "206a0768-b685-4ad2-98c4-ab2b9509d0f4",
        "fromTable": "qv MPS",
        "fromColumn": "RayvarzId",
        "toTable": "Dimqv ProductExcel",
        "toColumn": "RayvarzId"
      },
      {
        "name": "34cd17f3-3b0b-4ff9-9746-e0c913fc7c89",
        "fromTable": "qv MPS",
        "fromColumn": "BomVersion",
        "toTable": "DimAllBomVersion",
        "toColumn": "BomVersion"
      },
      {
        "name": "5543f67f-f2eb-4cad-896d-a057f206c592",
        "fromTable": "qv PerformanceReport",
        "fromColumn": "MachineID",
        "toTable": "Dimqv Machine",
        "toColumn": "MachineId"
      },
      {
        "name": "06663153-87f4-401d-8308-aecc5dfc7c90",
        "fromTable": "qv PerformanceReport",
        "fromColumn": "RayvarzId",
        "toTable": "Dimqv ProductExcel",
        "toColumn": "RayvarzId"
      },
      {
        "name": "f12fc7b3-8fd6-4476-908a-917352aca9d2",
        "fromTable": "qv PerformanceReport",
        "fromColumn": "ShMon",
        "toTable": "CTDimMonth",
        "toColumn": "ShMon"
      },
      {
        "name": "c8d74305-a2b1-46c5-9568-e7b6d6f2f323",
        "fromTable": "qv MPS",
        "fromColumn": "Month",
        "toTable": "CTDimMonth",
        "toColumn": "ShMon"
      },
      {
        "name": "8d550595-ee7c-49e9-b0bf-28667bdd736a",
        "fromTable": "qv ProductMachineVisualIndexByBomVersion",
        "fromColumn": "RayvarzId",
        "toTable": "Dimqv ProductExcel",
        "toColumn": "RayvarzId"
      },
      {
        "name": "ae23d1e9-9b27-44f1-9209-beab297a94c0",
        "fromTable": "qv ProductMachineVisualIndexByBomVersion",
        "fromColumn": "MachineId",
        "toTable": "Dimqv Machine",
        "toColumn": "MachineId"
      },
      {
        "name": "fe5fdfd7-392b-40ed-a901-56c2e480b790",
        "fromTable": "qv ProductMachineVisualIndexByBomVersion",
        "fromColumn": "ProcessId",
        "toTable": "dim Process",
        "toColumn": "ProcessId"
      },
      {
        "name": "7193ad30-5f54-48db-98d1-24df8f02ca63",
        "fromTable": "IE ProductionIssue",
        "fromColumn": "Month",
        "toTable": "CTDimMonth",
        "toColumn": "ShMon"
      },
      {
        "name": "d4e22ad2-f6bb-41fb-b418-ed452eef6f90",
        "fromTable": "ProductWeeklyVsActual",
        "fromColumn": "DayName",
        "toTable": "DayName",
        "toColumn": "DayName"
      },
      {
        "name": "08833d88-0318-4900-801e-941d415384a9",
        "fromTable": "ProductWeeklyVsActual",
        "fromColumn": "FinishDate",
        "toTable": "DimShiladiYearMonth",
        "toColumn": "DateId"
      },
      {
        "name": "2ea75ec4-07cb-42a3-8830-fc8bc59eb8ee",
        "fromTable": "ProductWeeklyVsActual",
        "fromColumn": "ShMon",
        "toTable": "CTDimMonth",
        "toColumn": "ShMon"
      },
      {
        "name": "cb2707dc-5d87-40f1-9e46-9044f64eec0a",
        "fromTable": "ProductWeeklyVsActual",
        "fromColumn": "MachineID",
        "toTable": "DimMachine",
        "toColumn": "MachineId"
      },
      {
        "name": "c375e6d7-9ce1-4928-9b33-ed97eac77603",
        "fromTable": "qv ViewCalendarByMachine",
        "fromColumn": "DateId",
        "toTable": "DimShiladiYearMonth",
        "toColumn": "DateId"
      },
      {
        "name": "f11ba84c-1554-481c-a4e4-988fb7064ec3",
        "fromTable": "qv ViewCalendarByMachine",
        "fromColumn": "MachineId",
        "toTable": "DimMachine",
        "toColumn": "MachineId"
      },
      {
        "name": "dd6e92d3-e008-4bd0-8390-765d6de3a6f1",
        "fromTable": "CalculatedTable 9",
        "fromColumn": "LossVersionsPerMonth",
        "toTable": "DimPRLossVersion",
        "toColumn": "RevisionCode"
      },
      {
        "name": "29d1f384-0e51-4b89-8396-d7a8348634b1",
        "toCardinality": "many",
        "fromTable": "IE Pr_VersionLoss",
        "fromColumn": "RevisionCode",
        "toTable": "DimPRLossVersion",
        "toColumn": "RevisionCode",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "00afa0b7-30c8-4a2a-aaf3-38face0e7c56",
        "fromTable": "LandingIssue",
        "fromColumn": "month",
        "toTable": "CTDimMonth",
        "toColumn": "ShMon"
      },
      {
        "name": "684a6f0b-bf25-414e-8c40-b383a60ad152",
        "toCardinality": "many",
        "fromTable": "TblIssueVersion",
        "fromColumn": "VersionID",
        "toTable": "TblVersionType",
        "toColumn": "VersionId",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "4fa83af3-9b45-4619-bc28-e7f3635ce9c1",
        "fromTable": "LandingIssue",
        "fromColumn": "ProcessId",
        "toTable": "CalculatedTable 12",
        "toColumn": "ProcessId"
      },
      {
        "name": "ff01282a-62a5-4560-9d5b-d8de283f2e2e",
        "fromTable": "ProductWeeklyVsActual",
        "fromColumn": "ProcessID",
        "toTable": "CalculatedTable 12",
        "toColumn": "ProcessId"
      },
      {
        "name": "09357002-b507-415c-8926-3b651febeb64",
        "toCardinality": "many",
        "fromTable": "LabPlanAndActual",
        "fromColumn": "Key",
        "toTable": "LabPlanAndActualDaily",
        "toColumn": "FKey",
        "crossFilteringBehavior": "bothDirections"
      },
      {
        "name": "268b1418-0ac2-4ab3-93a1-19f200e14560",
        "fromTable": "pbi ChangeControlReportAttach",
        "fromColumn": "ChangeNo",
        "toTable": "DimChangeNo",
        "toColumn": "ChangeNo"
      },
      {
        "name": "bd8bad10-2d6f-4566-abbd-bbe6f6810c6d",
        "fromTable": "pbi ChangeControlReportResult",
        "fromColumn": "ChangeNo",
        "toTable": "DimChangeNo",
        "toColumn": "ChangeNo"
      },
      {
        "name": "5c7e98eb-bd88-4c36-8b99-692227ea3493",
        "fromTable": "pbi ChangeControlReportLog",
        "fromColumn": "ChangeNo",
        "toTable": "DimChangeNo",
        "toColumn": "ChangeNo"
      },
      {
        "name": "fb5268b9-1c77-4ee7-ba0a-fa93050af04d",
        "fromTable": "pbi ChangeControlReport",
        "fromColumn": "ChangeNo",
        "toTable": "DimChangeNo",
        "toColumn": "ChangeNo",
        "crossFilteringBehavior": "bothDirections"
      }
    ],
    "expressions": [
      {
        "name": "ReportType",
        "kind": "m",
        "expression": [
          "let",
          "    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCkvMKU1VitUBsvJzSnOBzFgA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Type = _t]),",
          "    #\"Changed Type\" = Table.TransformColumnTypes(Source,{{\"Type\", type text}})",
          "in",
          "    #\"Changed Type\""
        ]
      }
    ],
    "annotations": [
      {
        "name": "ClientCompatibilityLevel",
        "value": "600"
      }
    ]
  },
  "id": "SemanticModel"
}